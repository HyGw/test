/*
 * Generated by gdbus-codegen 2.41.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __PINGTEST_GENERATED_H__
#define __PINGTEST_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.ctc.igd1.PingTest */

#define PING_TEST_TYPE_PING_TEST (ping_test_ping_test_get_type ())
#define PING_TEST_PING_TEST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), PING_TEST_TYPE_PING_TEST, PingTestPingTest))
#define PING_TEST_IS_PING_TEST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), PING_TEST_TYPE_PING_TEST))
#define PING_TEST_PING_TEST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), PING_TEST_TYPE_PING_TEST, PingTestPingTestIface))

struct _PingTestPingTest;
typedef struct _PingTestPingTest PingTestPingTest;
typedef struct _PingTestPingTestIface PingTestPingTestIface;

struct _PingTestPingTestIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_start_test) (
    PingTestPingTest *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_ping_result) (PingTestPingTest *object);

  gboolean  (*get_ping_status) (PingTestPingTest *object);

};

GType ping_test_ping_test_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ping_test_ping_test_interface_info (void);
guint ping_test_ping_test_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ping_test_ping_test_complete_start_test (
    PingTestPingTest *object,
    GDBusMethodInvocation *invocation,
    guint restult,
    const gchar *errdesc);



/* D-Bus method calls: */
void ping_test_ping_test_call_start_test (
    PingTestPingTest *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ping_test_ping_test_call_start_test_finish (
    PingTestPingTest *proxy,
    guint *out_restult,
    gchar **out_errdesc,
    GAsyncResult *res,
    GError **error);

gboolean ping_test_ping_test_call_start_test_sync (
    PingTestPingTest *proxy,
    guint *out_restult,
    gchar **out_errdesc,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean ping_test_ping_test_get_ping_status (PingTestPingTest *object);
void ping_test_ping_test_set_ping_status (PingTestPingTest *object, gboolean value);

gboolean ping_test_ping_test_get_ping_result (PingTestPingTest *object);
void ping_test_ping_test_set_ping_result (PingTestPingTest *object, gboolean value);


/* ---- */

#define PING_TEST_TYPE_PING_TEST_PROXY (ping_test_ping_test_proxy_get_type ())
#define PING_TEST_PING_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), PING_TEST_TYPE_PING_TEST_PROXY, PingTestPingTestProxy))
#define PING_TEST_PING_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), PING_TEST_TYPE_PING_TEST_PROXY, PingTestPingTestProxyClass))
#define PING_TEST_PING_TEST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), PING_TEST_TYPE_PING_TEST_PROXY, PingTestPingTestProxyClass))
#define PING_TEST_IS_PING_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), PING_TEST_TYPE_PING_TEST_PROXY))
#define PING_TEST_IS_PING_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), PING_TEST_TYPE_PING_TEST_PROXY))

typedef struct _PingTestPingTestProxy PingTestPingTestProxy;
typedef struct _PingTestPingTestProxyClass PingTestPingTestProxyClass;
typedef struct _PingTestPingTestProxyPrivate PingTestPingTestProxyPrivate;

struct _PingTestPingTestProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  PingTestPingTestProxyPrivate *priv;
};

struct _PingTestPingTestProxyClass
{
  GDBusProxyClass parent_class;
};

GType ping_test_ping_test_proxy_get_type (void) G_GNUC_CONST;

void ping_test_ping_test_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
PingTestPingTest *ping_test_ping_test_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
PingTestPingTest *ping_test_ping_test_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ping_test_ping_test_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
PingTestPingTest *ping_test_ping_test_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
PingTestPingTest *ping_test_ping_test_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define PING_TEST_TYPE_PING_TEST_SKELETON (ping_test_ping_test_skeleton_get_type ())
#define PING_TEST_PING_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), PING_TEST_TYPE_PING_TEST_SKELETON, PingTestPingTestSkeleton))
#define PING_TEST_PING_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), PING_TEST_TYPE_PING_TEST_SKELETON, PingTestPingTestSkeletonClass))
#define PING_TEST_PING_TEST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), PING_TEST_TYPE_PING_TEST_SKELETON, PingTestPingTestSkeletonClass))
#define PING_TEST_IS_PING_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), PING_TEST_TYPE_PING_TEST_SKELETON))
#define PING_TEST_IS_PING_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), PING_TEST_TYPE_PING_TEST_SKELETON))

typedef struct _PingTestPingTestSkeleton PingTestPingTestSkeleton;
typedef struct _PingTestPingTestSkeletonClass PingTestPingTestSkeletonClass;
typedef struct _PingTestPingTestSkeletonPrivate PingTestPingTestSkeletonPrivate;

struct _PingTestPingTestSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  PingTestPingTestSkeletonPrivate *priv;
};

struct _PingTestPingTestSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ping_test_ping_test_skeleton_get_type (void) G_GNUC_CONST;

PingTestPingTest *ping_test_ping_test_skeleton_new (void);


G_END_DECLS

#endif /* __PINGTEST_GENERATED_H__ */
