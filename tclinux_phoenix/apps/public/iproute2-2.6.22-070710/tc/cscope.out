cscope 16 $HOME/workspace/newTrunk_latest2/Trunk/apps/iproute2-2.6.22-070710/tc               0000276752
	@em_cmp.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<dlf˙.h
>

22 
	~<î∫o.h
>

24 
	~"m_em©ch.h
"

25 
	~<löux/tc_em©ch/tc_em_cmp.h
>

27 
em©ch_utû
 
cmp_em©ch_utû
;

29 
	$cmp_¥öt_ußge
(
FILE
 *
fd
)

31 
	`Ârötf
(
fd
,

38 
TCF_LAYER_MAX
);

39 
	}
}

41 
	$cmp_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

42 
b°r
 *
¨gs
)

44 
b°r
 *
a
;

45 
Æign
, 
›nd
 = 0;

46 
off£t
 = 0, 
œyî
 = 
TCF_LAYER_NETWORK
, 
mask
 = 0, 
vÆue
 = 0;

47 
off£t_¥e£¡
 = 0, 
vÆue_¥e£¡
 = 0;

48 
tcf_em_cmp
 
cmp
;

50 
	`mem£t
(&
cmp
, 0, (cmp));

52 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

53 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
cmp_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

55 i‡(
¨gs
 =
NULL
)

56  
	`PARSE_ERR
(
¨gs
, "cmp: missingárguments");

58 i‡(!
	`b°rcmp
(
¨gs
, "u8"))

59 
Æign
 = 
TCF_EM_ALIGN_U8
;

60 i‡(!
	`b°rcmp
(
¨gs
, "u16"))

61 
Æign
 = 
TCF_EM_ALIGN_U16
;

62 i‡(!
	`b°rcmp
(
¨gs
, "u32"))

63 
Æign
 = 
TCF_EM_ALIGN_U32
;

65  
	`PARSE_ERR
(
¨gs
, "cmp: invalidálignment");

67 
a
 = 
	`b°r_√xt
(
¨gs
);á;á = bstr_next(a)) {

68 i‡(!
	`b°rcmp
(
a
, "at")) {

69 i‡(
a
->
√xt
 =
NULL
)

70  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

71 
a
 = 
	`b°r_√xt
(a);

73 
off£t
 = 
	`b°πoul
(
a
);

74 i‡(
off£t
 =
ULONG_MAX
)

75  
	`PARSE_ERR
(
a
, "cmp: invalid offset, " \

78 
off£t_¥e£¡
 = 1;

79 } i‡(!
	`b°rcmp
(
a
, "layer")) {

80 i‡(
a
->
√xt
 =
NULL
)

81  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

82 
a
 = 
	`b°r_√xt
(a);

84 
œyî
 = 
	`∑r£_œyî
(
a
);

85 i‡(
œyî
 =
INT_MAX
) {

86 
œyî
 = 
	`b°πoul
(
a
);

87 i‡(
œyî
 =
ULONG_MAX
)

88  
	`PARSE_ERR
(
a
, "cmp: invalid " \

92 i‡(
œyî
 > 
TCF_LAYER_MAX
)

93  
	`PARSE_ERR
(
a
, "cmp: illegalÜayer, " \

94 "mu° bêö 0..%d", 
TCF_LAYER_MAX
);

95 } i‡(!
	`b°rcmp
(
a
, "mask")) {

96 i‡(
a
->
√xt
 =
NULL
)

97  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

98 
a
 = 
	`b°r_√xt
(a);

100 
mask
 = 
	`b°πoul
(
a
);

101 i‡(
mask
 =
ULONG_MAX
)

102  
	`PARSE_ERR
(
a
, "cmp: invalid mask");

103 } i‡(!
	`b°rcmp
(
a
, "trans")) {

104 
cmp
.
Êags
 |
TCF_EM_CMP_TRANS
;

105 } i‡(!
	`b°rcmp
(
a
, "eq") || !bstrcmp(a, "gt") ||

106 !
	`b°rcmp
(
a
, "lt")) {

108 i‡(!
	`b°rcmp
(
a
, "eq"))

109 
›nd
 = 
TCF_EM_OPND_EQ
;

110 i‡(!
	`b°rcmp
(
a
, "gt"))

111 
›nd
 = 
TCF_EM_OPND_GT
;

112 i‡(!
	`b°rcmp
(
a
, "lt"))

113 
›nd
 = 
TCF_EM_OPND_LT
;

115 i‡(
a
->
√xt
 =
NULL
)

116  
	`PARSE_ERR
(
a
, "cmp: missingárgument");

117 
a
 = 
	`b°r_√xt
(a);

119 
vÆue
 = 
	`b°πoul
(
a
);

120 i‡(
vÆue
 =
ULONG_MAX
)

121  
	`PARSE_ERR
(
a
, "cmp: invalid value");

123 
vÆue_¥e£¡
 = 1;

125  
	`PARSE_ERR
(
a
, "nbyte: unknownÖarameter");

128 i‡(
off£t_¥e£¡
 =0 || 
vÆue_¥e£¡
 == 0)

129  
	`PARSE_ERR
(
a
, "cmp: offsetánd valueÑequired");

131 
cmp
.
vÆ
 = (
__u32
Ë
vÆue
;

132 
cmp
.
mask
 = (
__u32
) mask;

133 
cmp
.
off
 = (
__u16
Ë
off£t
;

134 
cmp
.
Æign
 = (
__u8
)álign;

135 
cmp
.
œyî
 = (
__u8
)Üayer;

136 
cmp
.
›nd
 = (
__u8
) opnd;

138 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

139 
	`addøw_l
(
n
, 
MAX_MSG
, &
cmp
, (cmp));

141 #unde‡
PARSE_ERR


143 
	}
}

145 
	$cmp_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

146 
d©a_Àn
)

148 
tcf_em_cmp
 *
cmp
 = 
d©a
;

150 i‡(
d©a_Àn
 < (*
cmp
)) {

151 
	`Ârötf
(
°dîr
, "CMP header size mismatch\n");

155 i‡(
cmp
->
Æign
 =
TCF_EM_ALIGN_U8
)

156 
	`Ârötf
(
fd
, "u8 ");

157 i‡(
cmp
->
Æign
 =
TCF_EM_ALIGN_U16
)

158 
	`Ârötf
(
fd
, "u16 ");

159 i‡(
cmp
->
Æign
 =
TCF_EM_ALIGN_U16
)

160 
	`Ârötf
(
fd
, "u32 ");

162 
	`Ârötf
(
fd
, "© %dÜayî %d ", 
cmp
->
off
, cmp->
œyî
);

164 i‡(
cmp
->
mask
)

165 
	`Ârötf
(
fd
, "mask 0x%x ", 
cmp
->
mask
);

167 i‡(
cmp
->
Êags
 & 
TCF_EM_CMP_TRANS
)

168 
	`Ârötf
(
fd
, "trans ");

170 i‡(
cmp
->
›nd
 =
TCF_EM_OPND_EQ
)

171 
	`Ârötf
(
fd
, "eq ");

172 i‡(
cmp
->
›nd
 =
TCF_EM_OPND_LT
)

173 
	`Ârötf
(
fd
, "lt ");

174 i‡(
cmp
->
›nd
 =
TCF_EM_OPND_GT
)

175 
	`Ârötf
(
fd
, "gt ");

177 
	`Ârötf
(
fd
, "%d", 
cmp
->
vÆ
);

180 
	}
}

182 
em©ch_utû
 
	gcmp_em©ch_utû
 = {

183 .
köd
 = "cmp",

184 .
	gköd_num
 = 
TCF_EM_CMP
,

185 .
	g∑r£_e›t
 = 
cmp_∑r£_e›t
,

186 .
	g¥öt_e›t
 = 
cmp_¥öt_e›t
,

187 .
	g¥öt_ußge
 = 
cmp_¥öt_ußge


	@em_meta.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<dlf˙.h
>

22 
	~<î∫o.h
>

24 
	~"m_em©ch.h
"

25 
	~<löux/tc_em©ch/tc_em_mëa.h
>

27 
em©ch_utû
 
mëa_em©ch_utû
;

29 
	$mëa_¥öt_ußge
(
FILE
 *
fd
)

31 
	`Ârötf
(
fd
,

42 
	}
}

44 
	smëa_íåy
 {

45 
	mid
;

46 * 
	mköd
;

47 * 
	mmask
;

48 * 
	mdesc
;

49 } 
	gmëa_èbÀ
[] = {

50 
	#TCF_META_ID_SECTION
 0

	)

51 
	#__A
(
id
, 
«me
, 
mask
, 
desc
Ë{ 
TCF_META_ID_
##id,Çame, mask, des¯}

	)

52 
__A
(
SECTION
, "Generic", "", ""),

53 
__A
(
RANDOM
, "random", "i",

55 
__A
(
LOADAVG_0
, "loadavg_1", "i",

57 
__A
(
LOADAVG_1
, "loadavg_5", "i",

59 
__A
(
LOADAVG_2
, "loadavg_15", "i",

62 
__A
(
SECTION
, "Interfaces", "", ""),

63 
__A
(
DEV
, "dev", "iv",

65 
__A
(
SECTION
, "Packetáttributes", "", ""),

66 
__A
(
PRIORITY
, "priority", "i",

68 
__A
(
PROTOCOL
, "protocol", "i",

70 
__A
(
PKTTYPE
, "pkt_type", "i",

72 
__A
(
PKTLEN
, "pkt_len", "i",

74 
__A
(
DATALEN
, "data_len", "i",

76 
__A
(
MACLEN
, "mac_len", "i",

79 
__A
(
SECTION
, "Netfilter", "", ""),

80 
__A
(
NFMARK
, "nf_mark", "i",

82 
__A
(
NFMARK
, "fwmark", "i",

85 
__A
(
SECTION
, "Traffic Control", "", ""),

86 
__A
(
TCINDEX
, "tc_index", "i", "TC Index"),

87 
__A
(
SECTION
, "Routing", "", ""),

88 
__A
(
RTCLASSID
, "rt_classid", "i",

90 
__A
(
RTIIF
, "rt_iif", "i",

93 
__A
(
SECTION
, "Sockets", "", ""),

94 
__A
(
SK_FAMILY
, "sk_family", "i", "Address family"),

95 
__A
(
SK_STATE
, "sk_state", "i", "State"),

96 
__A
(
SK_REUSE
, "sk_reuse", "i", "Reuse Flag"),

97 
__A
(
SK_BOUND_IF
, "sk_bind_if", "iv", "Bound interface"),

98 
__A
(
SK_REFCNT
, "sk_refcnt", "i", "Reference counter"),

99 
__A
(
SK_SHUTDOWN
, "sk_shutdown", "i", "Shutdown mask"),

100 
__A
(
SK_PROTO
, "sk_proto", "i", "Protocol"),

101 
__A
(
SK_TYPE
, "sk_type", "i", "Type"),

102 
__A
(
SK_RCVBUF
, "sk_rcvbuf", "i", "Receive buffer size"),

103 
__A
(
SK_RMEM_ALLOC
, "sk_rmem", "i", "RMEM"),

104 
__A
(
SK_WMEM_ALLOC
, "sk_wmem", "i", "WMEM"),

105 
__A
(
SK_OMEM_ALLOC
, "sk_omem", "i", "OMEM"),

106 
__A
(
SK_WMEM_QUEUED
, "sk_wmem_queue","i", "WMEM queue"),

107 
__A
(
SK_SND_QLEN
, "sk_snd_queue", "i", "Send queueÜength"),

108 
__A
(
SK_RCV_QLEN
, "sk_rcv_queue", "i", "Receive queueÜength"),

109 
__A
(
SK_ERR_QLEN
, "sk_err_queue", "i", "Error queueÜength"),

110 
__A
(
SK_FORWARD_ALLOCS
, "sk_fwd_alloc", "i", "Forwardállocations"),

111 
__A
(
SK_SNDBUF
, "sk_sndbuf", "i", "Send buffer size"),

112 #unde‡
__A


115 
ölöe
 
	$m≠_ty≥
(
k
)

117 
k
) {

118 'i':  
TCF_META_TYPE_INT
;

119 'v':  
TCF_META_TYPE_VAR
;

122 
	`Ârötf
(
°dîr
, "BUG: Unknow¿m≠ ch¨a˘î '%c'\n", 
k
);

123  
INT_MAX
;

124 
	}
}

126 
mëa_íåy
 * 
	$lookup_mëa_íåy
(
b°r
 *
köd
)

128 
i
;

130 
i
 = 0; i < ((
mëa_èbÀ
)/(meta_table[0])); i++)

131 i‡(!
	`b°rcmp
(
köd
, 
mëa_èbÀ
[
i
].kind) &&

132 
mëa_èbÀ
[
i
].
id
 != 0)

133  &
mëa_èbÀ
[
i
];

135  
NULL
;

136 
	}
}

138 
mëa_íåy
 * 
	$lookup_mëa_íåy_byid
(
id
)

140 
i
;

142 
i
 = 0; i < ((
mëa_èbÀ
)/(meta_table[0])); i++)

143 i‡(
mëa_èbÀ
[
i
].
id
 == id)

144  &
mëa_èbÀ
[
i
];

146  
NULL
;

147 
	}
}

149 
ölöe
 
	$dump_vÆue
(
∆msghdr
 *
n
, 
év
, 
vÆ
,

150 
tcf_mëa_vÆ
 *
hdr
)

152 
__u32
 
t
;

154 
	`TCF_META_TYPE
(
hdr
->
köd
)) {

155 
TCF_META_TYPE_INT
:

156 
t
 = 
vÆ
;

157 
	`add©å_l
(
n
, 
MAX_MSG
, 
év
, &
t
, (t));

160 
TCF_META_TYPE_VAR
:

161 i‡(
	`TCF_META_ID
(
hdr
->
köd
Ë=
TCF_META_ID_VALUE
) {

162 
b°r
 *
a
 = (b°∏*Ë
vÆ
;

163 
	`add©å_l
(
n
, 
MAX_MSG
, 
év
, 
a
->
d©a
,á->
Àn
);

167 
	}
}

169 
ölöe
 
	$is_com∑tibÀ
(
tcf_mëa_vÆ
 *
wh©
,

170 
tcf_mëa_vÆ
 *
√eded
)

172 *
p
;

173 
mëa_íåy
 *
íåy
;

175 
íåy
 = 
	`lookup_mëa_íåy_byid
(
	`TCF_META_ID
(
wh©
->
köd
));

177 i‡(
íåy
 =
NULL
)

180 
p
 = 
íåy
->
mask
;Ö;Ö++)

181 i‡(
	`m≠_ty≥
(*
p
Ë=
	`TCF_META_TYPE
(
√eded
->
köd
))

185 
	}
}

187 
	$li°_mëa_ids
(
FILE
 *
fd
)

189 
i
;

191 
	`Ârötf
(
fd
,

196 
i
 = 0; i < ((
mëa_èbÀ
)/(meta_table[0])); i++) {

197 i‡(
mëa_èbÀ
[
i
].
id
 =
TCF_META_ID_SECTION
) {

198 
	`Ârötf
(
fd
, "\n%s:\n", 
mëa_èbÀ
[
i
].
köd
);

200 *
p
 = 
mëa_èbÀ
[
i
].
mask
;

201 
buf
[64] = {0};

203 
	`Ârötf
(
fd
, " %-16†", 
mëa_èbÀ
[
i
].
köd
);

205 *
p
) {

206 
ty≥
 = 
	`m≠_ty≥
(*
p
);

208 
ty≥
) {

209 
TCF_META_TYPE_INT
:

210 
	`°rˇt
(
buf
, "INT");

213 
TCF_META_TYPE_VAR
:

214 
	`°rˇt
(
buf
, "VAR");

218 i‡(*(++
p
))

219 
	`°rˇt
(
buf
, ",");

222 
	`Ârötf
(
fd
, "%-10†%s\n", 
buf
, 
mëa_èbÀ
[
i
].
desc
);

226 
	`Ârötf
(
fd
,

228 
	}
}

230 #unde‡
TCF_META_ID_SECTION


232 
	#PARSE_FAILURE
 ((*Ë(-1))

	)

234 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

235 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
mëa_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

237 
ölöe
 
	$ˇn_ad›t
(
tcf_mëa_vÆ
 *
vÆ
)

239  !!
	`TCF_META_ID
(
vÆ
->
köd
);

240 
	}
}

242 
ölöe
 
	$ovîwrôe_ty≥
(
tcf_mëa_vÆ
 *
§c
,

243 
tcf_mëa_vÆ
 *
d°
)

245  (
	`TCF_META_TYPE
(
d°
->
köd
Ë<< 12Ë| 
	`TCF_META_ID
(
§c
->kind);

246 
	}
}

249 
ölöe
 
b°r
 *

250 
	$∑r£_obje˘
(
b°r
 *
¨gs
, b°∏*
¨g
, 
tcf_mëa_vÆ
 *
obj
,

251 *
d°
, 
tcf_mëa_vÆ
 *
À·
)

253 
mëa_íåy
 *
íåy
;

254 
num
;

255 
b°r
 *
a
;

257 i‡(
¨g
->
quŸed
) {

258 
obj
->
köd
 = 
TCF_META_TYPE_VAR
 << 12;

259 
obj
->
köd
 |
TCF_META_ID_VALUE
;

260 *
d°
 = (Ë
¨g
;

261  
	`b°r_√xt
(
¨g
);

264 
num
 = 
	`b°πoul
(
¨g
);

265 i‡(
num
 !
LONG_MAX
) {

266 
obj
->
köd
 = 
TCF_META_TYPE_INT
 << 12;

267 
obj
->
köd
 |
TCF_META_ID_VALUE
;

268 *
d°
 = (Ë
num
;

269  
	`b°r_√xt
(
¨g
);

272 
íåy
 = 
	`lookup_mëa_íåy
(
¨g
);

274 i‡(
íåy
 =
NULL
) {

275 
	`PARSE_ERR
(
¨g
, "meta: unknown meta id\n");

276  
PARSE_FAILURE
;

279 
obj
->
köd
 = 
íåy
->
id
 | (
	`m≠_ty≥
”¡ry->
mask
[0]) << 12);

281 i‡(
À·
) {

282 
tcf_mëa_vÆ
 *
right
 = 
obj
;

284 i‡(
	`TCF_META_TYPE
(
right
->
köd
Ë=TCF_META_TYPE(
À·
->kind))

285 
com∑tibÀ
;

287 i‡(
	`ˇn_ad›t
(
À·
Ë&& !ˇn_ad›t(
right
)) {

288 i‡(
	`is_com∑tibÀ
(
À·
, 
right
))

289 
À·
->
köd
 = 
	`ovîwrôe_ty≥
÷e·, 
right
);

291 
nŸ_com∑tibÀ
;

292 } i‡(
	`ˇn_ad›t
(
right
Ë&& !ˇn_ad›t(
À·
)) {

293 i‡(
	`is_com∑tibÀ
(
right
, 
À·
))

294 
right
->
köd
 = 
	`ovîwrôe_ty≥
‘ight, 
À·
);

296 
nŸ_com∑tibÀ
;

297 } i‡(
	`ˇn_ad›t
(
À·
Ë&& c™_ad›t(
right
)) {

298 i‡(
	`is_com∑tibÀ
(
À·
, 
right
))

299 
À·
->
köd
 = 
	`ovîwrôe_ty≥
÷e·, 
right
);

300 i‡(
	`is_com∑tibÀ
(
right
, 
À·
))

301 
right
->
köd
 = 
	`ovîwrôe_ty≥
‘ight, 
À·
);

303 
nŸ_com∑tibÀ
;

305 
nŸ_com∑tibÀ
;

308 
com∑tibÀ
:

310 
a
 = 
	`b°r_√xt
(
¨g
);

312 
a
) {

313 i‡(!
	`b°rcmp
(
a
, "shift")) {

314 
shi·
;

316 i‡(
a
->
√xt
 =
NULL
) {

317 
	`PARSE_ERR
(
a
, "meta: missingárgument");

318  
PARSE_FAILURE
;

320 
a
 = 
	`b°r_√xt
(a);

322 
shi·
 = 
	`b°πoul
(
a
);

323 i‡(
shi·
 =
LONG_MAX
) {

324 
	`PARSE_ERR
(
a
, "meta: invalid shift, must " \

326  
PARSE_FAILURE
;

329 
obj
->
shi·
 = (
__u8
) shift;

330 
a
 = 
	`b°r_√xt
(a);

331 } i‡(!
	`b°rcmp
(
a
, "mask")) {

332 
mask
;

334 i‡(
a
->
√xt
 =
NULL
) {

335 
	`PARSE_ERR
(
a
, "meta: missingárgument");

336  
PARSE_FAILURE
;

338 
a
 = 
	`b°r_√xt
(a);

340 
mask
 = 
	`b°πoul
(
a
);

341 i‡(
mask
 =
LONG_MAX
) {

342 
	`PARSE_ERR
(
a
, "meta: invalid mask, must be " \

344  
PARSE_FAILURE
;

346 *
d°
 = (Ë
mask
;

347 
a
 = 
	`b°r_√xt
(a);

352  
a
;

354 
nŸ_com∑tibÀ
:

355 
	`PARSE_ERR
(
¨g
, "lvalueándÑvalueáreÇot compatible.");

356  
PARSE_FAILURE
;

357 
	}
}

359 
	$mëa_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

360 
b°r
 *
¨gs
)

362 
›nd
;

363 
b°r
 *
a
;

364 
tcf_mëa_hdr
 
mëa_hdr
;

365 
lvÆue
 = 0, 
rvÆue
 = 0;

367 
	`mem£t
(&
mëa_hdr
, 0, (meta_hdr));

369 i‡(
¨gs
 =
NULL
)

370  
	`PARSE_ERR
(
¨gs
, "meta: missingárguments");

372 i‡(!
	`b°rcmp
(
¨gs
, "list")) {

373 
	`li°_mëa_ids
(
°dîr
);

377 
a
 = 
	`∑r£_obje˘
(
¨gs
,árgs, &
mëa_hdr
.
À·
, &
lvÆue
, 
NULL
);

378 i‡(
a
 =
PARSE_FAILURE
)

380 i‡(
a
 =
NULL
)

381  
	`PARSE_ERR
(
¨gs
, "meta: missing operand");

383 i‡(!
	`b°rcmp
(
a
, "eq"))

384 
›nd
 = 
TCF_EM_OPND_EQ
;

385 i‡(!
	`b°rcmp
(
a
, "gt"))

386 
›nd
 = 
TCF_EM_OPND_GT
;

387 i‡(!
	`b°rcmp
(
a
, "lt"))

388 
›nd
 = 
TCF_EM_OPND_LT
;

390  
	`PARSE_ERR
(
a
, "meta: invalid operand");

392 
mëa_hdr
.
À·
.
›
 = (
__u8
Ë
›nd
;

394 i‡(
a
->
√xt
 =
NULL
)

395  
	`PARSE_ERR
(
¨gs
, "meta: missingÑvalue");

396 
a
 = 
	`b°r_√xt
(a);

398 
a
 = 
	`∑r£_obje˘
(
¨gs
,á, &
mëa_hdr
.
right
, &
rvÆue
, &mëa_hdr.
À·
);

399 i‡(
a
 =
PARSE_FAILURE
)

401 i‡(
a
 !
NULL
)

402  
	`PARSE_ERR
(
a
, "meta: unexpectedÅrailer");

405 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

407 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_EM_META_HDR
, &
mëa_hdr
, (meta_hdr));

409 i‡(
lvÆue
)

410 
	`dump_vÆue
(
n
, 
TCA_EM_META_LVALUE
, 
lvÆue
, &
mëa_hdr
.
À·
);

412 i‡(
rvÆue
)

413 
	`dump_vÆue
(
n
, 
TCA_EM_META_RVALUE
, 
rvÆue
, &
mëa_hdr
.
right
);

416 
	}
}

417 #unde‡
PARSE_ERR


419 
ölöe
 
	$¥öt_bö¨y
(
FILE
 *
fd
, *
°r
, 
Àn
)

421 
i
;

423 
i
 = 0; i < 
Àn
; i++)

424 i‡(!
	`i•röt
(
°r
[
i
]))

425 
bö¨y
;

427 
i
 = 0; i < 
Àn
; i++)

428 
	`Ârötf
(
fd
, "%c", 
°r
[
i
]);

431 
bö¨y
:

432 
i
 = 0; i < 
Àn
; i++)

433 
	`Ârötf
(
fd
, "%02x ", 
°r
[
i
]);

435 
	`Ârötf
(
fd
, "\"");

436 
i
 = 0; i < 
Àn
; i++)

437 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
°r
[
i
]) ? str[i] : '.');

438 
	`Ârötf
(
fd
, "\"");

439 
	}
}

441 
ölöe
 
	$¥öt_vÆue
(
FILE
 *
fd
, 
ty≥
, 
π©å
 *
πa
)

443 i‡(
πa
 =
NULL
) {

444 
	`Ârötf
(
°dîr
, "Missing value TLV\n");

448 
ty≥
) {

449 
TCF_META_TYPE_INT
:

450 i‡(
	`RTA_PAYLOAD
(
πa
Ë< (
__u32
)) {

451 
	`Ârötf
(
°dîr
, "meta intÅype value TLV " \

455 
	`Ârötf
(
fd
, "%d", *(
__u32
 *Ë
	`RTA_DATA
(
πa
));

458 
TCF_META_TYPE_VAR
:

459 
	`¥öt_bö¨y
(
fd
, 
	`RTA_DATA
(
πa
), 
	`RTA_PAYLOAD
(rta));

464 
	}
}

466 
	$¥öt_obje˘
(
FILE
 *
fd
, 
tcf_mëa_vÆ
 *
obj
, 
π©å
 *
πa
)

468 
id
 = 
	`TCF_META_ID
(
obj
->
köd
);

469 
ty≥
 = 
	`TCF_META_TYPE
(
obj
->
köd
);

470 
mëa_íåy
 *
íåy
;

472 i‡(
id
 =
TCF_META_ID_VALUE
)

473  
	`¥öt_vÆue
(
fd
, 
ty≥
, 
πa
);

475 
íåy
 = 
	`lookup_mëa_íåy_byid
(
id
);

477 i‡(
íåy
 =
NULL
)

478 
	`Ârötf
(
fd
, "[unknow¿më®id %d]", 
id
);

480 
	`Ârötf
(
fd
, "%s", 
íåy
->
köd
);

482 i‡(
obj
->
shi·
)

483 
	`Ârötf
(
fd
, " shi· %d", 
obj
->
shi·
);

485 
ty≥
) {

486 
TCF_META_TYPE_INT
:

487 i‡(
πa
) {

488 i‡(
	`RTA_PAYLOAD
(
πa
Ë< (
__u32
))

489 
size_mism©ch
;

491 
	`Ârötf
(
fd
, " mask 0x%08x",

492 *(
__u32
*Ë
	`RTA_DATA
(
πa
));

499 
size_mism©ch
:

500 
	`Ârötf
(
°dîr
, "meta intÅype mask TLV size mismatch\n");

502 
	}
}

505 
	$mëa_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

506 
d©a_Àn
)

508 
π©å
 *
tb
[
TCA_EM_META_MAX
+1];

509 
tcf_mëa_hdr
 *
mëa_hdr
;

511 i‡(
	`∑r£_π©å
(
tb
, 
TCA_EM_META_MAX
, 
d©a
, 
d©a_Àn
) < 0)

514 i‡(
tb
[
TCA_EM_META_HDR
] =
NULL
) {

515 
	`Ârötf
(
°dîr
, "Missing meta header\n");

519 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_EM_META_HDR
]Ë< (*
mëa_hdr
)) {

520 
	`Ârötf
(
°dîr
, "Meta header size mismatch\n");

524 
mëa_hdr
 = 
	`RTA_DATA
(
tb
[
TCA_EM_META_HDR
]);

526 i‡(
	`¥öt_obje˘
(
fd
, &
mëa_hdr
->
À·
, 
tb
[
TCA_EM_META_LVALUE
]) < 0)

529 
mëa_hdr
->
À·
.
›
) {

530 
TCF_EM_OPND_EQ
:

531 
	`Ârötf
(
fd
, "Éq ");

533 
TCF_EM_OPND_LT
:

534 
	`Ârötf
(
fd
, "Üt ");

536 
TCF_EM_OPND_GT
:

537 
	`Ârötf
(
fd
, " gt ");

541  
	`¥öt_obje˘
(
fd
, &
mëa_hdr
->
right
, 
tb
[
TCA_EM_META_RVALUE
]);

542 
	}
}

544 
em©ch_utû
 
	gmëa_em©ch_utû
 = {

545 .
köd
 = "meta",

546 .
	gköd_num
 = 
TCF_EM_META
,

547 .
	g∑r£_e›t
 = 
mëa_∑r£_e›t
,

548 .
	g¥öt_e›t
 = 
mëa_¥öt_e›t
,

549 .
	g¥öt_ußge
 = 
mëa_¥öt_ußge


	@em_nbyte.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<dlf˙.h
>

22 
	~<î∫o.h
>

24 
	~"m_em©ch.h
"

25 
	~<löux/tc_em©ch/tc_em_nbyã.h
>

27 
em©ch_utû
 
nbyã_em©ch_utû
;

29 
	$nbyã_¥öt_ußge
(
FILE
 *
fd
)

31 
	`Ârötf
(
fd
,

38 
TCF_LAYER_MAX
);

39 
	}
}

41 
	$nbyã_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

42 
b°r
 *
¨gs
)

44 
b°r
 *
a
;

45 
b°r
 *
√edÀ
 = 
¨gs
;

46 
off£t
 = 0, 
œyî
 = 
TCF_LAYER_NETWORK
;

47 
off£t_¥e£¡
 = 0;

48 
tcf_em_nbyã
 
nb
;

50 
	`mem£t
(&
nb
, 0, (nb));

52 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

53 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
nbyã_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

55 i‡(
¨gs
 =
NULL
)

56  
	`PARSE_ERR
(
¨gs
, "nbyte: missingárguments");

58 i‡(
√edÀ
->
Àn
 <= 0)

59  
	`PARSE_ERR
(
¨gs
, "nbyte:ÇeedleÜength is 0");

61 
a
 = 
	`b°r_√xt
(
¨gs
);á;á = bstr_next(a)) {

62 i‡(!
	`b°rcmp
(
a
, "at")) {

63 i‡(
a
->
√xt
 =
NULL
)

64  
	`PARSE_ERR
(
a
, "nbyte: missingárgument");

65 
a
 = 
	`b°r_√xt
(a);

67 
off£t
 = 
	`b°πoul
(
a
);

68 i‡(
off£t
 =
ULONG_MAX
)

69  
	`PARSE_ERR
(
a
, "nbyte: invalid offset, " \

72 
off£t_¥e£¡
 = 1;

73 } i‡(!
	`b°rcmp
(
a
, "layer")) {

74 i‡(
a
->
√xt
 =
NULL
)

75  
	`PARSE_ERR
(
a
, "nbyte: missingárgument");

76 
a
 = 
	`b°r_√xt
(a);

78 
œyî
 = 
	`∑r£_œyî
(
a
);

79 i‡(
œyî
 =
INT_MAX
) {

80 
œyî
 = 
	`b°πoul
(
a
);

81 i‡(
œyî
 =
ULONG_MAX
)

82  
	`PARSE_ERR
(
a
, "nbyte: invalid " \

86 i‡(
œyî
 > 
TCF_LAYER_MAX
)

87  
	`PARSE_ERR
(
a
, "nbyte: illegalÜayer, " \

88 "mu° bêö 0..%d", 
TCF_LAYER_MAX
);

90  
	`PARSE_ERR
(
a
, "nbyte: unknownÖarameter");

93 i‡(
off£t_¥e£¡
 == 0)

94  
	`PARSE_ERR
(
a
, "nbyte: offsetÑequired");

96 
nb
.
Àn
 = 
√edÀ
->len;

97 
nb
.
œyî
 = (
__u8
)Üayer;

98 
nb
.
off
 = (
__u16
Ë
off£t
;

100 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

101 
	`addøw_l
(
n
, 
MAX_MSG
, &
nb
, (nb));

102 
	`addøw_l
(
n
, 
MAX_MSG
, 
√edÀ
->
d©a
,ÇìdÀ->
Àn
);

104 #unde‡
PARSE_ERR


106 
	}
}

108 
	$nbyã_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

109 
d©a_Àn
)

111 
i
;

112 
tcf_em_nbyã
 *
nb
 = 
d©a
;

113 
__u8
 *
√edÀ
;

115 i‡(
d©a_Àn
 < (*
nb
)) {

116 
	`Ârötf
(
°dîr
, "NByte header size mismatch\n");

120 i‡(
d©a_Àn
 < (*
nb
Ë+Çb->
Àn
) {

121 
	`Ârötf
(
°dîr
, "NByteÖayload size mismatch\n");

125 
√edÀ
 = 
d©a
 + (*
nb
);

127 
i
 = 0; i < 
nb
->
Àn
; i++)

128 
	`Ârötf
(
fd
, "%02x ", 
√edÀ
[
i
]);

130 
	`Ârötf
(
fd
, "\"");

131 
i
 = 0; i < 
nb
->
Àn
; i++)

132 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
√edÀ
[
i
]) ?Çeedle[i] : '.');

133 
	`Ârötf
(
fd
, "\"áà%dÜayî %d", 
nb
->
off
,Çb->
œyî
);

136 
	}
}

138 
em©ch_utû
 
	gnbyã_em©ch_utû
 = {

139 .
köd
 = "nbyte",

140 .
	gköd_num
 = 
TCF_EM_NBYTE
,

141 .
	g∑r£_e›t
 = 
nbyã_∑r£_e›t
,

142 .
	g¥öt_e›t
 = 
nbyã_¥öt_e›t
,

143 .
	g¥öt_ußge
 = 
nbyã_¥öt_ußge


	@em_u32.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<dlf˙.h
>

22 
	~<î∫o.h
>

24 
	~"m_em©ch.h
"

26 
em©ch_utû
 
u32_em©ch_utû
;

28 
	$u32_¥öt_ußge
(
FILE
 *
fd
)

30 
	`Ârötf
(
fd
,

35 
	}
}

37 
	$u32_∑r£_e›t
(
∆msghdr
 *
n
, 
tcf_em©ch_hdr
 *
hdr
,

38 
b°r
 *
¨gs
)

40 
b°r
 *
a
;

41 
Æign
, 
nh_Àn
;

42 
key
, 
mask
, 
offmask
 = 0, 
off£t
;

43 
tc_u32_key
 
u_key
;

45 
	`mem£t
(&
u_key
, 0, (u_key));

47 
	#PARSE_ERR
(
CARG
, 
FMT
, 
ARGS
...) \

48 
	`em_∑r£_îr‹
(
EINVAL
, 
¨gs
, 
CARG
, &
u32_em©ch_utû
, 
FMT
 ,##
ARGS
)

	)

50 i‡(
¨gs
 =
NULL
)

51  
	`PARSE_ERR
(
¨gs
, "u32: missingárguments");

53 i‡(!
	`b°rcmp
(
¨gs
, "u8"))

54 
Æign
 = 1;

55 i‡(!
	`b°rcmp
(
¨gs
, "u16"))

56 
Æign
 = 2;

57 i‡(!
	`b°rcmp
(
¨gs
, "u32"))

58 
Æign
 = 4;

60  
	`PARSE_ERR
(
¨gs
, "u32: invalidálignment");

62 
a
 = 
	`b°r_√xt
(
¨gs
);

63 i‡(
a
 =
NULL
)

64  
	`PARSE_ERR
(
a
, "u32: missing key");

66 
key
 = 
	`b°πoul
(
a
);

67 i‡(
key
 =
ULONG_MAX
)

68  
	`PARSE_ERR
(
a
, "u32: invalid key, must beÇumeric");

70 
a
 = 
	`b°r_√xt
(a);

71 i‡(
a
 =
NULL
)

72  
	`PARSE_ERR
(
a
, "u32: missing mask");

74 
mask
 = 
	`b°πoul
(
a
);

75 i‡(
mask
 =
ULONG_MAX
)

76  
	`PARSE_ERR
(
a
, "u32: invalid mask, must beÇumeric");

78 
a
 = 
	`b°r_√xt
(a);

79 i‡(
a
 =
NULL
 || 
	`b°rcmp
(a, "at") != 0)

80  
	`PARSE_ERR
(
a
, "u32: missing \"at\"");

82 
a
 = 
	`b°r_√xt
(a);

83 i‡(
a
 =
NULL
)

84  
	`PARSE_ERR
(
a
, "u32: missing offset");

86 
nh_Àn
 = 
	`°æí
("nexthdr+");

87 i‡(
a
->
Àn
 > 
nh_Àn
 && !
	`memcmp
◊->
d©a
, "nexthdr+",Çh_len)) {

88 
buf
[
a
->
Àn
 - 
nh_Àn
 + 1];

89 
offmask
 = -1;

90 
	`mem˝y
(
buf
, 
a
->
d©a
 + 
nh_Àn
,á->
Àn
 -Çh_len);

91 
off£t
 = 
	`°πoul
(
buf
, 
NULL
, 0);

92 } i‡(!
	`b°rcmp
(
a
, "nexthdr+")) {

93 
a
 = 
	`b°r_√xt
(a);

94 i‡(
a
 =
NULL
)

95  
	`PARSE_ERR
(
a
, "u32: missing offset");

96 
off£t
 = 
	`b°πoul
(
a
);

98 
off£t
 = 
	`b°πoul
(
a
);

100 i‡(
off£t
 =
ULONG_MAX
)

101  
	`PARSE_ERR
(
a
, "u32: invalid offset");

103 i‡(
a
->
√xt
)

104  
	`PARSE_ERR
(
a
->
√xt
, "u32: unexpectedÅrailer");

106 
Æign
) {

108 i‡(
key
 > 0xFF)

109  
	`PARSE_ERR
(
a
, "Illegal key (>0xFF)");

110 i‡(
mask
 > 0xFF)

111  
	`PARSE_ERR
(
a
, "Illegal mask (>0xFF)");

113 
key
 <<24 - ((
off£t
 & 3) * 8);

114 
mask
 <<24 - ((
off£t
 & 3) * 8);

115 
off£t
 &= ~3;

119 i‡(
key
 > 0xFFFF)

120  
	`PARSE_ERR
(
a
, "Illegal key (>0xFFFF)");

121 i‡(
mask
 > 0xFFFF)

122  
	`PARSE_ERR
(
a
, "Illegal mask (>0xFFFF)");

124 i‡((
off£t
 & 3) == 0) {

125 
key
 <<= 16;

126 
mask
 <<= 16;

128 
off£t
 &= ~3;

132 
key
 = 
	`ht⁄l
(key);

133 
mask
 = 
	`ht⁄l
(mask);

135 i‡(
off£t
 % 4)

136  
	`PARSE_ERR
(
a
, "u32: invalid offsetálignment, " \

139 
key
 &
mask
;

141 
u_key
.
mask
 = mask;

142 
u_key
.
vÆ
 = 
key
;

143 
u_key
.
off
 = 
off£t
;

144 
u_key
.
offmask
 = offmask;

146 
	`addøw_l
(
n
, 
MAX_MSG
, 
hdr
, (*hdr));

147 
	`addøw_l
(
n
, 
MAX_MSG
, &
u_key
, (u_key));

149 #unde‡
PARSE_ERR


151 
	}
}

153 
	$u32_¥öt_e›t
(
FILE
 *
fd
, 
tcf_em©ch_hdr
 *
hdr
, *
d©a
,

154 
d©a_Àn
)

156 
tc_u32_key
 *
u_key
 = 
d©a
;

158 i‡(
d©a_Àn
 < (*
u_key
)) {

159 
	`Ârötf
(
°dîr
, "U32 header size mismatch\n");

163 
	`Ârötf
(
fd
, "%08x/%08xát %s%d",

164 (Ë
	`¡ohl
(
u_key
->
vÆ
),

165 (Ë
	`¡ohl
(
u_key
->
mask
),

166 
u_key
->
offmask
 ? "nexthdr+" : "",

167 
u_key
->
off
);

170 
	}
}

172 
em©ch_utû
 
	gu32_em©ch_utû
 = {

173 .
köd
 = "u32",

174 .
	gköd_num
 = 
TCF_EM_U32
,

175 .
	g∑r£_e›t
 = 
u32_∑r£_e›t
,

176 .
	g¥öt_e›t
 = 
u32_¥öt_e›t
,

177 .
	g¥öt_ußge
 = 
u32_¥öt_ußge


	@emp_ematch.l

2 
	~"emp_em©ch.yacc.h
"

3 
	~"m_em©ch.h
"

5 
em©ch_¨gc
;

6 **
em©ch_¨gv
;

8 
	#yylvÆ
 
em©ch_lvÆ


	)

10 
	#NEXT_EM_ARG
(Ëdÿ{ 
em©ch_¨gc
--; 
em©ch_¨gv
++; } 0);

	)

12 
	#YY_INPUT
(
buf
, 
ªsu…
, 
max_size
) \

14 
√xt
: \

15 i‡(
em©ch_¨gc
 <= 0) \

16 
ªsu…
 = 
YY_NULL
; \

17 i‡(**
em©ch_¨gv
 == '\0') { \

18 
	`NEXT_EM_ARG
(); \

19 
√xt
; \

21 i‡(
max_size
 <
	`°æí
(*
em©ch_¨gv
) + 1) { \

22 
	`Ârötf
(
°dîr
, "matchárgumentÅooÜong.\n"); \

23 
ªsu…
 = 
YY_NULL
; \

25 
	`°r˝y
(
buf
, *
em©ch_¨gv
); \

26 
ªsu…
 = 
	`°æí
(*
em©ch_¨gv
) + 1; \

27 
buf
[
ªsu…
-1] = ' '; \

28 
buf
[
ªsu…
] = '\0'; \

29 
	`NEXT_EM_ARG
(); \

32 }

	)

34 
__©åibuã__
 ((
unu£d
)Ë
yyu≈ut
 (
c
,*
buf_±r
 );

35 
__©åibuã__
 ((
unu£d
)Ë
yy_push_°©e
 (
√w_°©e
 );

36 
__©åibuã__
 ((
unu£d
)Ë
yy_p›_°©e
 ();

37 
__©åibuã__
 ((
unu£d
)Ë
yy_t›_°©e
 ();

39 *
	g°rbuf
;

40 
	g°rbuf_size
;

41 
	g°rbuf_ödex
;

43 
	$°rbuf_íœrge
()

45 
°rbuf_size
 += 512;

46 
°rbuf
 = 
	`ªÆloc
(°rbuf, 
°rbuf_size
);

47 
	}
}

49 
	$°rbuf_≠≥nd_ch¨
(
c
)

51 
°rbuf_ödex
 >
°rbuf_size
)

52 
	`°rbuf_íœrge
();

53 
°rbuf
[
°rbuf_ödex
++] = 
c
;

54 
	}
}

56 
	$°rbuf_≠≥nd_ch¨p
(*
s
)

58 
°rbuf_ödex
 >
°rbuf_size
)

59 
	`°rbuf_íœrge
();

60 
	`mem˝y
(
°rbuf
 + 
°rbuf_ödex
, 
s
, 
	`°æí
(s));

61 
°rbuf_ödex
 +
	`°æí
(
s
);

62 
	}
}

66 %
x
 
°r


68 %
›ti⁄
 8b
ô
 
°ack
 
w¨n
 
noyywøp
 
¥efix
="ematch_"

69 %% /* 
	$yyÀx
 */

70 [ \
t
\
r
\
n
]+

73 i‡(
°rbuf
 =
NULL
) {

74 
°rbuf_size
 = 512;

75 
°rbuf
 = 
	`ˇŒoc
(1, 
°rbuf_size
);

76 i‡(
°rbuf
 =
NULL
)

77  
ERROR
;

79 
°rbuf_ödex
 = 0;

81 
	`BEGIN
(
°r
);

84 <
°r
>\" {

85 
	`BEGIN
(
INITIAL
);

86 
yylvÆ
.
b
 = 
	`b°r_√w
(
°rbuf
, 
°rbuf_ödex
);

87 
yylvÆ
.
b
->
quŸed
 = 1;

88  
ATTRIBUTE
;

91 <
°r
>\\[0-7]{1,3} {

92 
ªs
;

94 
	`ssˇnf
(
yyãxt
 + 1, "%o", &
ªs
);

95 i‡(
ªs
 > 0xFF) {

96 
	`Ârötf
(
°dîr
, "error: octalÉscape sequence" \

98  
ERROR
;

100 
	`°rbuf_≠≥nd_ch¨
((Ë
ªs
);

103 <
°r
>\\[0-9]+ {

104 
	`Ârötf
(
°dîr
, "error: invalid octaleÉscape sequence\n");

105  
ERROR
;

108 <
°r
>\\
x
[0-9a-
fA
-
F
]{1,2} {

109 
ªs
;

111 
	`ssˇnf
(
yyãxt
 + 2, "%x", &
ªs
);

113 i‡(
ªs
 > 0xFF) {

114 
	`Ârötf
(
°dîr
, "error: hexadecimalÉscape " \

116  
ERROR
;

118 
	`°rbuf_≠≥nd_ch¨
((Ë
ªs
);

121 <
°r
>\\
n
 
	`°rbuf_≠≥nd_ch¨
('\n');

122 <
°r
>\\
r
 
	`°rbuf_≠≥nd_ch¨
('\r');

123 <
°r
>\\
t
 
	`°rbuf_≠≥nd_ch¨
('\t');

124 <
°r
>\\
v
 
	`°rbuf_≠≥nd_ch¨
('\v');

125 <
°r
>\\
b
 
	`°rbuf_≠≥nd_ch¨
('\b');

126 <
°r
>\\
f
 
	`°rbuf_≠≥nd_ch¨
('\f');

127 <
°r
>\\
a
 
	`°rbuf_≠≥nd_ch¨
('\a');

129 <
°r
>\\(.|\
n
Ë
	`°rbuf_≠≥nd_ch¨
(
yyãxt
[1]);

130 <
°r
>[^\\\
n
\"]+ strbuf_append_charp(yytext);

132 [
aA
][
nN
][
dD
]  
AND
;

133 [
oO
][
rR
]  
OR
;

134 [
nN
][
oO
][
tT
]  
NOT
;

137  
yylvÆ
.
i
 = *
yyãxt
;

139 [^ \
t
\
r
\
	`n
()]+ {

140 
yylvÆ
.
b
 = 
	`b°r_Æloc
(
yyãxt
);

141 i‡(
yylvÆ
.
b
 =
NULL
)

142  
ERROR
;

143  
ATTRIBUTE
;

145 
	}
%%

	@emp_ematch.y

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<mÆloc.h
>

5 
	~<°rög.h
>

6 
	~"m_em©ch.h
"

9 %
loˇti⁄s


10 %
tokí
-
èbÀ


11 %
îr‹
-
vîbo£


12 %
«me
-
¥efix
="ematch_"

15 
i
;

16 
b°r
 *
b
;

17 
em©ch
 *
e
;

21 
em©ch_Àx
();

22 
yyîr‹
(*
s
);

23 
em©ch
 *
em©ch_roŸ
;

24 *
em©ch_îr
;

27 %
tokí
 <
i
> 
ERROR


28 %
tokí
 <
b
> 
ATTRIBUTE


29 %
tokí
 <
i
> 
AND
 
OR
 
NOT


30 %
ty≥
 <
i
> 
övît
 
ªœti⁄


31 %
ty≥
 <
e
> 
m©ch
 
ex¥


32 %
ty≥
 <
b
> 
¨gs


33 %
right
 
AND
 
OR


34 %
°¨t
 
öput


35 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

36 
öput
:

38 | 
ex¥


39 { 
em©ch_roŸ
 = 
$1
; }

40 | 
ex¥
 
îr‹


42 
em©ch_roŸ
 = 
$1
;

43 
YYACCEPT
;

47 
ex¥
:

48 
m©ch


49 { 
$$
 = 
$1
; }

50 | 
m©ch
 
ªœti⁄
 
ex¥


52 
$1
->
ªœti⁄
 = 
$2
;

53 
$1
->
√xt
 = 
$3
;

54 
$$
 = 
$1
;

58 
m©ch
:

59 
övît
 
ATTRIBUTE
 '(' 
¨gs
 ')'

61 
$2
->
√xt
 = 
$4
;

62 
$$
 = 
	`√w_em©ch
(
$2
, 
$1
);

63 i‡(
$$
 =
NULL
)

64 
YYABORT
;

66 | 
övît
 '(' 
ex¥
 ')'

68 
$$
 = 
	`√w_em©ch
(
NULL
, 
$1
);

69 i‡(
$$
 =
NULL
)

70 
YYABORT
;

71 
$$
->
chûd
 = 
$3
;

75 
¨gs
:

76 
ATTRIBUTE


77 { 
$$
 = 
$1
; }

78 | 
ATTRIBUTE
 
¨gs


79 { 
$1
->
√xt
 = 
$2
; }

82 
ªœti⁄
:

83 
AND


84 { 
$$
 = 
TCF_EM_REL_AND
; }

85 | 
OR


86 { 
$$
 = 
TCF_EM_REL_OR
; }

89 
övît
:

91 { 
$$
 = 0; }

92 | 
NOT


93 { 
$$
 = 1; }

95 
	}
%%

97 
	$yyîr‹
(*
s
)

99 
em©ch_îr
 = 
	`°rdup
(
s
);

100 
	}
}

	@emp_ematch.yacc.h

27 #i‚de‡
YYTOKENTYPE


28 
	#YYTOKENTYPE


	)

31 
	eyytokíty≥
 {

32 
	mERROR
 = 258,

33 
	mATTRIBUTE
 = 259,

34 
	mAND
 = 260,

35 
	mOR
 = 261,

36 
	mNOT
 = 262

39 
	#ERROR
 258

	)

40 
	#ATTRIBUTE
 259

	)

41 
	#AND
 260

	)

42 
	#OR
 261

	)

43 
	#NOT
 262

	)

48 #i‡! 
deföed
 (
YYSTYPE
Ë&& ! deföed (
YYSTYPE_IS_DECLARED
)

50 
	uYYSTYPE
 {

51 
	mi
;

52 
b°r
 *
	mb
;

53 
em©ch
 *
	me
;

54 } 
	tYYSTYPE
;

57 
	#yy°y≥
 
YYSTYPE


	)

58 
	#YYSTYPE_IS_DECLARED
 1

	)

59 
	#YYSTYPE_IS_TRIVIAL
 1

	)

62 
YYSTYPE
 
em©ch_lvÆ
;

64 #i‡! 
deföed
 (
YYLTYPE
Ë&& ! deföed (
YYLTYPE_IS_DECLARED
)

65 
	sYYLTYPE


67 
	mfú°_löe
;

68 
	mfú°_cﬁumn
;

69 
	mœ°_löe
;

70 
	mœ°_cﬁumn
;

71 } 
	tYYLTYPE
;

72 
	#yy…y≥
 
YYLTYPE


	)

73 
	#YYLTYPE_IS_DECLARED
 1

	)

74 
	#YYLTYPE_IS_TRIVIAL
 1

	)

77 
YYLTYPE
 
em©ch_Œoc
;

	@f_basic.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<löux/if.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"m_em©ch.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ... basic [ match EMATCH_TREE ] [Öolice POLICE_SPEC ]\n");

31 
	`Ârötf
(
°dîr
, " [áction ACTION_SPEC ] [ classid CLASSID ]\n");

32 
	`Ârötf
(
°dîr
, "\n");

33 
	`Ârötf
(
°dîr
, "Where: SELECTOR := SAMPLE SAMPLE ...\n");

34 
	`Ârötf
(
°dîr
, " FILTERID := X:Y:Z\n");

35 
	}
}

37 
	$basic_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
,

38 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

40 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

41 
π©å
 *
èû
;

42 
h
 = 0;

44 i‡(
¨gc
 == 0)

47 i‡(
h™dÀ
) {

48 
h
 = 
	`°πﬁ
(
h™dÀ
, 
NULL
, 0);

49 i‡(
h
 =
LONG_MIN
 || h =
LONG_MAX
) {

50 
	`Ârötf
(
°dîr
, "Illegal handle \"%s\", must beÇumeric.\n",

51 
h™dÀ
);

56 
t
->
tcm_h™dÀ
 = 
h
;

58 
èû
 = (
π©å
*)(((*)
n
)+
	`NLMSG_ALIGN
“->
∆msg_Àn
));

59 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

61 
¨gc
 > 0) {

62 i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

63 
	`NEXT_ARG
();

64 i‡(
	`∑r£_em©ch
(&
¨gc
, &
¨gv
, 
TCA_BASIC_EMATCHES
, 
n
)) {

65 
	`Ârötf
(
°dîr
, "Illegal \"ematch\"\n");

69 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

70 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

71 
h™dÀ
;

72 
	`NEXT_ARG
();

73 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

74 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

77 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_BASIC_CLASSID
, &
h™dÀ
, 4);

78 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

79 
	`NEXT_ARG
();

80 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_BASIC_ACT
, 
n
)) {

81 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

86 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

87 
	`NEXT_ARG
();

88 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_BASIC_POLICE
, 
n
)) {

89 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

93 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

94 
	`ex∂aö
();

97 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

98 
	`ex∂aö
();

101 
¨gc
--; 
¨gv
++;

104 
èû
->
πa_Àn
 = (((*)
n
)+n->
∆msg_Àn
) - (*)tail;

106 
	}
}

108 
	$basic_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

109 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

111 
π©å
 *
tb
[
TCA_BASIC_MAX
+1];

113 i‡(
›t
 =
NULL
)

116 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_BASIC_MAX
, 
›t
);

118 i‡(
h™dÀ
)

119 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

121 i‡(
tb
[
TCA_BASIC_CLASSID
]) {

122 
	`SPRINT_BUF
(
b1
);

123 
	`Ârötf
(
f
, "flowid %s ",

124 
	`•röt_tc_˛assid
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_BASIC_CLASSID
]), 
b1
));

127 i‡(
tb
[
TCA_BASIC_EMATCHES
])

128 
	`¥öt_em©ch
(
f
, 
tb
[
TCA_BASIC_EMATCHES
]);

130 i‡(
tb
[
TCA_BASIC_POLICE
]) {

131 
	`Ârötf
(
f
, "\n");

132 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_BASIC_POLICE
]);

135 i‡(
tb
[
TCA_BASIC_ACT
]) {

136 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_BASIC_ACT
]);

140 
	}
}

142 
fûãr_utû
 
	gbasic_fûãr_utû
 = {

143 .
id
 = "basic",

144 .
	g∑r£_f›t
 = 
basic_∑r£_›t
,

145 .
	g¥öt_f›t
 = 
basic_¥öt_›t
,

	@f_fw.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<löux/if.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ... fw [ classid CLASSID ] [Öolice POLICE_SPEC ]\n");

29 
	`Ârötf
(
°dîr
, " POLICE_SPEC := ...Üookát TBF\n");

30 
	`Ârötf
(
°dîr
, " CLASSID := X:Y\n");

31 
	}
}

33 
	#ußge
(Ë(-1)

	)

35 
	$fw_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

37 
tc_pﬁi˚
 
ç
;

38 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

39 
π©å
 *
èû
;

41 
	`mem£t
(&
ç
, 0, (tp));

43 i‡(
h™dÀ
) {

44 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

45 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

50 i‡(
¨gc
 == 0)

53 
èû
 = 
	`NLMSG_TAIL
(
n
);

54 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

56 
¨gc
 > 0) {

57 i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

58 
	`m©ches
(*
¨gv
, "flowid") == 0) {

59 
h™dÀ
;

60 
	`NEXT_ARG
();

61 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

62 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

65 
	`add©å_l
(
n
, 4096, 
TCA_FW_CLASSID
, &
h™dÀ
, 4);

66 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_FW_POLICE
, 
n
)) {

69 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

73 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

74 
	`NEXT_ARG
();

75 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_FW_ACT
, 
n
)) {

76 
	`Ârötf
(
°dîr
, "Illegal fw \"action\"\n");

80 } i‡(
	`°rcmp
(*
¨gv
, "indev") == 0) {

81 
d
[
IFNAMSIZ
+1];

82 
	`mem£t
(
d
, 0,  (d));

83 
¨gc
--;

84 
¨gv
++;

85 i‡(
¨gc
 < 1) {

86 
	`Ârötf
(
°dîr
, "Illegal indev\n");

89 
	`°∫˝y
(
d
, *
¨gv
,  (d) - 1);

90 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_FW_INDEV
, 
d
, 
	`°æí
(d) + 1);

91 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

92 
	`ex∂aö
();

95 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

96 
	`ex∂aö
();

99 
¨gc
--; 
¨gv
++;

101 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

103 
	}
}

105 
	$fw_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

107 
π©å
 *
tb
[
TCA_FW_MAX
+1];

109 i‡(
›t
 =
NULL
)

112 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_FW_MAX
, 
›t
);

114 i‡(
h™dÀ
)

115 
	`Ârötf
(
f
, "h™dÀ 0x%x ", 
h™dÀ
);

117 i‡(
tb
[
TCA_FW_CLASSID
]) {

118 
	`SPRINT_BUF
(
b1
);

119 
	`Ârötf
(
f
, "˛assid %†", 
	`•röt_tc_˛assid
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_FW_CLASSID
]), 
b1
));

122 i‡(
tb
[
TCA_FW_POLICE
])

123 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_FW_POLICE
]);

124 i‡(
tb
[
TCA_FW_INDEV
]) {

125 
π©å
 *
idev
 = 
tb
[
TCA_FW_INDEV
];

126 
	`Ârötf
(
f
, "öpuàdev %†",(*)
	`RTA_DATA
(
idev
));

129 i‡(
tb
[
TCA_FW_ACT
]) {

130 
	`Ârötf
(
f
, "\n");

131 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_FW_ACT
]);

134 
	}
}

136 
fûãr_utû
 
	gfw_fûãr_utû
 = {

137 .
id
 = "fw",

138 .
	g∑r£_f›t
 = 
fw_∑r£_›t
,

139 .
	g¥öt_f›t
 = 
fw_¥öt_›t
,

	@f_route.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"π_«mes.h
"

25 
	~"tc_comm⁄.h
"

26 
	~"tc_utû.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ...Ñoute [ from REALM | fromif TAG ] [Åo REALM ]\n");

31 
	`Ârötf
(
°dîr
, " [ flowid CLASSID ] [Öolice POLICE_SPEC ]\n");

32 
	`Ârötf
(
°dîr
, " POLICE_SPEC := ...Üookát TBF\n");

33 
	`Ârötf
(
°dîr
, " CLASSID := X:Y\n");

34 
	}
}

36 
	#ußge
(Ë(-1)

	)

38 
	$rouã_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

40 
tc_pﬁi˚
 
ç
;

41 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

42 
π©å
 *
èû
;

43 
__u32
 
fh
 = 0xFFFF8000;

44 
__u32
 
‹dî
 = 0;

46 
	`mem£t
(&
ç
, 0, (tp));

48 i‡(
h™dÀ
) {

49 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

50 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

55 i‡(
¨gc
 == 0)

58 
èû
 = 
	`NLMSG_TAIL
(
n
);

59 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

61 
¨gc
 > 0) {

62 i‡(
	`m©ches
(*
¨gv
, "to") == 0) {

63 
__u32
 
id
;

64 
	`NEXT_ARG
();

65 i‡(
	`π∆_πªÆm_a2n
(&
id
, *
¨gv
)) {

66 
	`Ârötf
(
°dîr
, "Illegal \"to\"\n");

69 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_TO
, &
id
, 4);

70 
fh
 &= ~0x80FF;

71 
fh
 |
id
&0xFF;

72 } i‡(
	`m©ches
(*
¨gv
, "from") == 0) {

73 
__u32
 
id
;

74 
	`NEXT_ARG
();

75 i‡(
	`π∆_πªÆm_a2n
(&
id
, *
¨gv
)) {

76 
	`Ârötf
(
°dîr
, "Illegal \"from\"\n");

79 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_FROM
, &
id
, 4);

80 
fh
 &= 0xFFFF;

81 
fh
 |
id
<<16;

82 } i‡(
	`m©ches
(*
¨gv
, "fromif") == 0) {

83 
__u32
 
id
;

84 
	`NEXT_ARG
();

85 
	`Œ_öô_m≠
(&
πh
);

86 i‡((
id
=
	`Œ_«me_to_ödex
(*
¨gv
)) <= 0) {

87 
	`Ârötf
(
°dîr
, "Illegal \"fromif\"\n");

90 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_IIF
, &
id
, 4);

91 
fh
 &= 0xFFFF;

92 
fh
 |(0x8000|
id
)<<16;

93 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

94 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

95 
h™dÀ
;

96 
	`NEXT_ARG
();

97 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

98 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

101 
	`add©å_l
(
n
, 4096, 
TCA_ROUTE4_CLASSID
, &
h™dÀ
, 4);

102 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

103 
	`NEXT_ARG
();

104 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_ROUTE4_POLICE
, 
n
)) {

105 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

109 } i‡(
	`m©ches
(*
¨gv
, "order") == 0) {

110 
	`NEXT_ARG
();

111 i‡(
	`gë_u32
(&
‹dî
, *
¨gv
, 0)) {

112 
	`Ârötf
(
°dîr
, "Illegal \"order\"\n");

115 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

116 
	`ex∂aö
();

119 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

120 
	`ex∂aö
();

123 
¨gc
--; 
¨gv
++;

125 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

126 i‡(
‹dî
) {

127 
fh
 &= ~0x7F00;

128 
fh
 |(
‹dî
<<8)&0x7F00;

130 i‡(!
t
->
tcm_h™dÀ
)

131 
t
->
tcm_h™dÀ
 = 
fh
;

133 
	}
}

135 
	$rouã_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

137 
π©å
 *
tb
[
TCA_ROUTE4_MAX
+1];

138 
	`SPRINT_BUF
(
b1
);

140 i‡(
›t
 =
NULL
)

143 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ROUTE4_MAX
, 
›t
);

145 i‡(
h™dÀ
)

146 
	`Ârötf
(
f
, "fh 0x%08x ", 
h™dÀ
);

147 i‡(
h™dÀ
&0x7F00)

148 
	`Ârötf
(
f
, "‹dî %d ", (
h™dÀ
>>8)&0x7F);

150 i‡(
tb
[
TCA_ROUTE4_CLASSID
]) {

151 
	`SPRINT_BUF
(
b1
);

152 
	`Ârötf
(
f
, "Êowid %†", 
	`•röt_tc_˛assid
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_ROUTE4_CLASSID
]), 
b1
));

154 i‡(
tb
[
TCA_ROUTE4_TO
])

155 
	`Ârötf
(
f
, "tÿ%†", 
	`π∆_πªÆm_n2a
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_ROUTE4_TO
]), 
b1
, (b1)));

156 i‡(
tb
[
TCA_ROUTE4_FROM
])

157 
	`Ârötf
(
f
, "‰om %†", 
	`π∆_πªÆm_n2a
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_ROUTE4_FROM
]), 
b1
, (b1)));

158 i‡(
tb
[
TCA_ROUTE4_IIF
])

159 
	`Ârötf
(
f
, "‰omi‡%s", 
	`Œ_ödex_to_«me
(*(*)
	`RTA_DATA
(
tb
[
TCA_ROUTE4_IIF
])));

160 i‡(
tb
[
TCA_ROUTE4_POLICE
])

161 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_ROUTE4_POLICE
]);

163 
	}
}

165 
fûãr_utû
 
	grouã_fûãr_utû
 = {

166 .
id
 = "route",

167 .
	g∑r£_f›t
 = 
rouã_∑r£_›t
,

168 .
	g¥öt_f›t
 = 
rouã_¥öt_›t
,

	@f_rsvp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

27 
	$ex∂aö
()

29 
	`Ârötf
(
°dîr
, "Usage: ...Ñsvp ipproto PROTOCOL session DST[/PORT | GPI ]\n");

30 
	`Ârötf
(
°dîr
, " [ sender SRC[/PORT | GPI ]\n");

31 
	`Ârötf
(
°dîr
, " [ classid CLASSID ] [Öolice POLICE_SPEC ]\n");

32 
	`Ârötf
(
°dîr
, " [Åunnelid ID ] [Åunnel ID skip NUMBER ]\n");

33 
	`Ârötf
(
°dîr
, "Where: GPI := { flowlabel NUMBER | spi/ah SPI | spi/esp SPI |\n");

34 
	`Ârötf
(
°dîr
, " u{8|16|32} NUMBER mask MASKát OFFSET}\n");

35 
	`Ârötf
(
°dîr
, " POLICE_SPEC := ...Üookát TBF\n");

36 
	`Ârötf
(
°dîr
, " FILTERID := X:Y\n");

37 
	}
}

39 
	#ußge
(Ë(-1)

	)

41 
	$gë_addr_™d_pi
(*
¨gc_p
, ***
¨gv_p
, 
öë_¥efix
 * 
addr
,

42 
tc_rsvp_pöfo
 *
pöfo
, 
dú
, 
Ámûy
)

44 
¨gc
 = *
¨gc_p
;

45 **
¨gv
 = *
¨gv_p
;

46 *
p
 = 
	`°rchr
(*
¨gv
, '/');

47 
tc_rsvp_gpi
 *
pi
 = 
dú
 ? &
pöfo
->
dpi
 : &pöfo->
•i
;

49 i‡(
p
) {

50 
__u16
 
tmp
;

52 i‡(
	`gë_u16
(&
tmp
, 
p
+1, 0))

55 i‡(
dú
 == 0) {

57 
pi
->
key
 = 
	`ht⁄l
(((
__u32
)
tmp
)<<16);

58 
pi
->
mask
 = 
	`ht⁄l
(0xFFFF0000);

61 
pi
->
key
 = 
	`ht⁄l
(((
__u32
)
tmp
));

62 
pi
->
mask
 = 
	`ht⁄l
(0x0000FFFF);

64 
pi
->
off£t
 = 0;

65 *
p
 = 0;

67 i‡(
	`gë_addr_1
(
addr
, *
¨gv
, 
Ámûy
))

69 i‡(
p
)

70 *
p
 = '/';

72 
¨gc
--; 
¨gv
++;

74 i‡(
pi
->
mask
 || 
¨gc
 <= 0)

75 
d⁄e
;

77 i‡(
	`°rcmp
(*
¨gv
, "spi/ah") == 0 ||

78 
	`°rcmp
(*
¨gv
, "gpi/ah") == 0) {

79 
__u32
 
gpi
;

80 
	`NEXT_ARG
();

81 i‡(
	`gë_u32
(&
gpi
, *
¨gv
, 0))

83 
pi
->
mask
 = 
	`ht⁄l
(0xFFFFFFFF);

84 
pi
->
key
 = 
	`ht⁄l
(
gpi
);

85 
pi
->
off£t
 = 4;

86 i‡(
pöfo
->
¥Ÿocﬁ
 == 0)

87 
pöfo
->
¥Ÿocﬁ
 = 
IPPROTO_AH
;

88 
¨gc
--; 
¨gv
++;

89 } i‡(
	`°rcmp
(*
¨gv
, "spi/esp") == 0 ||

90 
	`°rcmp
(*
¨gv
, "gpi/esp") == 0) {

91 
__u32
 
gpi
;

92 
	`NEXT_ARG
();

93 i‡(
	`gë_u32
(&
gpi
, *
¨gv
, 0))

95 
pi
->
mask
 = 
	`ht⁄l
(0xFFFFFFFF);

96 
pi
->
key
 = 
	`ht⁄l
(
gpi
);

97 
pi
->
off£t
 = 0;

98 i‡(
pöfo
->
¥Ÿocﬁ
 == 0)

99 
pöfo
->
¥Ÿocﬁ
 = 
IPPROTO_ESP
;

100 
¨gc
--; 
¨gv
++;

101 } i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0) {

102 
__u32
 
Êabñ
;

103 
	`NEXT_ARG
();

104 i‡(
	`gë_u32
(&
Êabñ
, *
¨gv
, 0))

106 i‡(
Ámûy
 !
AF_INET6
)

108 
pi
->
mask
 = 
	`ht⁄l
(0x000FFFFF);

109 
pi
->
key
 = 
	`ht⁄l
(
Êabñ
Ë&Öi->
mask
;

110 
pi
->
off£t
 = -40;

111 
¨gc
--; 
¨gv
++;

112 } i‡(
	`°rcmp
(*
¨gv
, "u32") == 0 ||

113 
	`°rcmp
(*
¨gv
, "u16") == 0 ||

114 
	`°rcmp
(*
¨gv
, "u8") == 0) {

115 
sz
 = 1;

116 
__u32
 
tmp
;

117 
__u32
 
mask
 = 0xff;

118 i‡(
	`°rcmp
(*
¨gv
, "u32") == 0) {

119 
sz
 = 4;

120 
mask
 = 0xffff;

121 } i‡(
	`°rcmp
(*
¨gv
, "u16") == 0) {

122 
mask
 = 0xffffffff;

123 
sz
 = 2;

125 
	`NEXT_ARG
();

126 i‡(
	`gë_u32
(&
tmp
, *
¨gv
, 0))

128 
¨gc
--; 
¨gv
++;

129 i‡(
	`°rcmp
(*
¨gv
, "mask") == 0) {

130 
	`NEXT_ARG
();

131 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

133 
¨gc
--; 
¨gv
++;

135 i‡(
	`°rcmp
(*
¨gv
, "at") == 0) {

136 
	`NEXT_ARG
();

137 i‡(
	`gë_öãgî
(&
pi
->
off£t
, *
¨gv
, 0))

139 
¨gc
--; 
¨gv
++;

141 i‡(
sz
 == 1) {

142 i‡((
pi
->
off£t
 & 3) == 0) {

143 
mask
 <<= 24;

144 
tmp
 <<= 24;

145 } i‡((
pi
->
off£t
 & 3) == 1) {

146 
mask
 <<= 16;

147 
tmp
 <<= 16;

148 } i‡((
pi
->
off£t
 & 3) == 3) {

149 
mask
 <<= 8;

150 
tmp
 <<= 8;

152 } i‡(
sz
 == 2) {

153 i‡((
pi
->
off£t
 & 3) == 0) {

154 
mask
 <<= 16;

155 
tmp
 <<= 16;

158 
pi
->
off£t
 &= ~3;

159 
pi
->
mask
 = 
	`ht⁄l
(mask);

160 
pi
->
key
 = 
	`ht⁄l
(
tmp
Ë&Öi->
mask
;

163 
d⁄e
:

164 *
¨gc_p
 = 
¨gc
;

165 *
¨gv_p
 = 
¨gv
;

167 
	}
}

170 
	$rsvp_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

172 
Ámûy
 = 
	`°rcmp
(
qu
->
id
, "rsvp"Ë=0 ? 
AF_INET
 : 
AF_INET6
;

173 
tc_rsvp_pöfo
 
pöfo
;

174 
tc_pﬁi˚
 
ç
;

175 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

176 
pöfo_ok
 = 0;

177 
π©å
 *
èû
;

179 
	`mem£t
(&
pöfo
, 0, (pinfo));

180 
	`mem£t
(&
ç
, 0, (tp));

182 i‡(
h™dÀ
) {

183 i‡(
	`gë_u32
(&
t
->
tcm_h™dÀ
, 
h™dÀ
, 0)) {

184 
	`Ârötf
(
°dîr
, "Illegal \"handle\"\n");

189 i‡(
¨gc
 == 0)

192 
èû
 = 
	`NLMSG_TAIL
(
n
);

193 
	`add©å_l
(
n
, 4096, 
TCA_OPTIONS
, 
NULL
, 0);

195 
¨gc
 > 0) {

196 i‡(
	`m©ches
(*
¨gv
, "session") == 0) {

197 
öë_¥efix
 
addr
;

198 
	`NEXT_ARG
();

199 i‡(
	`gë_addr_™d_pi
(&
¨gc
, &
¨gv
, &
addr
, &
pöfo
, 1, 
Ámûy
)) {

200 
	`Ârötf
(
°dîr
, "Illegal \"session\"\n");

203 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_DST
, &
addr
.
d©a
,áddr.
byãÀn
);

204 i‡(
pöfo
.
dpi
.
mask
 ||Ööfo.
¥Ÿocﬁ
)

205 
pöfo_ok
++;

207 } i‡(
	`m©ches
(*
¨gv
, "sender") == 0 ||

208 
	`m©ches
(*
¨gv
, "flowspec") == 0) {

209 
öë_¥efix
 
addr
;

210 
	`NEXT_ARG
();

211 i‡(
	`gë_addr_™d_pi
(&
¨gc
, &
¨gv
, &
addr
, &
pöfo
, 0, 
Ámûy
)) {

212 
	`Ârötf
(
°dîr
, "Illegal \"sender\"\n");

215 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_SRC
, &
addr
.
d©a
,áddr.
byãÀn
);

216 i‡(
pöfo
.
•i
.
mask
 ||Ööfo.
¥Ÿocﬁ
)

217 
pöfo_ok
++;

219 } i‡(
	`m©ches
("ù¥Ÿo", *
¨gv
) == 0) {

220 
num
;

221 
	`NEXT_ARG
();

222 
num
 = 
	`öë_¥Ÿo_a2n
(*
¨gv
);

223 i‡(
num
 < 0) {

224 
	`Ârötf
(
°dîr
, "Illegal \"ipproto\"\n");

227 
pöfo
.
¥Ÿocﬁ
 = 
num
;

228 
pöfo_ok
++;

229 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

230 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

231 
h™dÀ
;

232 
	`NEXT_ARG
();

233 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

234 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

237 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_CLASSID
, &
h™dÀ
, 4);

238 } i‡(
	`°rcmp
(*
¨gv
, "tunnelid") == 0) {

239 
tid
;

240 
	`NEXT_ARG
();

241 i‡(
	`gë_unsig√d
(&
tid
, *
¨gv
, 0)) {

242 
	`Ârötf
(
°dîr
, "Illegal \"tunnelid\"\n");

245 
pöfo
.
tu¬ñid
 = 
tid
;

246 
pöfo_ok
++;

247 } i‡(
	`°rcmp
(*
¨gv
, "tunnel") == 0) {

248 
tid
;

249 
	`NEXT_ARG
();

250 i‡(
	`gë_unsig√d
(&
tid
, *
¨gv
, 0)) {

251 
	`Ârötf
(
°dîr
, "Illegal \"tunnel\"\n");

254 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_CLASSID
, &
tid
, 4);

255 
	`NEXT_ARG
();

256 i‡(
	`°rcmp
(*
¨gv
, "skip") == 0) {

257 
	`NEXT_ARG
();

259 i‡(
	`gë_unsig√d
(&
tid
, *
¨gv
, 0)) {

260 
	`Ârötf
(
°dîr
, "Illegal \"skip\"\n");

263 
pöfo
.
tu¬ñhdr
 = 
tid
;

264 
pöfo_ok
++;

265 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

266 
	`NEXT_ARG
();

267 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_RSVP_POLICE
, 
n
)) {

268 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

272 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

273 
	`ex∂aö
();

276 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

277 
	`ex∂aö
();

280 
¨gc
--; 
¨gv
++;

283 i‡(
pöfo_ok
)

284 
	`add©å_l
(
n
, 4096, 
TCA_RSVP_PINFO
, &
pöfo
, (pinfo));

285 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

287 
	}
}

289 * 
	$•röt_•i
(
tc_rsvp_gpi
 *
pi
, 
dú
, *
buf
)

291 i‡(
pi
->
off£t
 == 0) {

292 i‡(
dú
 && 
pi
->
mask
 =
	`ht⁄l
(0xFFFF)) {

293 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, "/%d", 
	`ht⁄l
(
pi
->
key
));

294  
buf
;

296 i‡(!
dú
 && 
pi
->
mask
 =
	`ht⁄l
(0xFFFF0000)) {

297 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, "/%d", 
	`ht⁄l
(
pi
->
key
)>>16);

298  
buf
;

300 i‡(
pi
->
mask
 =
	`ht⁄l
(0xFFFFFFFF)) {

301 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " spi/e• 0x%08x", 
	`ht⁄l
(
pi
->
key
));

302  
buf
;

304 } i‡(
pi
->
off£t
 =4 &&Öi->
mask
 =
	`ht⁄l
(0xFFFFFFFF)) {

305 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " spi/ah 0x%08x", 
	`ht⁄l
(
pi
->
key
));

306  
buf
;

307 } i‡(
pi
->
off£t
 =-40 &&Öi->
mask
 =
	`ht⁄l
(0x000FFFFF)) {

308 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " flowœbñ 0x%05x", 
	`ht⁄l
(
pi
->
key
));

309  
buf
;

311 
	`¢¥ötf
(
buf
, 
SPRINT_BSIZE
-1, " u32 0x%08x mask %08xát %d",

312 
	`ht⁄l
(
pi
->
key
), ht⁄l’i->
mask
),Öi->
off£t
);

313  
buf
;

314 
	}
}

316 
	$rsvp_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

318 
Ámûy
 = 
	`°rcmp
(
qu
->
id
, "rsvp"Ë=0 ? 
AF_INET
 : 
AF_INET6
;

319 
π©å
 *
tb
[
TCA_RSVP_MAX
+1];

320 
tc_rsvp_pöfo
 *
pöfo
 = 
NULL
;

322 i‡(
›t
 =
NULL
)

325 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_RSVP_MAX
, 
›t
);

327 i‡(
h™dÀ
)

328 
	`Ârötf
(
f
, "fh 0x%08x ", 
h™dÀ
);

330 i‡(
tb
[
TCA_RSVP_PINFO
]) {

331 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_RSVP_PINFO
]Ë< (*
pöfo
))

334 
pöfo
 = 
	`RTA_DATA
(
tb
[
TCA_RSVP_PINFO
]);

337 i‡(
tb
[
TCA_RSVP_CLASSID
]) {

338 
	`SPRINT_BUF
(
b1
);

339 i‡(!
pöfo
 ||Ööfo->
tu¬ñhdr
 == 0)

340 
	`Ârötf
(
f
, "Êowid %†", 
	`•röt_tc_˛assid
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_RSVP_CLASSID
]), 
b1
));

342 
	`Ârötf
(
f
, "tu¬ñ %d skù %d ", *(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_RSVP_CLASSID
]), 
pöfo
->
tu¬ñhdr
);

343 } i‡(
pöfo
 &&Ööfo->
tu¬ñhdr
)

344 
	`Ârötf
(
f
, "tu¬ñ [BAD] skù %d ", 
pöfo
->
tu¬ñhdr
);

346 i‡(
tb
[
TCA_RSVP_DST
]) {

347 
buf
[128];

348 
	`Ârötf
(
f
, "session ");

349 i‡(
	`öë_¡›
(
Ámûy
, 
	`RTA_DATA
(
tb
[
TCA_RSVP_DST
]), 
buf
, (buf)) == 0)

350 
	`Ârötf
(
f
, " [INVALID DADDR] ");

352 
	`Ârötf
(
f
, "%s", 
buf
);

353 i‡(
pöfo
 &&Ööfo->
dpi
.
mask
) {

354 
	`SPRINT_BUF
(
b2
);

355 
	`Ârötf
(
f
, "%†", 
	`•röt_•i
(&
pöfo
->
dpi
, 1, 
b2
));

357 
	`Ârötf
(
f
, " ");

359 i‡(
pöfo
 &&Ööfo->
dpi
.
mask
) {

360 
	`SPRINT_BUF
(
b2
);

361 
	`Ârötf
(
f
, "£ssi⁄ [NONE]%†", 
	`•röt_•i
(&
pöfo
->
dpi
, 1, 
b2
));

363 
	`Ârötf
(
f
, "session NONE ");

366 i‡(
pöfo
 &&Ööfo->
¥Ÿocﬁ
) {

367 
	`SPRINT_BUF
(
b1
);

368 
	`Ârötf
(
f
, "ù¥Ÿÿ%†", 
	`öë_¥Ÿo_n2a
(
pöfo
->
¥Ÿocﬁ
, 
b1
, (b1)));

370 i‡(
pöfo
 &&Ööfo->
tu¬ñid
)

371 
	`Ârötf
(
f
, "tu¬ñid %d ", 
pöfo
->
tu¬ñid
);

372 i‡(
tb
[
TCA_RSVP_SRC
]) {

373 
buf
[128];

374 
	`Ârötf
(
f
, "sender ");

375 i‡(
	`öë_¡›
(
Ámûy
, 
	`RTA_DATA
(
tb
[
TCA_RSVP_SRC
]), 
buf
, (buf)) == 0) {

376 
	`Ârötf
(
f
, "[BAD]");

378 
	`Ârötf
(
f
, " %s", 
buf
);

380 i‡(
pöfo
 &&Ööfo->
•i
.
mask
) {

381 
	`SPRINT_BUF
(
b2
);

382 
	`Ârötf
(
f
, "%†", 
	`•röt_•i
(&
pöfo
->
•i
, 0, 
b2
));

384 
	`Ârötf
(
f
, " ");

385 } i‡(
pöfo
 &&Ööfo->
•i
.
mask
) {

386 
	`SPRINT_BUF
(
b2
);

387 
	`Ârötf
(
f
, "£ndî [NONE]%†", 
	`•röt_•i
(&
pöfo
->
•i
, 0, 
b2
));

389 i‡(
tb
[
TCA_RSVP_POLICE
])

390 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_RSVP_POLICE
]);

392 
	}
}

394 
fûãr_utû
 
	grsvp_fûãr_utû
 = {

395 .
id
 = "rsvp",

396 .
	g∑r£_f›t
 = 
rsvp_∑r£_›t
,

397 .
	g¥öt_f›t
 = 
rsvp_¥öt_›t
,

400 
fûãr_utû
 
	grsvp6_fûãr_utû
 = {

401 .
id
 = "rsvp6",

402 .
	g∑r£_f›t
 = 
rsvp_∑r£_›t
,

403 .
	g¥öt_f›t
 = 
rsvp_¥öt_›t
,

	@f_tcindex.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sy¶og.h
>

11 
	~<f˙é.h
>

12 
	~<°rög.h
>

13 
	~<√töë/ö.h
>

15 
	~"utûs.h
"

16 
	~"tc_utû.h
"

18 
	$ex∂aö
()

20 
	`Ârötf
(
°dîr
," Usage: ...Åcindex [ hash SIZE ] [ mask MASK ]"

22 
	`Ârötf
(
°dîr
," [Öass_on | fall_through ]\n");

23 
	`Ârötf
(
°dîr
," [ classid CLASSID ] "

25 
	}
}

28 
	#ußge
(Ë(-1)

	)

31 
	$tcödex_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
,

32 **
¨gv
, 
∆msghdr
 *
n
)

34 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

35 
π©å
 *
èû
;

36 *
íd
;

38 i‡(
h™dÀ
) {

39 
t
->
tcm_h™dÀ
 = 
	`°πoul
(
h™dÀ
,&
íd
,0);

40 i‡(*
íd
) {

41 
	`Ârötf
(
°dîr
, "Illegal filter ID\n");

45 i‡(!
¨gc
)  0;

46 
èû
 = 
	`NLMSG_TAIL
(
n
);

47 
	`add©å_l
(
n
,4096,
TCA_OPTIONS
,
NULL
,0);

48 
¨gc
) {

49 i‡(!
	`°rcmp
(*
¨gv
,"hash")) {

50 
hash
;

52 
	`NEXT_ARG
();

53 
hash
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

54 i‡(*
íd
 || !
hash
 || hash > 0x10000) {

55 
	`ex∂aö
();

58 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_HASH
,&
hash
,(hash));

60 i‡(!
	`°rcmp
(*
¨gv
,"mask")) {

61 
__u16
 
mask
;

63 
	`NEXT_ARG
();

64 
mask
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

65 i‡(*
íd
) {

66 
	`ex∂aö
();

69 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_MASK
,&
mask
,(mask));

71 i‡(!
	`°rcmp
(*
¨gv
,"shift")) {

72 
shi·
;

74 
	`NEXT_ARG
();

75 
shi·
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

76 i‡(*
íd
) {

77 
	`ex∂aö
();

80 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_SHIFT
,&
shi·
,

81 (
shi·
));

83 i‡(!
	`°rcmp
(*
¨gv
,"fall_through")) {

84 
vÆue
 = 1;

86 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_FALL_THROUGH
,&
vÆue
,

87 (
vÆue
));

89 i‡(!
	`°rcmp
(*
¨gv
,"pass_on")) {

90 
vÆue
 = 0;

92 
	`add©å_l
(
n
,4096,
TCA_TCINDEX_FALL_THROUGH
,&
vÆue
,

93 (
vÆue
));

95 i‡(!
	`°rcmp
(*
¨gv
,"classid")) {

96 
__u32
 
h™dÀ
;

98 
	`NEXT_ARG
();

99 i‡(
	`gë_tc_˛assid
(&
h™dÀ
,*
¨gv
)) {

100 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

103 
	`add©å_l
(
n
, 4096, 
TCA_TCINDEX_CLASSID
, &
h™dÀ
, 4);

105 i‡(!
	`°rcmp
(*
¨gv
,"police")) {

106 
	`NEXT_ARG
();

107 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_TCINDEX_POLICE
, 
n
)) {

108 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

114 
	`ex∂aö
();

117 
¨gc
--;

118 
¨gv
++;

120 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

122 
	}
}

125 
	$tcödex_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
,

126 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

128 
π©å
 *
tb
[
TCA_TCINDEX_MAX
+1];

130 i‡(
›t
 =
NULL
)

133 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_TCINDEX_MAX
, 
›t
);

135 i‡(
h™dÀ
 !~0Ë
	`Ârötf
(
f
,"handle 0x%04x ",handle);

136 i‡(
tb
[
TCA_TCINDEX_HASH
]) {

137 
__u16
 
hash
;

139 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_HASH
]Ë< (
hash
))

141 
hash
 = *(
__u16
 *Ë
	`RTA_DATA
(
tb
[
TCA_TCINDEX_HASH
]);

142 
	`Ârötf
(
f
,"hash %d ",
hash
);

144 i‡(
tb
[
TCA_TCINDEX_MASK
]) {

145 
__u16
 
mask
;

147 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_MASK
]Ë< (
mask
))

149 
mask
 = *(
__u16
 *Ë
	`RTA_DATA
(
tb
[
TCA_TCINDEX_MASK
]);

150 
	`Ârötf
(
f
,"mask 0x%04x ",
mask
);

152 i‡(
tb
[
TCA_TCINDEX_SHIFT
]) {

153 
shi·
;

155 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_SHIFT
]Ë< (
shi·
))

157 
shi·
 = *(*Ë
	`RTA_DATA
(
tb
[
TCA_TCINDEX_SHIFT
]);

158 
	`Ârötf
(
f
,"shi· %d ",
shi·
);

160 i‡(
tb
[
TCA_TCINDEX_FALL_THROUGH
]) {

161 
ÁŒ_through
;

163 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TCINDEX_FALL_THROUGH
]) <

164 (
ÁŒ_through
))

166 
ÁŒ_through
 = *(*Ë
	`RTA_DATA
(
tb
[
TCA_TCINDEX_FALL_THROUGH
]);

167 
	`Ârötf
(
f
,
ÁŒ_through
 ? "fall_through " : "pass_on ");

169 i‡(
tb
[
TCA_TCINDEX_CLASSID
]) {

170 
	`SPRINT_BUF
(
b1
);

171 
	`Ârötf
(
f
, "˛assid %†",
	`•röt_tc_˛assid
(*(
__u32
 *)

172 
	`RTA_DATA
(
tb
[
TCA_TCINDEX_CLASSID
]), 
b1
));

174 i‡(
tb
[
TCA_TCINDEX_POLICE
]) {

175 
	`Ârötf
(
f
, "\n");

176 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_TCINDEX_POLICE
]);

179 
	}
}

181 
fûãr_utû
 
	gtcödex_fûãr_utû
 = {

182 .
id
 = "tcindex",

183 .
	g∑r£_f›t
 = 
tcödex_∑r£_›t
,

184 .
	g¥öt_f›t
 = 
tcödex_¥öt_›t
,

	@f_u32.c

14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<uni°d.h
>

17 
	~<sy¶og.h
>

18 
	~<f˙é.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

23 
	~<löux/if.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ... u32 [ match SELECTOR ... ] [Üink HTID ] [ classid CLASSID ]\n");

31 
	`Ârötf
(
°dîr
, " [Öolice POLICE_SPEC ] [ offset OFFSET_SPEC ]\n");

32 
	`Ârötf
(
°dîr
, " [ ht HTID ] [ hashkey HASHKEY_SPEC ]\n");

33 
	`Ârötf
(
°dîr
, " [ sample SAMPLE ]\n");

34 
	`Ârötf
(
°dîr
, "or u32 divisor DIVISOR\n");

35 
	`Ârötf
(
°dîr
, "\n");

36 
	`Ârötf
(
°dîr
, "Where: SELECTOR := SAMPLE SAMPLE ...\n");

37 
	`Ârötf
(
°dîr
, " SAMPLE := { ip | ip6 | udp |Åcp | icmp | u{32|16|8} | mark } SAMPLE_ARGS [divisor DIVISOR]\n");

38 
	`Ârötf
(
°dîr
, " FILTERID := X:Y:Z\n");

39 
	}
}

41 
	#ußge
(Ë(-1)

	)

43 
	$gë_u32_h™dÀ
(
__u32
 *
h™dÀ
, *
°r
)

45 
__u32
 
htid
=0, 
hash
=0, 
nodeid
=0;

46 *
tmp
 = 
	`°rchr
(
°r
, ':');

48 i‡(
tmp
 =
NULL
) {

49 i‡(
	`memcmp
("0x", 
°r
, 2) == 0)

50  
	`gë_u32
(
h™dÀ
, 
°r
, 16);

53 
htid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

54 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

56 i‡(
htid
>=0x1000)

58 i‡(*
tmp
) {

59 
°r
 = 
tmp
+1;

60 
hash
 = 
	`°πoul
(
°r
, &
tmp
, 16);

61 i‡(
tmp
 =
°r
 && *str != ':' && *str != 0)

63 i‡(
hash
>=0x100)

65 i‡(*
tmp
) {

66 
°r
 = 
tmp
+1;

67 
nodeid
 = 
	`°πoul
(
°r
, &
tmp
, 16);

68 i‡(
tmp
 =
°r
 && *str != 0)

70 i‡(
nodeid
>=0x1000)

74 *
h™dÀ
 = (
htid
<<20)|(
hash
<<12)|
nodeid
;

76 
	}
}

78 * 
	$•röt_u32_h™dÀ
(
__u32
 
h™dÀ
, *
buf
)

80 
bsize
 = 
SPRINT_BSIZE
-1;

81 
__u32
 
htid
 = 
	`TC_U32_HTID
(
h™dÀ
);

82 
__u32
 
hash
 = 
	`TC_U32_HASH
(
h™dÀ
);

83 
__u32
 
nodeid
 = 
	`TC_U32_NODE
(
h™dÀ
);

84 *
b
 = 
buf
;

86 i‡(
h™dÀ
 == 0) {

87 
	`¢¥ötf
(
b
, 
bsize
, "none");

88  
b
;

90 i‡(
htid
) {

91 
l
 = 
	`¢¥ötf
(
b
, 
bsize
, "%x:", 
htid
>>20);

92 
bsize
 -
l
;

93 
b
 +
l
;

95 i‡(
nodeid
|
hash
) {

96 i‡(
hash
) {

97 
l
 = 
	`¢¥ötf
(
b
, 
bsize
, "%x", 
hash
);

98 
bsize
 -
l
;

99 
b
 +
l
;

101 i‡(
nodeid
) {

102 
l
 = 
	`¢¥ötf
(
b
, 
bsize
, ":%x", 
nodeid
);

103 
bsize
 -
l
;

104 
b
 +
l
;

107 i‡(
show_øw
)

108 
	`¢¥ötf
(
b
, 
bsize
, "[%08x] ", 
h™dÀ
);

109  
buf
;

110 
	}
}

112 
	$∑ck_key
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
, 
off
, 
offmask
)

114 
i
;

115 
hwm
 = 
£l
->
nkeys
;

117 
key
 &
mask
;

119 
i
=0; i<
hwm
; i++) {

120 i‡(
£l
->
keys
[
i
].
off
 =of‡&& sñ->keys[i].
offmask
 == offmask) {

121 
__u32
 
öãr£˘
 = 
mask
&
£l
->
keys
[
i
].mask;

123 i‡((
key
^
£l
->
keys
[
i
].
vÆ
Ë& 
öãr£˘
)

125 
£l
->
keys
[
i
].
vÆ
 |
key
;

126 
£l
->
keys
[
i
].
mask
 |= mask;

131 i‡(
hwm
 >= 128)

133 i‡(
off
 % 4)

135 
£l
->
keys
[
hwm
].
vÆ
 = 
key
;

136 
£l
->
keys
[
hwm
].
mask
 = mask;

137 
£l
->
keys
[
hwm
].
off
 = off;

138 
£l
->
keys
[
hwm
].
offmask
 = offmask;

139 
£l
->
nkeys
++;

141 
	}
}

143 
	$∑ck_key32
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
, 
off
, 
offmask
)

145 
key
 = 
	`ht⁄l
(key);

146 
mask
 = 
	`ht⁄l
(mask);

147  
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

148 
	}
}

150 
	$∑ck_key16
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
, 
off
, 
offmask
)

152 i‡(
key
 > 0xFFFF || 
mask
 > 0xFFFF)

155 i‡((
off
 & 3) == 0) {

156 
key
 <<= 16;

157 
mask
 <<= 16;

159 
off
 &= ~3;

160 
key
 = 
	`ht⁄l
(key);

161 
mask
 = 
	`ht⁄l
(mask);

163  
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

164 
	}
}

166 
	$∑ck_key8
(
tc_u32_£l
 *
£l
, 
__u32
 
key
, __u32 
mask
, 
off
, 
offmask
)

168 i‡(
key
 > 0xFF || 
mask
 > 0xFF)

171 i‡((
off
 & 3) == 0) {

172 
key
 <<= 24;

173 
mask
 <<= 24;

174 } i‡((
off
 & 3) == 1) {

175 
key
 <<= 16;

176 
mask
 <<= 16;

177 } i‡((
off
 & 3) == 2) {

178 
key
 <<= 8;

179 
mask
 <<= 8;

181 
off
 &= ~3;

182 
key
 = 
	`ht⁄l
(key);

183 
mask
 = 
	`ht⁄l
(mask);

185  
	`∑ck_key
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

186 
	}
}

189 
	$∑r£_©
(*
¨gc_p
, ***
¨gv_p
, *
off
, *
offmask
)

191 
¨gc
 = *
¨gc_p
;

192 **
¨gv
 = *
¨gv_p
;

193 *
p
 = *
¨gv
;

195 i‡(
¨gc
 <= 0)

198 i‡(
	`°æí
(
p
) > strlen("nexthdr+") &&

199 
	`memcmp
(
p
, "√xthdr+", 
	`°æí
("nexthdr+")) == 0) {

200 *
offmask
 = -1;

201 
p
 +
	`°æí
("nexthdr+");

202 } i‡(
	`m©ches
(*
¨gv
, "nexthdr+") == 0) {

203 
	`NEXT_ARG
();

204 *
offmask
 = -1;

205 
p
 = *
¨gv
;

208 i‡(
	`gë_öãgî
(
off
, 
p
, 0))

210 
¨gc
--; 
¨gv
++;

212 *
¨gc_p
 = 
¨gc
;

213 *
¨gv_p
 = 
¨gv
;

215 
	}
}

218 
	$∑r£_u32
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
, 
off
, 
offmask
)

220 
ªs
 = -1;

221 
¨gc
 = *
¨gc_p
;

222 **
¨gv
 = *
¨gv_p
;

223 
__u32
 
key
;

224 
__u32
 
mask
;

226 i‡(
¨gc
 < 2)

229 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

231 
¨gc
--; 
¨gv
++;

233 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

235 
¨gc
--; 
¨gv
++;

237 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

238 
	`NEXT_ARG
();

239 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

243 
ªs
 = 
	`∑ck_key32
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

244 *
¨gc_p
 = 
¨gc
;

245 *
¨gv_p
 = 
¨gv
;

246  
ªs
;

247 
	}
}

249 
	$∑r£_u16
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
, 
off
, 
offmask
)

251 
ªs
 = -1;

252 
¨gc
 = *
¨gc_p
;

253 **
¨gv
 = *
¨gv_p
;

254 
__u32
 
key
;

255 
__u32
 
mask
;

257 i‡(
¨gc
 < 2)

260 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

262 
¨gc
--; 
¨gv
++;

264 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

266 
¨gc
--; 
¨gv
++;

268 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

269 
	`NEXT_ARG
();

270 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

273 
ªs
 = 
	`∑ck_key16
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

274 *
¨gc_p
 = 
¨gc
;

275 *
¨gv_p
 = 
¨gv
;

276  
ªs
;

277 
	}
}

279 
	$∑r£_u8
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
, 
off
, 
offmask
)

281 
ªs
 = -1;

282 
¨gc
 = *
¨gc_p
;

283 **
¨gv
 = *
¨gv_p
;

284 
__u32
 
key
;

285 
__u32
 
mask
;

287 i‡(
¨gc
 < 2)

290 i‡(
	`gë_u32
(&
key
, *
¨gv
, 0))

292 
¨gc
--; 
¨gv
++;

294 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

296 
¨gc
--; 
¨gv
++;

298 i‡(
key
 > 0xFF || 
mask
 > 0xFF)

301 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

302 
	`NEXT_ARG
();

303 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

307 
ªs
 = 
	`∑ck_key8
(
£l
, 
key
, 
mask
, 
off
, 
offmask
);

308 *
¨gc_p
 = 
¨gc
;

309 *
¨gv_p
 = 
¨gv
;

310  
ªs
;

311 
	}
}

313 
	$∑r£_ù_addr
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
, 
off
)

315 
ªs
 = -1;

316 
¨gc
 = *
¨gc_p
;

317 **
¨gv
 = *
¨gv_p
;

318 
öë_¥efix
 
addr
;

319 
__u32
 
mask
;

320 
offmask
 = 0;

322 i‡(
¨gc
 < 1)

325 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET
))

327 
¨gc
--; 
¨gv
++;

329 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

330 
	`NEXT_ARG
();

331 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

335 
mask
 = 0;

336 i‡(
addr
.
bôÀn
)

337 
mask
 = 
	`ht⁄l
(0xFFFFFFFF<<(32-
addr
.
bôÀn
));

338 i‡(
	`∑ck_key
(
£l
, 
addr
.
d©a
[0], 
mask
, 
off
, 
offmask
) < 0)

340 
ªs
 = 0;

342 *
¨gc_p
 = 
¨gc
;

343 *
¨gv_p
 = 
¨gv
;

344  
ªs
;

345 
	}
}

347 
	$∑r£_ù6_addr
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
, 
off
)

349 
ªs
 = -1;

350 
¨gc
 = *
¨gc_p
;

351 **
¨gv
 = *
¨gv_p
;

352 
∂í
 = 128;

353 
i
;

354 
öë_¥efix
 
addr
;

355 
offmask
 = 0;

357 i‡(
¨gc
 < 1)

360 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET6
))

362 
¨gc
--; 
¨gv
++;

364 i‡(
¨gc
 > 0 && 
	`°rcmp
(
¨gv
[0], "at") == 0) {

365 
	`NEXT_ARG
();

366 i‡(
	`∑r£_©
(&
¨gc
, &
¨gv
, &
off
, &
offmask
))

370 
∂í
 = 
addr
.
bôÀn
;

371 
i
=0; i<
∂í
; i+=32) {

373 i‡(((
i
+31))<=
∂í
) {

374 i‡((
ªs
 = 
	`∑ck_key
(
£l
, 
addr
.
d©a
[
i
/32], 0xFFFFFFFF, 
off
+4*(i/32), 
offmask
)) < 0)

376 } i‡(
i
<
∂í
) {

377 
__u32
 
mask
 = 
	`ht⁄l
(0xFFFFFFFF<<(32-(
∂í
-
i
)));

378 i‡((
ªs
 = 
	`∑ck_key
(
£l
, 
addr
.
d©a
[
i
/32], 
mask
, 
off
+4*(i/32), 
offmask
)) < 0)

382 
ªs
 = 0;

384 *
¨gc_p
 = 
¨gc
;

385 *
¨gv_p
 = 
¨gv
;

386  
ªs
;

387 
	}
}

389 
	$∑r£_ù
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

391 
ªs
 = -1;

392 
¨gc
 = *
¨gc_p
;

393 **
¨gv
 = *
¨gv_p
;

395 i‡(
¨gc
 < 2)

398 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

399 
	`NEXT_ARG
();

400 
ªs
 = 
	`∑r£_ù_addr
(&
¨gc
, &
¨gv
, 
£l
, 12);

401 
d⁄e
;

403 i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

404 
	`NEXT_ARG
();

405 
ªs
 = 
	`∑r£_ù_addr
(&
¨gc
, &
¨gv
, 
£l
, 16);

406 
d⁄e
;

408 i‡(
	`°rcmp
(*
¨gv
, "tos") == 0 ||

409 
	`m©ches
(*
¨gv
, "dsfield") == 0) {

410 
	`NEXT_ARG
();

411 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 1, 0);

412 
d⁄e
;

414 i‡(
	`°rcmp
(*
¨gv
, "ihl") == 0) {

415 
	`NEXT_ARG
();

416 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

417 
d⁄e
;

419 i‡(
	`°rcmp
(*
¨gv
, "protocol") == 0) {

420 
	`NEXT_ARG
();

421 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 9, 0);

422 
d⁄e
;

424 i‡(
	`m©ches
(*
¨gv
, "precedence") == 0) {

425 
	`NEXT_ARG
();

426 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 1, 0);

427 
d⁄e
;

429 i‡(
	`°rcmp
(*
¨gv
, "nofrag") == 0) {

430 
¨gc
--; 
¨gv
++;

431 
ªs
 = 
	`∑ck_key16
(
£l
, 0, 0x3FFF, 6, 0);

432 
d⁄e
;

434 i‡(
	`°rcmp
(*
¨gv
, "firstfrag") == 0) {

435 
¨gc
--; 
¨gv
++;

436 
ªs
 = 
	`∑ck_key16
(
£l
, 0, 0x1FFF, 6, 0);

437 
d⁄e
;

439 i‡(
	`°rcmp
(*
¨gv
, "df") == 0) {

440 
¨gc
--; 
¨gv
++;

441 
ªs
 = 
	`∑ck_key16
(
£l
, 0x4000, 0x4000, 6, 0);

442 
d⁄e
;

444 i‡(
	`°rcmp
(*
¨gv
, "mf") == 0) {

445 
¨gc
--; 
¨gv
++;

446 
ªs
 = 
	`∑ck_key16
(
£l
, 0x2000, 0x2000, 6, 0);

447 
d⁄e
;

449 i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

450 
	`NEXT_ARG
();

451 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 22, 0);

452 
d⁄e
;

454 i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

455 
	`NEXT_ARG
();

456 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 20, 0);

457 
d⁄e
;

459 i‡(
	`°rcmp
(*
¨gv
, "icmp_type") == 0) {

460 
	`NEXT_ARG
();

461 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 20, 0);

462 
d⁄e
;

464 i‡(
	`°rcmp
(*
¨gv
, "icmp_code") == 0) {

465 
	`NEXT_ARG
();

466 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 20, 1);

467 
d⁄e
;

471 
d⁄e
:

472 *
¨gc_p
 = 
¨gc
;

473 *
¨gv_p
 = 
¨gv
;

474  
ªs
;

475 
	}
}

477 
	$∑r£_ù6
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

479 
ªs
 = -1;

480 
¨gc
 = *
¨gc_p
;

481 **
¨gv
 = *
¨gv_p
;

483 i‡(
¨gc
 < 2)

486 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

487 
	`NEXT_ARG
();

488 
ªs
 = 
	`∑r£_ù6_addr
(&
¨gc
, &
¨gv
, 
£l
, 8);

489 
d⁄e
;

491 i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

492 
	`NEXT_ARG
();

493 
ªs
 = 
	`∑r£_ù6_addr
(&
¨gc
, &
¨gv
, 
£l
, 24);

494 
d⁄e
;

496 i‡(
	`°rcmp
(*
¨gv
, "priority") == 0) {

497 
	`NEXT_ARG
();

498 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 4, 0);

499 
d⁄e
;

501 i‡(
	`°rcmp
(*
¨gv
, "protocol") == 0) {

502 
	`NEXT_ARG
();

503 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 6, 0);

504 
d⁄e
;

506 i‡(
	`°rcmp
(*
¨gv
, "flowlabel") == 0) {

507 
	`NEXT_ARG
();

508 
ªs
 = 
	`∑r£_u32
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

509 
d⁄e
;

511 i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

512 
	`NEXT_ARG
();

513 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 42, 0);

514 
d⁄e
;

516 i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

517 
	`NEXT_ARG
();

518 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 40, 0);

519 
d⁄e
;

521 i‡(
	`°rcmp
(*
¨gv
, "icmp_type") == 0) {

522 
	`NEXT_ARG
();

523 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 40, 0);

524 
d⁄e
;

526 i‡(
	`°rcmp
(*
¨gv
, "icmp_code") == 0) {

527 
	`NEXT_ARG
();

528 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 41, 1);

529 
d⁄e
;

533 
d⁄e
:

534 *
¨gc_p
 = 
¨gc
;

535 *
¨gv_p
 = 
¨gv
;

536  
ªs
;

537 
	}
}

539 
	#∑r£_t˝
 
∑r£_udp


	)

540 
	$∑r£_udp
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

542 
ªs
 = -1;

543 
¨gc
 = *
¨gc_p
;

544 **
¨gv
 = *
¨gv_p
;

546 i‡(
¨gc
 < 2)

549 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

550 
	`NEXT_ARG
();

551 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 0, -1);

552 
d⁄e
;

554 i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

555 
	`NEXT_ARG
();

556 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 2, -1);

557 
d⁄e
;

561 
d⁄e
:

562 *
¨gc_p
 = 
¨gc
;

563 *
¨gv_p
 = 
¨gv
;

564  
ªs
;

565 
	}
}

567 
	$∑r£_icmp
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

569 
ªs
 = -1;

570 
¨gc
 = *
¨gc_p
;

571 **
¨gv
 = *
¨gv_p
;

573 i‡(
¨gc
 < 2)

576 i‡(
	`°rcmp
(*
¨gv
, "type") == 0) {

577 
	`NEXT_ARG
();

578 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 0, -1);

579 
d⁄e
;

581 i‡(
	`°rcmp
(*
¨gv
, "code") == 0) {

582 
	`NEXT_ARG
();

583 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 1, -1);

584 
d⁄e
;

588 
d⁄e
:

589 *
¨gc_p
 = 
¨gc
;

590 *
¨gv_p
 = 
¨gv
;

591  
ªs
;

592 
	}
}

594 
	$∑r£_m¨k
(*
¨gc_p
, ***
¨gv_p
, 
∆msghdr
 *
n
)

596 
ªs
 = -1;

597 
¨gc
 = *
¨gc_p
;

598 **
¨gv
 = *
¨gv_p
;

599 
tc_u32_m¨k
 
m¨k
;

601 i‡(
¨gc
 <= 1)

604 i‡(
	`gë_u32
(&
m¨k
.
vÆ
, *
¨gv
, 0)) {

605 
	`Ârötf
(
°dîr
, "Illegal \"mark\" value\n");

608 
	`NEXT_ARG
();

610 i‡(
	`gë_u32
(&
m¨k
.
mask
, *
¨gv
, 0)) {

611 
	`Ârötf
(
°dîr
, "Illegal \"mark\" mask\n");

614 
	`NEXT_ARG
();

616 i‡((
m¨k
.
vÆ
 & m¨k.
mask
) != mark.val) {

617 
	`Ârötf
(
°dîr
, "Illegal \"mark\" (impossible combination)\n");

621 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_MARK
, &
m¨k
, (mark));

622 
ªs
 = 0;

624 *
¨gc_p
 = 
¨gc
;

625 *
¨gv_p
 = 
¨gv
;

626  
ªs
;

627 
	}
}

629 
	$∑r£_£À˘‹
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
, 
∆msghdr
 *
n
)

631 
¨gc
 = *
¨gc_p
;

632 **
¨gv
 = *
¨gv_p
;

633 
ªs
 = -1;

635 i‡(
¨gc
 <= 0)

638 i‡(
	`m©ches
(*
¨gv
, "u32") == 0) {

639 
	`NEXT_ARG
();

640 
ªs
 = 
	`∑r£_u32
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

641 
d⁄e
;

643 i‡(
	`m©ches
(*
¨gv
, "u16") == 0) {

644 
	`NEXT_ARG
();

645 
ªs
 = 
	`∑r£_u16
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

646 
d⁄e
;

648 i‡(
	`m©ches
(*
¨gv
, "u8") == 0) {

649 
	`NEXT_ARG
();

650 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 
£l
, 0, 0);

651 
d⁄e
;

653 i‡(
	`m©ches
(*
¨gv
, "ip") == 0) {

654 
	`NEXT_ARG
();

655 
ªs
 = 
	`∑r£_ù
(&
¨gc
, &
¨gv
, 
£l
);

656 
d⁄e
;

658 i‡(
	`m©ches
(*
¨gv
, "ip6") == 0) {

659 
	`NEXT_ARG
();

660 
ªs
 = 
	`∑r£_ù6
(&
¨gc
, &
¨gv
, 
£l
);

661 
d⁄e
;

663 i‡(
	`m©ches
(*
¨gv
, "udp") == 0) {

664 
	`NEXT_ARG
();

665 
ªs
 = 
	`∑r£_udp
(&
¨gc
, &
¨gv
, 
£l
);

666 
d⁄e
;

668 i‡(
	`m©ches
(*
¨gv
, "tcp") == 0) {

669 
	`NEXT_ARG
();

670 
ªs
 = 
	`∑r£_t˝
(&
¨gc
, &
¨gv
, 
£l
);

671 
d⁄e
;

673 i‡(
	`m©ches
(*
¨gv
, "icmp") == 0) {

674 
	`NEXT_ARG
();

675 
ªs
 = 
	`∑r£_icmp
(&
¨gc
, &
¨gv
, 
£l
);

676 
d⁄e
;

678 i‡(
	`m©ches
(*
¨gv
, "mark") == 0) {

679 
	`NEXT_ARG
();

680 
ªs
 = 
	`∑r£_m¨k
(&
¨gc
, &
¨gv
, 
n
);

681 
d⁄e
;

686 
d⁄e
:

687 *
¨gc_p
 = 
¨gc
;

688 *
¨gv_p
 = 
¨gv
;

689  
ªs
;

690 
	}
}

692 
	$∑r£_off£t
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

694 
¨gc
 = *
¨gc_p
;

695 **
¨gv
 = *
¨gv_p
;

697 
¨gc
 > 0) {

698 i‡(
	`m©ches
(*
¨gv
, "plus") == 0) {

699 
off
;

700 
	`NEXT_ARG
();

701 i‡(
	`gë_öãgî
(&
off
, *
¨gv
, 0))

703 
£l
->
off
 = off;

704 
£l
->
Êags
 |
TC_U32_OFFSET
;

705 } i‡(
	`m©ches
(*
¨gv
, "at") == 0) {

706 
off
;

707 
	`NEXT_ARG
();

708 i‡(
	`gë_öãgî
(&
off
, *
¨gv
, 0))

710 
£l
->
offoff
 = 
off
;

711 i‡(
off
%2) {

712 
	`Ârötf
(
°dîr
, "offset \"at\" must beÉven\n");

715 
£l
->
Êags
 |
TC_U32_VAROFFSET
;

716 } i‡(
	`m©ches
(*
¨gv
, "mask") == 0) {

717 
__u16
 
mask
;

718 
	`NEXT_ARG
();

719 i‡(
	`gë_u16
(&
mask
, *
¨gv
, 16))

721 
£l
->
offmask
 = 
	`ht⁄s
(
mask
);

722 
£l
->
Êags
 |
TC_U32_VAROFFSET
;

723 } i‡(
	`m©ches
(*
¨gv
, "shift") == 0) {

724 
shi·
;

725 
	`NEXT_ARG
();

726 i‡(
	`gë_öãgî
(&
shi·
, *
¨gv
, 0))

728 
£l
->
offshi·
 = 
shi·
;

729 
£l
->
Êags
 |
TC_U32_VAROFFSET
;

730 } i‡(
	`m©ches
(*
¨gv
, "eat") == 0) {

731 
£l
->
Êags
 |
TC_U32_EAT
;

735 
¨gc
--; 
¨gv
++;

738 *
¨gc_p
 = 
¨gc
;

739 *
¨gv_p
 = 
¨gv
;

741 
	}
}

743 
	$∑r£_hashkey
(*
¨gc_p
, ***
¨gv_p
, 
tc_u32_£l
 *
£l
)

745 
¨gc
 = *
¨gc_p
;

746 **
¨gv
 = *
¨gv_p
;

748 
¨gc
 > 0) {

749 i‡(
	`m©ches
(*
¨gv
, "mask") == 0) {

750 
__u32
 
mask
;

751 
	`NEXT_ARG
();

752 i‡(
	`gë_u32
(&
mask
, *
¨gv
, 16))

754 
£l
->
hmask
 = 
	`ht⁄l
(
mask
);

755 } i‡(
	`m©ches
(*
¨gv
, "at") == 0) {

756 
num
;

757 
	`NEXT_ARG
();

758 i‡(
	`gë_öãgî
(&
num
, *
¨gv
, 0))

760 i‡(
num
%4)

762 
£l
->
hoff
 = 
num
;

766 
¨gc
--; 
¨gv
++;

769 *
¨gc_p
 = 
¨gc
;

770 *
¨gv_p
 = 
¨gv
;

772 
	}
}

774 
	$u32_∑r£_›t
(
fûãr_utû
 *
qu
, *
h™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

777 
tc_u32_£l
 
£l
;

778 
tc_u32_key
 
keys
[128];

779 } 
£l
;

780 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

781 
π©å
 *
èû
;

782 
£l_ok
 = 0, 
ãrmöÆ_ok
 = 0;

783 
ßm∂e_ok
 = 0;

784 
__u32
 
htid
 = 0;

785 
__u32
 
‹dî
 = 0;

787 
	`mem£t
(&
£l
, 0, (sel));

789 i‡(
h™dÀ
 && 
	`gë_u32_h™dÀ
(&
t
->
tcm_h™dÀ
, handle)) {

790 
	`Ârötf
(
°dîr
, "Illegal filter ID\n");

794 i‡(
¨gc
 == 0)

797 
èû
 = 
	`NLMSG_TAIL
(
n
);

798 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_OPTIONS
, 
NULL
, 0);

800 
¨gc
 > 0) {

801 i‡(
	`m©ches
(*
¨gv
, "match") == 0) {

802 
	`NEXT_ARG
();

803 i‡(
	`∑r£_£À˘‹
(&
¨gc
, &
¨gv
, &
£l
.£l, 
n
)) {

804 
	`Ârötf
(
°dîr
, "Illegal \"match\"\n");

807 
£l_ok
++;

809 } i‡(
	`m©ches
(*
¨gv
, "offset") == 0) {

810 
	`NEXT_ARG
();

811 i‡(
	`∑r£_off£t
(&
¨gc
, &
¨gv
, &
£l
.sel)) {

812 
	`Ârötf
(
°dîr
, "Illegal \"offset\"\n");

816 } i‡(
	`m©ches
(*
¨gv
, "hashkey") == 0) {

817 
	`NEXT_ARG
();

818 i‡(
	`∑r£_hashkey
(&
¨gc
, &
¨gv
, &
£l
.sel)) {

819 
	`Ârötf
(
°dîr
, "Illegal \"hashkey\"\n");

823 } i‡(
	`m©ches
(*
¨gv
, "classid") == 0 ||

824 
	`°rcmp
(*
¨gv
, "flowid") == 0) {

825 
h™dÀ
;

826 
	`NEXT_ARG
();

827 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
)) {

828 
	`Ârötf
(
°dîr
, "Illegal \"classid\"\n");

831 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_CLASSID
, &
h™dÀ
, 4);

832 
£l
.£l.
Êags
 |
TC_U32_TERMINAL
;

833 } i‡(
	`m©ches
(*
¨gv
, "divisor") == 0) {

834 
divis‹
;

835 
	`NEXT_ARG
();

836 i‡(
	`gë_unsig√d
(&
divis‹
, *
¨gv
, 0) ||

837 
divis‹
 == 0 ||

838 
divis‹
 > 0x100 || ((divisor - 1) & divisor)) {

839 
	`Ârötf
(
°dîr
, "Illegal \"divisor\"\n");

842 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_DIVISOR
, &
divis‹
, 4);

843 } i‡(
	`m©ches
(*
¨gv
, "order") == 0) {

844 
	`NEXT_ARG
();

845 i‡(
	`gë_u32
(&
‹dî
, *
¨gv
, 0)) {

846 
	`Ârötf
(
°dîr
, "Illegal \"order\"\n");

849 } i‡(
	`°rcmp
(*
¨gv
, "link") == 0) {

850 
h™dÀ
;

851 
	`NEXT_ARG
();

852 i‡(
	`gë_u32_h™dÀ
(&
h™dÀ
, *
¨gv
)) {

853 
	`Ârötf
(
°dîr
, "Illegal \"link\"\n");

856 i‡(
h™dÀ
 && 
	`TC_U32_NODE
(handle)) {

857 
	`Ârötf
(
°dîr
, "\"link\" must beá hashÅable.\n");

860 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_LINK
, &
h™dÀ
, 4);

861 } i‡(
	`°rcmp
(*
¨gv
, "ht") == 0) {

862 
h™dÀ
;

863 
	`NEXT_ARG
();

864 i‡(
	`gë_u32_h™dÀ
(&
h™dÀ
, *
¨gv
)) {

865 
	`Ârötf
(
°dîr
, "Illegal \"ht\"\n");

868 i‡(
h™dÀ
 && 
	`TC_U32_NODE
(handle)) {

869 
	`Ârötf
(
°dîr
, "\"ht\" must beá hashÅable.\n");

872 i‡(
ßm∂e_ok
)

873 
htid
 = (htid&0xFF000)|(
h™dÀ
&0xFFF00000);

875 
htid
 = (
h™dÀ
&0xFFFFF000);

876 } i‡(
	`°rcmp
(*
¨gv
, "sample") == 0) {

877 
__u32
 
hash
;

878 
divis‹
 = 0x100;

881 
tc_u32_£l
 
£l
;

882 
tc_u32_key
 
keys
[4];

883 } 
£l2
;

884 
	`mem£t
(&
£l2
, 0, (sel2));

885 
	`NEXT_ARG
();

886 i‡(
	`∑r£_£À˘‹
(&
¨gc
, &
¨gv
, &
£l2
.
£l
, 
n
)) {

887 
	`Ârötf
(
°dîr
, "Illegal \"sample\"\n");

890 i‡(
£l2
.
£l
.
nkeys
 != 1) {

891 
	`Ârötf
(
°dîr
, "\"sample\" must containÉxactly ONE key.\n");

894 i‡(*
¨gv
 !0 && 
	`°rcmp
(*argv, "divisor") == 0) {

895 
	`NEXT_ARG
();

896 i‡(
	`gë_unsig√d
(&
divis‹
, *
¨gv
, 0) || divisor == 0 ||

897 
divis‹
 > 0x100 || ((divisor - 1) & divisor)) {

898 
	`Ârötf
(
°dîr
, "Illegal sample \"divisor\"\n");

901 
	`NEXT_ARG
();

903 
hash
 = 
£l2
.
£l
.
keys
[0].
vÆ
&£l2.£l.keys[0].
mask
;

904 
hash
 ^= hash>>16;

905 
hash
 ^= hash>>8;

906 
htid
 = ((
hash
%
divis‹
)<<12)|(htid&0xFFF00000);

907 
ßm∂e_ok
 = 1;

909 } i‡(
	`°rcmp
(*
¨gv
, "indev") == 0) {

910 
öd
[
IFNAMSIZ
 + 1];

911 
	`mem£t
(
öd
, 0,  (ind));

912 
¨gc
--;

913 
¨gv
++;

914 i‡(
¨gc
 < 1) {

915 
	`Ârötf
(
°dîr
, "Illegal indev\n");

918 
	`°∫˝y
(
öd
, *
¨gv
,  (ind) - 1);

919 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_INDEV
, 
öd
, 
	`°æí
(ind) + 1);

921 } i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

922 
	`NEXT_ARG
();

923 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_U32_ACT
, 
n
)) {

924 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

927 
ãrmöÆ_ok
++;

930 } i‡(
	`m©ches
(*
¨gv
, "police") == 0) {

931 
	`NEXT_ARG
();

932 i‡(
	`∑r£_pﬁi˚
(&
¨gc
, &
¨gv
, 
TCA_U32_POLICE
, 
n
)) {

933 
	`Ârötf
(
°dîr
, "Illegal \"police\"\n");

936 
ãrmöÆ_ok
++;

938 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

939 
	`ex∂aö
();

942 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

943 
	`ex∂aö
();

946 
¨gc
--; 
¨gv
++;

950 i‡(
ãrmöÆ_ok
)

951 
£l
.£l.
Êags
 |
TC_U32_TERMINAL
;

953 i‡(
‹dî
) {

954 i‡(
	`TC_U32_NODE
(
t
->
tcm_h™dÀ
Ë&& 
‹dî
 != TC_U32_NODE(t->tcm_handle)) {

955 
	`Ârötf
(
°dîr
, "\"order\" contradicts \"handle\"\n");

958 
t
->
tcm_h™dÀ
 |
‹dî
;

961 i‡(
htid
)

962 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_HASH
, &
htid
, 4);

963 i‡(
£l_ok
)

964 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_U32_SEL
, &
£l
, (£l.£l)+£l.£l.
nkeys
*(
tc_u32_key
));

965 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

967 
	}
}

969 
	$u32_¥öt_›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
h™dÀ
)

971 
π©å
 *
tb
[
TCA_U32_MAX
+1];

972 
tc_u32_£l
 *
£l
 = 
NULL
;

973 
tc_u32_p˙t
 *
pf
 = 
NULL
;

975 i‡(
›t
 =
NULL
)

978 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_U32_MAX
, 
›t
);

980 i‡(
h™dÀ
) {

981 
	`SPRINT_BUF
(
b1
);

982 
	`Ârötf
(
f
, "fh %†", 
	`•röt_u32_h™dÀ
(
h™dÀ
, 
b1
));

984 i‡(
	`TC_U32_NODE
(
h™dÀ
)) {

985 
	`Ârötf
(
f
, "‹dî %d ", 
	`TC_U32_NODE
(
h™dÀ
));

988 i‡(
tb
[
TCA_U32_SEL
]) {

989 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_U32_SEL
]Ë< (*
£l
))

992 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_U32_SEL
]);

995 i‡(
tb
[
TCA_U32_DIVISOR
]) {

996 
	`Ârötf
(
f
, "hàdivis‹ %d ", *(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_U32_DIVISOR
]));

997 } i‡(
tb
[
TCA_U32_HASH
]) {

998 
__u32
 
htid
 = *(__u32*)
	`RTA_DATA
(
tb
[
TCA_U32_HASH
]);

999 
	`Ârötf
(
f
, "key hà%x bkà%x ", 
	`TC_U32_USERHTID
(
htid
), 
	`TC_U32_HASH
(htid));

1001 
	`Ârötf
(
f
, "??? ");

1003 i‡(
tb
[
TCA_U32_CLASSID
]) {

1004 
	`SPRINT_BUF
(
b1
);

1005 
	`Ârötf
(
f
, "%sflowid %s ",

1006 !
£l
 || !(£l->
Êags
&
TC_U32_TERMINAL
) ? "*" : "",

1007 
	`•röt_tc_˛assid
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_U32_CLASSID
]), 
b1
));

1008 } i‡(
£l
 && sñ->
Êags
&
TC_U32_TERMINAL
) {

1009 
	`Ârötf
(
f
, "terminal flowid ??? ");

1011 i‡(
tb
[
TCA_U32_LINK
]) {

1012 
	`SPRINT_BUF
(
b1
);

1013 
	`Ârötf
(
f
, "lök %†", 
	`•röt_u32_h™dÀ
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_U32_LINK
]), 
b1
));

1016 i‡(
tb
[
TCA_U32_PCNT
]) {

1017 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_U32_PCNT
]Ë< (*
pf
)) {

1018 
	`Ârötf
(
f
, "BrokenÖerf counters \n");

1021 
pf
 = 
	`RTA_DATA
(
tb
[
TCA_U32_PCNT
]);

1024 i‡(
£l
 && 
show_°©s
 && 
NULL
 !
pf
)

1025 
	`Ârötf
(
f
, " (rule hit %llu success %llu)",

1026 (Ë
pf
->
r˙t
,

1027 (Ë
pf
->
rhô
);

1029 i‡(
tb
[
TCA_U32_MARK
]) {

1030 
tc_u32_m¨k
 *
m¨k
 = 
	`RTA_DATA
(
tb
[
TCA_U32_MARK
]);

1031 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_U32_MARK
]Ë< (*
m¨k
)) {

1032 
	`Ârötf
(
f
, "\n Invalid mark (kernel&iproute2 mismatch)\n");

1034 
	`Ârötf
(
f
, "\n mark 0x%04x 0x%04x (success %d)",

1035 
m¨k
->
vÆ
, m¨k->
mask
, m¨k->
suc˚ss
);

1039 i‡(
£l
) {

1040 
i
;

1041 
tc_u32_key
 *
key
 = 
£l
->
keys
;

1042 i‡(
£l
->
nkeys
) {

1043 
i
=0; i<
£l
->
nkeys
; i++, 
key
++) {

1044 
	`Ârötf
(
f
, "\n match %08x/%08xát %s%d",

1045 ()
	`¡ohl
(
key
->
vÆ
),

1046 ()
	`¡ohl
(
key
->
mask
),

1047 
key
->
offmask
 ? "nexthdr+" : "",

1048 
key
->
off
);

1049 i‡(
show_°©s
 && 
NULL
 !
pf
)

1050 
	`Ârötf
(
f
, " (success %lld ) ",

1051 (Ë
pf
->
k˙ts
[
i
]);

1055 i‡(
£l
->
Êags
&(
TC_U32_VAROFFSET
|
TC_U32_OFFSET
)) {

1056 
	`Ârötf
(
f
, "\n offset ");

1057 i‡(
£l
->
Êags
&
TC_U32_VAROFFSET
)

1058 
	`Ârötf
(
f
, "%04x>>%dáà%d ", 
	`¡ohs
(
£l
->
offmask
), sñ->
offshi·
, sñ->
offoff
);

1059 i‡(
£l
->
off
)

1060 
	`Ârötf
(
f
, "∂u†%d ", 
£l
->
off
);

1062 i‡(
£l
->
Êags
&
TC_U32_EAT
)

1063 
	`Ârötf
(
f
, "Éat ");

1065 i‡(
£l
->
hmask
) {

1066 
	`Ârötf
(
f
, "\n hash mask %08xát %d ",

1067 ()
	`ht⁄l
(
£l
->
hmask
), sñ->
hoff
);

1071 i‡(
tb
[
TCA_U32_POLICE
]) {

1072 
	`Ârötf
(
f
, "\n");

1073 
	`tc_¥öt_pﬁi˚
(
f
, 
tb
[
TCA_U32_POLICE
]);

1075 i‡(
tb
[
TCA_U32_INDEV
]) {

1076 
π©å
 *
idev
 = 
tb
[
TCA_U32_INDEV
];

1077 
	`Ârötf
(
f
, "\¿ i≈uàdev %s\n", (*Ë
	`RTA_DATA
(
idev
));

1079 i‡(
tb
[
TCA_U32_ACT
]) {

1080 
	`tc_¥öt_a˘i⁄
(
f
, 
tb
[
TCA_U32_ACT
]);

1084 
	}
}

1086 
fûãr_utû
 
	gu32_fûãr_utû
 = {

1087 .
id
 = "u32",

1088 .
	g∑r£_f›t
 = 
u32_∑r£_›t
,

1089 .
	g¥öt_f›t
 = 
u32_¥öt_›t
,

	@m_action.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/öë.h
>

24 
	~<°rög.h
>

25 
	~<dlf˙.h
>

27 
	~"utûs.h
"

28 
	~"tc_comm⁄.h
"

29 
	~"tc_utû.h
"

31 
a˘i⁄_utû
 * 
	ga˘i⁄_li°
;

32 #ifde‡
CONFIG_GACT


33 
	gga˘_ld
 = 0 ;

35 
	gb©ch_c
 = 0;

36 
	gèb_Êush
 = 0;

38 
	$a˘_ußge
()

47 
	`Ârötf
 (
°dîr
, "usage:Åcáctions <ACTSPECOP>*\n");

48 
	`Ârötf
(
°dîr
,

62 
	`exô
(-1);

63 
	}
}

65 
	$¥öt_nﬂ›t
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
›t
)

67 i‡(
›t
 && 
	`RTA_PAYLOAD
(opt))

68 
	`Ârötf
(
f
, "[Unknownáction, optlen=%u] ",

69 (Ë
	`RTA_PAYLOAD
(
›t
));

71 
	}
}

73 
	$∑r£_nﬂ›t
(
a˘i⁄_utû
 *
au
, *
¨gc_p
, ***
¨gv_p
, 
code
, 
∆msghdr
 *
n
)

75 
¨gc
 = *
¨gc_p
;

76 **
¨gv
 = *
¨gv_p
;

78 i‡(
¨gc
) {

79 
	`Ârötf
(
°dîr
, "Unknow¿a˘i⁄ \"%s\", hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", 
au
->
id
, *
¨gv
);

81 
	`Ârötf
(
°dîr
, "Unknow¿a˘i⁄ \"%s\"\n", 
au
->
id
);

84 
	}
}

86 
a˘i⁄_utû
 *
	$gë_a˘i⁄_köd
(*
°r
)

88 *
aBODY
;

89 *
dlh
;

90 
buf
[256];

91 
a˘i⁄_utû
 *
a
;

92 #ifde‡
CONFIG_GACT


93 
looked4ga˘
 = 0;

94 
ª°¨t_s
:

96 
a
 = 
a˘i⁄_li°
;á;á =á->
√xt
) {

97 i‡(
	`°rcmp
(
a
->
id
, 
°r
) == 0)

98  
a
;

101 
	`¢¥ötf
(
buf
, (buf), "m_%s.so", 
°r
);

102 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

103 i‡(
dlh
 =
NULL
) {

104 
dlh
 = 
aBODY
;

105 i‡(
dlh
 =
NULL
) {

106 
dlh
 = 
aBODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

107 i‡(
dlh
 =
NULL
)

108 
n€xi°
;

112 
	`¢¥ötf
(
buf
, (buf), "%s_a˘i⁄_utû", 
°r
);

113 
a
 = 
	`dlsym
(
dlh
, 
buf
);

114 i‡(
a
 =
NULL
)

115 
n€xi°
;

117 
ªg
:

118 
a
->
√xt
 = 
a˘i⁄_li°
;

119 
a˘i⁄_li°
 = 
a
;

120  
a
;

122 
n€xi°
:

123 #ifde‡
CONFIG_GACT


124 i‡(!
looked4ga˘
) {

125 
looked4ga˘
 = 1;

126 
	`°r˝y
(
°r
,"gact");

127 
ª°¨t_s
;

130 
a
 = 
	`mÆloc
((*a));

131 i‡(
a
) {

132 
	`mem£t
(
a
, 0, (*a));

133 
	`°∫˝y
(
a
->
id
, "noact", 15);

134 
a
->
∑r£_a›t
 = 
∑r£_nﬂ›t
;

135 
a
->
¥öt_a›t
 = 
¥öt_nﬂ›t
;

136 
ªg
;

138  
a
;

139 
	}
}

142 
	$√w_cmd
(**
¨gv
)

144 i‡((
	`m©ches
(*
¨gv
, "change") == 0) ||

145 (
	`m©ches
(*
¨gv
, "replace") == 0)||

146 (
	`m©ches
(*
¨gv
, "delete") == 0)||

147 (
	`m©ches
(*
¨gv
, "add") == 0))

152 
	}
}

155 
	$∑r£_a˘i⁄
(*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

157 
¨gc
 = *
¨gc_p
;

158 **
¨gv
 = *
¨gv_p
;

159 
π©å
 *
èû
, *
èû2
;

160 
k
[16];

161 
ok
 = 0;

162 
óp
 = 0;

164 
ªt
 = 0;

165 
¥io
 = 0;

167 i‡(
¨gc
 <= 0)

170 
èû
 = 
èû2
 = 
	`NLMSG_TAIL
(
n
);

172 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

174 
¨gc
 > 0) {

176 
	`mem£t
(
k
, 0,  (k));

178 i‡(
	`°rcmp
(*
¨gv
, "action") == 0 ) {

179 
¨gc
--;

180 
¨gv
++;

181 
óp
 = 1;

182 #ifde‡
CONFIG_GACT


183 i‡(!
ga˘_ld
) {

184 
	`gë_a˘i⁄_köd
("gact");

188 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

190 } i‡(
	`√w_cmd
(
¨gv
)) {

191 
d⁄e0
;

193 
a˘i⁄_utû
 *
a
 = 
NULL
;

194 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

195 
óp
 = 0;

196 i‡(
¨gc
 > 0 ) {

197 
a
 = 
	`gë_a˘i⁄_köd
(
k
);

199 
d⁄e0
:

200 i‡(
ok
)

203 
d⁄e
;

206 i‡(
NULL
 =
a
) {

207 
bad_vÆ
;

210 
èû
 = 
	`NLMSG_TAIL
(
n
);

211 
	`add©å_l
(
n
, 
MAX_MSG
, ++
¥io
, 
NULL
, 0);

212 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_ACT_KIND
, 
k
, 
	`°æí
(k) + 1);

214 
ªt
 = 
a
->
	`∑r£_a›t
◊,&
¨gc
, &
¨gv
, 
TCA_ACT_OPTIONS
, 
n
);

216 i‡(
ªt
 < 0) {

217 
	`Ârötf
(
°dîr
,"badáctionÖarsing\n");

218 
bad_vÆ
;

220 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

221 
ok
++;

226 i‡(
óp
 > 0) {

227 
	`Ârötf
(
°dîr
,"badá˘i⁄Ém±y %d\n",
óp
);

228 
bad_vÆ
;

231 
èû2
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail2;

233 
d⁄e
:

234 *
¨gc_p
 = 
¨gc
;

235 *
¨gv_p
 = 
¨gv
;

237 
bad_vÆ
:

240 
	`Ârötf
(
°dîr
, "∑r£_a˘i⁄: bad vÆuê(%d:%s)!\n",
¨gc
,*
¨gv
);

242 
	}
}

245 
	$tc_¥öt_⁄e_a˘i⁄
(
FILE
 * 
f
, 
π©å
 *
¨g
)

248 
π©å
 *
tb
[
TCA_ACT_MAX
 + 1];

249 
îr
 = 0;

250 
a˘i⁄_utû
 *
a
 = 
NULL
;

252 i‡(
¨g
 =
NULL
)

255 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ACT_MAX
, 
¨g
);

256 i‡(
tb
[
TCA_ACT_KIND
] =
NULL
) {

257 
	`Ârötf
(
°dîr
, "NULL Action!\n");

262 
a
 = 
	`gë_a˘i⁄_köd
(
	`RTA_DATA
(
tb
[
TCA_ACT_KIND
]));

263 i‡(
NULL
 =
a
)

264  
îr
;

266 i‡(
èb_Êush
) {

267 
	`Ârötf
(
f
," %†\n", 
a
->
id
);

268 
èb_Êush
 = 0;

272 
îr
 = 
a
->
	`¥öt_a›t
◊,
f
,
tb
[
TCA_ACT_OPTIONS
]);

275 i‡(0 > 
îr
)

276  
îr
;

278 i‡(
show_°©s
 && 
tb
[
TCA_ACT_STATS
]) {

279 
	`Ârötf
(
f
, "\tAction statistics:\n");

280 
	`¥öt_tc°©s2_©å
(
f
, 
tb
[
TCA_ACT_STATS
], "\t", 
NULL
);

281 
	`Ârötf
(
f
, "\n");

285 
	}
}

288 
	$tc_¥öt_a˘i⁄
(
FILE
 * 
f
, c⁄° 
π©å
 *
¨g
)

291 
i
;

292 
π©å
 *
tb
[
TCA_ACT_MAX_PRIO
 + 1];

294 i‡(
¨g
 =
NULL
)

297 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ACT_MAX_PRIO
, 
¨g
);

299 i‡(
èb_Êush
 && 
NULL
 !
tb
[0] && NULL ==Åb[1]) {

300 
ªt
 = 
	`tc_¥öt_⁄e_a˘i⁄
(
f
, 
tb
[0]);

301  
ªt
;

304 
i
 = 0; i < 
TCA_ACT_MAX_PRIO
; i++) {

305 i‡(
tb
[
i
]) {

306 
	`Ârötf
(
f
, "\n\è˘i⁄ ordî %d: ", 
i
 + 
b©ch_c
);

307 i‡(0 > 
	`tc_¥öt_⁄e_a˘i⁄
(
f
, 
tb
[
i
])) {

308 
	`Ârötf
(
f
, "ErrorÖrintingáction\n");

314 
b©ch_c
+=
TCA_ACT_MAX_PRIO
 ;

316 
	}
}

318 
	$¥öt_a˘i⁄
(c⁄° 
sockaddr_∆
 *
who
,

319 
∆msghdr
 *
n
,

320 *
¨g
)

322 
FILE
 *
Â
 = (FILE*)
¨g
;

323 
tˇmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

324 
Àn
 = 
n
->
∆msg_Àn
;

325 
π©å
 * 
tb
[
TCAA_MAX
+1];

327 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

329 i‡(
Àn
 < 0) {

330 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

334 
	`∑r£_π©å
(
tb
, 
TCAA_MAX
, 
	`TA_RTA
(
t
), 
Àn
);

336 i‡(
NULL
 =
tb
[
TCA_ACT_TAB
]) {

337 i‡(
n
->
∆msg_ty≥
 !
RTM_GETACTION
)

338 
	`Ârötf
(
°dîr
, "print_action: NULL kind\n");

342 i‡(
n
->
∆msg_ty≥
 =
RTM_DELACTION
) {

343 i‡(
n
->
∆msg_Êags
 & 
NLM_F_ROOT
) {

344 
	`Ârötf
(
Â
, "FlushedÅable ");

345 
èb_Êush
 = 1;

347 
	`Ârötf
(
Â
, "deletedáction ");

351 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWACTION
)

352 
	`Ârötf
(
Â
, "Addedáction ");

353 
	`tc_¥öt_a˘i⁄
(
Â
, 
tb
[
TCA_ACT_TAB
]);

356 
	}
}

358 
	$tc_a˘i⁄_gd
(
cmd
, 
Êags
, *
¨gc_p
, ***
¨gv_p
)

360 
k
[16];

361 
a˘i⁄_utû
 *
a
 = 
NULL
;

362 
¨gc
 = *
¨gc_p
;

363 **
¨gv
 = *
¨gv_p
;

364 
¥io
 = 0;

365 
ªt
 = 0;

366 
__u32
 
i
;

367 
sockaddr_∆
 
∆addr
;

368 
π©å
 *
èû
;

369 
π©å
 *
èû2
;

370 
∆msghdr
 *
™s
 = 
NULL
;

373 
∆msghdr
 
n
;

374 
tˇmsg
 
t
;

375 
buf
[
MAX_MSG
];

376 } 
ªq
;

378 
ªq
.
t
.
tˇ_Ámûy
 = 
AF_UNSPEC
;

380 
	`mem£t
(&
ªq
, 0, (req));

382 
	`mem£t
(&
∆addr
, 0, (nladdr));

383 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

385 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tˇmsg
));

386 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

387 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

388 
¨gc
 -=1;

389 
¨gv
 +=1;

392 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

393 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_TAB
, 
NULL
, 0);

395 
¨gc
 > 0) {

396 i‡(
	`°rcmp
(*
¨gv
, "action") == 0 ) {

397 
¨gc
--;

398 
¨gv
++;

400 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

404 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

405 
a
 = 
	`gë_a˘i⁄_köd
(
k
);

406 i‡(
NULL
 =
a
) {

407 
	`Ârötf
(
°dîr
, "Eº‹:Ç⁄Éxi°íàa˘i⁄: %s\n",
k
);

408 
ªt
 = -1;

409 
bad_vÆ
;

411 i‡(
	`°rcmp
(
a
->
id
, 
k
) != 0) {

412 
	`Ârötf
(
°dîr
, "Eº‹:Ç⁄Éxi°íàa˘i⁄: %s\n",
k
);

413 
ªt
 = -1;

414 
bad_vÆ
;

417 
¨gc
 -=1;

418 
¨gv
 +=1;

419 i‡(
¨gc
 <= 0) {

420 
	`Ârötf
(
°dîr
, "Eº‹:Çÿödex s≥cifõdá˘i⁄: %s\n",
k
);

421 
ªt
 = -1;

422 
bad_vÆ
;

425 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

426 
	`NEXT_ARG
();

427 i‡(
	`gë_u32
(&
i
, *
¨gv
, 10)) {

428 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

429 
ªt
 = -1;

430 
bad_vÆ
;

432 
¨gc
 -=1;

433 
¨gv
 +=1;

435 
	`Ârötf
(
°dîr
, "Eº‹:Çÿödex s≥cifõdá˘i⁄: %s\n",
k
);

436 
ªt
 = -1;

437 
bad_vÆ
;

440 
èû2
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

441 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, ++
¥io
, 
NULL
, 0);

442 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_KIND
, 
k
, 
	`°æí
(k) + 1);

443 
	`add©å32
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_INDEX
, 
i
);

444 
èû2
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail2;

448 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail;

450 
ªq
.
n
.
∆msg_£q
 = 
πh
.
dump
 = ++πh.
£q
;

451 i‡(
cmd
 =
RTM_GETACTION
)

452 
™s
 = &
ªq
.
n
;

454 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 0, 0, 
™s
, 
NULL
, NULL) < 0) {

455 
	`Ârötf
(
°dîr
, "We haveánÉrrorÅalkingÅoÅhe kernel\n");

459 i‡(
™s
 && 
	`¥öt_a˘i⁄
(
NULL
, &
ªq
.
n
, (*)
°dout
) < 0) {

460 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

464 *
¨gc_p
 = 
¨gc
;

465 *
¨gv_p
 = 
¨gv
;

466 
bad_vÆ
:

467  
ªt
;

468 
	}
}

470 
	$tc_a˘i⁄_modify
(
cmd
, 
Êags
, *
¨gc_p
, ***
¨gv_p
)

472 
¨gc
 = *
¨gc_p
;

473 **
¨gv
 = *
¨gv_p
;

474 
ªt
 = 0;

476 
π©å
 *
èû
;

478 
∆msghdr
 
n
;

479 
tˇmsg
 
t
;

480 
buf
[
MAX_MSG
];

481 } 
ªq
;

483 
ªq
.
t
.
tˇ_Ámûy
 = 
AF_UNSPEC
;

485 
	`mem£t
(&
ªq
, 0, (req));

487 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tˇmsg
));

488 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

489 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

490 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

491 
¨gc
 -=1;

492 
¨gv
 +=1;

493 i‡(
	`∑r£_a˘i⁄
(&
¨gc
, &
¨gv
, 
TCA_ACT_TAB
, &
ªq
.
n
)) {

494 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

497 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail;

499 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 0, 0, 
NULL
, NULL, NULL) < 0) {

500 
	`Ârötf
(
°dîr
, "We haveánÉrrorÅalkingÅoÅhe kernel\n");

501 
ªt
 = -1;

504 *
¨gc_p
 = 
¨gc
;

505 *
¨gv_p
 = 
¨gv
;

507  
ªt
;

508 
	}
}

510 
	$tc_a˘_li°_‹_Êush
(
¨gc
, **
¨gv
, 
evít
)

512 
ªt
 = 0, 
¥io
 = 0, 
msg_size
 = 0;

513 
k
[16];

514 
π©å
 *
èû
,*
èû2
;

515 
a˘i⁄_utû
 *
a
 = 
NULL
;

517 
∆msghdr
 
n
;

518 
tˇmsg
 
t
;

519 
buf
[
MAX_MSG
];

520 } 
ªq
;

522 
ªq
.
t
.
tˇ_Ámûy
 = 
AF_UNSPEC
;

524 
	`mem£t
(&
ªq
, 0, (req));

526 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tˇmsg
));

528 
èû
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

529 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_TAB
, 
NULL
, 0);

530 
èû2
 = 
	`NLMSG_TAIL
(&
ªq
.
n
);

532 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

533 #ifde‡
CONFIG_GACT


534 i‡(!
ga˘_ld
) {

535 
	`gë_a˘i⁄_köd
("gact");

538 
a
 = 
	`gë_a˘i⁄_köd
(
k
);

539 i‡(
NULL
 =
a
) {

540 
	`Ârötf
(
°dîr
,"badá˘i⁄ %s\n",
k
);

541 
bad_vÆ
;

543 i‡(
	`°rcmp
(
a
->
id
, 
k
) != 0) {

544 
	`Ârötf
(
°dîr
,"badá˘i⁄ %s\n",
k
);

545 
bad_vÆ
;

547 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

549 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, ++
¥io
, 
NULL
, 0);

550 
	`add©å_l
(&
ªq
.
n
, 
MAX_MSG
, 
TCA_ACT_KIND
, 
k
, 
	`°æí
(k) + 1);

551 
èû2
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail2;

552 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(&
ªq
.
n
) - (*)Åail;

554 
msg_size
 = 
	`NLMSG_ALIGN
(
ªq
.
n
.
∆msg_Àn
Ë- NLMSG_ALIGN((
∆msghdr
));

556 i‡(
evít
 =
RTM_GETACTION
) {

557 i‡(
	`π∆_dump_ªque°
(&
πh
, 
evít
, (*)&
ªq
.
t
, 
msg_size
) < 0) {

558 
	`≥º‹
("Cannot send dumpÑequest");

561 
ªt
 = 
	`π∆_dump_fûãr
(&
πh
, 
¥öt_a˘i⁄
, 
°dout
, 
NULL
, NULL);

564 i‡(
evít
 =
RTM_DELACTION
) {

565 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_ALIGN
(req.n.nlmsg_len);

566 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_DELACTION
;

567 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_ROOT
;

568 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_REQUEST
;

569 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 0, 0, 
NULL
, NULL, NULL) < 0) {

570 
	`Ârötf
(
°dîr
, "We haveánÉrror flushing\n");

576 
bad_vÆ
:

578  
ªt
;

579 
	}
}

581 
	$do_a˘i⁄
(
¨gc
, **
¨gv
)

584 
ªt
 = 0;

586 
¨gc
 > 0) {

588 i‡(
	`m©ches
(*
¨gv
, "add") == 0) {

589 
ªt
 = 
	`tc_a˘i⁄_modify
(
RTM_NEWACTION
, 
NLM_F_EXCL
|
NLM_F_CREATE
, &
¨gc
, &
¨gv
);

590 } i‡(
	`m©ches
(*
¨gv
, "change") == 0 ||

591 
	`m©ches
(*
¨gv
, "replace") == 0) {

592 
ªt
 = 
	`tc_a˘i⁄_modify
(
RTM_NEWACTION
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, &
¨gc
, &
¨gv
);

593 } i‡(
	`m©ches
(*
¨gv
, "delete") == 0) {

594 
¨gc
 -=1;

595 
¨gv
 +=1;

596 
ªt
 = 
	`tc_a˘i⁄_gd
(
RTM_DELACTION
, 0, &
¨gc
, &
¨gv
);

597 } i‡(
	`m©ches
(*
¨gv
, "get") == 0) {

598 
¨gc
 -=1;

599 
¨gv
 +=1;

600 
ªt
 = 
	`tc_a˘i⁄_gd
(
RTM_GETACTION
, 0, &
¨gc
, &
¨gv
);

601 } i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

602 || 
	`m©ches
(*
¨gv
, "lst") == 0) {

603 i‡(
¨gc
 <= 2) {

604 
	`a˘_ußge
();

607  
	`tc_a˘_li°_‹_Êush
(
¨gc
-2, 
¨gv
+2, 
RTM_GETACTION
);

608 } i‡(
	`m©ches
(*
¨gv
, "flush") == 0) {

609 i‡(
¨gc
 <= 2) {

610 
	`a˘_ußge
();

613  
	`tc_a˘_li°_‹_Êush
(
¨gc
-2, 
¨gv
+2, 
RTM_DELACTION
);

614 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

615 
	`a˘_ußge
();

619 
ªt
 = -1;

622 i‡(
ªt
 < 0) {

623 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯a˘i⁄†hñp\".\n", *
¨gv
);

629 
	}
}

	@m_ematch.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<sy¶og.h
>

16 
	~<f˙é.h
>

17 
	~<sys/sockë.h
>

18 
	~<√töë/ö.h
>

19 
	~<¨∑/öë.h
>

20 
	~<°rög.h
>

21 
	~<dlf˙.h
>

22 
	~<°d¨g.h
>

23 
	~<î∫o.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~"m_em©ch.h
"

29 
	#EMATCH_MAP
 "/ëc/ùrouã2/em©ch_m≠"

	)

31 
em©ch_utû
 *
	gem©ch_li°
;

34 
	gem©ch_¨gc
;

35 **
	gem©ch_¨gv
;

36 *
	gem©ch_îr
 = 
NULL
;

37 
em©ch
 *
	gem©ch_roŸ
;

39 
	gbegö_¨gc
;

40 **
	gbegö_¨gv
;

42 
ölöe
 
	$m≠_w¨nög
(
num
, *
köd
)

44 
	`Ârötf
(
°dîr
,

49 
köd
, 
EMATCH_MAP
, 
num
, kind);

50 
	}
}

52 
	$lookup_m≠
(
__u16
 
num
, *
d°
, 
Àn
, c⁄° *
fûe
)

54 
îr
 = -
EINVAL
;

55 
buf
[512];

56 
FILE
 *
fd
 = 
	`f›í
(
fûe
, "r");

58 i‡(
fd
 =
NULL
)

59  -
î∫o
;

61 
	`fgës
(
buf
, (buf), 
fd
)) {

62 
«mebuf
[512], *
p
 = 
buf
;

63 
id
;

65 *
p
 == ' ' || *p == '\t')

66 
p
++;

67 i‡(*
p
 == '#' || *p == '\n' || *p == 0)

70 i‡(
	`ssˇnf
(
p
, "%d %s", &
id
, 
«mebuf
) != 2) {

71 
	`Ârötf
(
°dîr
, "ematch map %s corruptedát %s\n",

72 
fûe
, 
p
);

73 
out
;

76 i‡(
id
 =
num
) {

77 i‡(
d°
)

78 
	`°∫˝y
(
d°
, 
«mebuf
, 
Àn
 - 1);

79 
îr
 = 0;

80 
out
;

84 
îr
 = -
ENOENT
;

85 
out
:

86 
	`f˛o£
(
fd
);

87  
îr
;

88 
	}
}

90 
	$lookup_m≠_id
(*
köd
, *
d°
, c⁄° *
fûe
)

92 
îr
 = -
EINVAL
;

93 
buf
[512];

94 
FILE
 *
fd
 = 
	`f›í
(
fûe
, "r");

96 i‡(
fd
 =
NULL
)

97  -
î∫o
;

99 
	`fgës
(
buf
, (buf), 
fd
)) {

100 
«mebuf
[512], *
p
 = 
buf
;

101 
id
;

103 *
p
 == ' ' || *p == '\t')

104 
p
++;

105 i‡(*
p
 == '#' || *p == '\n' || *p == 0)

108 i‡(
	`ssˇnf
(
p
, "%d %s", &
id
, 
«mebuf
) != 2) {

109 
	`Ârötf
(
°dîr
, "ematch map %s corruptedát %s\n",

110 
fûe
, 
p
);

111 
out
;

114 i‡(!
	`°rˇ£cmp
(
«mebuf
, 
köd
)) {

115 i‡(
d°
)

116 *
d°
 = 
id
;

117 
îr
 = 0;

118 
out
;

122 
îr
 = -
ENOENT
;

123 *
d°
 = 0;

124 
out
:

125 
	`f˛o£
(
fd
);

126  
îr
;

127 
	}
}

129 
em©ch_utû
 *
	$gë_em©ch_köd
(*
köd
)

131 *
body
;

132 *
dlh
;

133 
buf
[256];

134 
em©ch_utû
 *
e
;

136 
e
 = 
em©ch_li°
;É;É =É->
√xt
) {

137 i‡(
	`°rcmp
(
e
->
köd
, kind) == 0)

138  
e
;

141 
	`¢¥ötf
(
buf
, (buf), "em_%s.so", 
köd
);

142 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

143 i‡(
dlh
 =
NULL
) {

144 
dlh
 = 
body
;

145 i‡(
dlh
 =
NULL
) {

146 
dlh
 = 
body
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

147 i‡(
dlh
 =
NULL
)

148  
NULL
;

152 
	`¢¥ötf
(
buf
, (buf), "%s_em©ch_utû", 
köd
);

153 
e
 = 
	`dlsym
(
dlh
, 
buf
);

154 i‡(
e
 =
NULL
)

155  
NULL
;

157 
e
->
√xt
 = 
em©ch_li°
;

158 
em©ch_li°
 = 
e
;

160  
e
;

161 
	}
}

163 
em©ch_utû
 *
	$gë_em©ch_köd_num
(
__u16
 
köd
)

165 
«me
[32];

167 i‡(
	`lookup_m≠
(
köd
, 
«me
, “ame), 
EMATCH_MAP
) < 0)

168  
NULL
;

170  
	`gë_em©ch_köd
(
«me
);

172  
NULL
;

173 
	}
}

175 
	$∑r£_åì
(
∆msghdr
 *
n
, 
em©ch
 *
åì
)

177 
ödex
 = 1;

178 
em©ch
 *
t
;

180 
t
 = 
åì
;Å;Å =Å->
√xt
) {

181 
π©å
 *
èû
 = 
	`NLMSG_TAIL
(
n
);

182 
tcf_em©ch_hdr
 
hdr
 = {

183 .
Êags
 = 
t
->
ªœti⁄


186 i‡(
t
->
övîãd
)

187 
hdr
.
Êags
 |
TCF_EM_INVERT
;

189 
	`add©å_l
(
n
, 
MAX_MSG
, 
ödex
++, 
NULL
, 0);

191 i‡(
t
->
chûd
) {

192 
__u32
 
r
 = 
t
->
chûd_ªf
;

193 
	`addøw_l
(
n
, 
MAX_MSG
, &
hdr
, (hdr));

194 
	`addøw_l
(
n
, 
MAX_MSG
, &
r
, (r));

196 
num
 = 0, 
îr
;

197 
buf
[64];

198 
em©ch_utû
 *
e
;

200 i‡(
t
->
¨gs
 =
NULL
)

203 
	`°∫˝y
(
buf
, (*Ë
t
->
¨gs
->
d©a
, (buf)-1);

204 
e
 = 
	`gë_em©ch_köd
(
buf
);

205 i‡(
e
 =
NULL
) {

206 
	`Ârötf
(
°dîr
, "UnknownÉmatch \"%s\"\n",

207 
buf
);

211 
îr
 = 
	`lookup_m≠_id
(
buf
, &
num
, 
EMATCH_MAP
);

212 i‡(
îr
 < 0) {

213 i‡(
îr
 =-
ENOENT
)

214 
	`m≠_w¨nög
(
e
->
köd_num
, 
buf
);

215  
îr
;

218 
hdr
.
köd
 = 
num
;

219 i‡(
e
->
	`∑r£_e›t
(
n
, &
hdr
, 
t
->
¨gs
->
√xt
) < 0)

223 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

227 
	}
}

229 
	$Ê©ãn_åì
(
em©ch
 *
hód
, em©ch *
åì
)

231 
i
, 
cou¡
 = 0;

232 
em©ch
 *
t
;

235 
cou¡
++;

237 i‡(
åì
->
chûd
) {

238 
t
 = 
hód
;Å->
√xt
;Å =Å->next);

239 
t
->
√xt
 = 
åì
->
chûd
;

240 
cou¡
 +
	`Ê©ãn_åì
(
hód
, 
åì
->
chûd
);

243 i‡(
åì
->
ªœti⁄
 == 0)

246 
åì
 =Åªe->
√xt
;

249 
i
 = 0, 
t
 = 
hód
;Å;Å =Å->
√xt
, i++)

250 
t
->
ödex
 = 
i
;

252 
t
 = 
hód
;Å;Å =Å->
√xt
)

253 i‡(
t
->
chûd
)

254 
t
->
chûd_ªf
 =Å->
chûd
->
ödex
;

256  
cou¡
;

257 
	}
}

259 
	$em_∑r£_îr‹
(
îr
, 
b°r
 *
¨gs
, b°∏*
ˇrg
,

260 
em©ch_utû
 *
e
, *
fmt
, ...)

262 
va_li°
 
a
;

264 
	`va_°¨t
(
a
, 
fmt
);

265 
	`vÂrötf
(
°dîr
, 
fmt
, 
a
);

266 
	`va_íd
(
a
);

268 i‡(
em©ch_îr
)

269 
	`Ârötf
(
°dîr
, ": %s\n... ", 
em©ch_îr
);

271 
	`Ârötf
(
°dîr
, "\n... ");

273 
em©ch_¨gc
 < 
begö_¨gc
) {

274 i‡(
em©ch_¨gc
 =(
begö_¨gc
 - 1))

275 
	`Ârötf
(
°dîr
, ">>%s<< ", *
begö_¨gv
);

277 
	`Ârötf
(
°dîr
, "%†", *
begö_¨gv
);

278 
begö_¨gv
++;

279 
begö_¨gc
--;

282 
	`Ârötf
(
°dîr
, "...\n");

284 i‡(
¨gs
) {

285 
	`Ârötf
(
°dîr
, "... %s(", 
e
->
köd
);

286 
¨gs
) {

287 
	`Ârötf
(
°dîr
, "%s", 
¨gs
 =
ˇrg
 ? ">>" : "");

288 
	`b°r_¥öt
(
°dîr
, 
¨gs
, 1);

289 
	`Ârötf
(
°dîr
, "%s%s", 
¨gs
 =
ˇrg
 ? "<<" : "",

290 
¨gs
->
√xt
 ? " " : "");

291 
¨gs
 =árgs->
√xt
;

293 
	`Ârötf
(
°dîr
, ")...\n");

297 i‡(
e
 =
NULL
) {

298 
	`Ârötf
(
°dîr
,

307 
e
->
	`¥öt_ußge
(
°dîr
);

309  -
îr
;

310 
	}
}

312 
ölöe
 
	$‰ì_em©ch_îr
()

314 i‡(
em©ch_îr
) {

315 
	`‰ì
(
em©ch_îr
);

316 
em©ch_îr
 = 
NULL
;

318 
	}
}

320 
em©ch_∑r£
();

322 
	$∑r£_em©ch
(*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

324 
begö_¨gc
 = 
em©ch_¨gc
 = *
¨gc_p
;

325 
begö_¨gv
 = 
em©ch_¨gv
 = *
¨gv_p
;

327 i‡(
	`em©ch_∑r£
()) {

328 
îr
 = 
	`em_∑r£_îr‹
(
EINVAL
, 
NULL
, NULL, NULL,

330 
	`‰ì_em©ch_îr
();

331  
îr
;

334 
	`‰ì_em©ch_îr
();

337 
em©ch_¨gc
++;

338 
em©ch_¨gv
--;

340 i‡(
em©ch_roŸ
) {

341 
π©å
 *
èû
, *
èû_li°
;

343 
tcf_em©ch_åì_hdr
 
hdr
 = {

344 .
nm©ches
 = 
	`Ê©ãn_åì
(
em©ch_roŸ
,Ématch_root),

345 .
¥ogid
 = 
TCF_EM_PROG_TC


348 
èû
 = 
	`NLMSG_TAIL
(
n
);

349 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

350 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_EMATCH_TREE_HDR
, &
hdr
, (hdr));

352 
èû_li°
 = 
	`NLMSG_TAIL
(
n
);

353 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_EMATCH_TREE_LIST
, 
NULL
, 0);

355 i‡(
	`∑r£_åì
(
n
, 
em©ch_roŸ
) < 0)

358 
èû_li°
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail_list;

359 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

362 *
¨gc_p
 = 
em©ch_¨gc
;

363 *
¨gv_p
 = 
em©ch_¨gv
;

366 
	}
}

368 
	$¥öt_em©ch_£q
(
FILE
 *
fd
, 
π©å
 **
tb
, 
°¨t
,

369 
¥efix
)

371 
n
, 
i
 = 
°¨t
;

372 
tcf_em©ch_hdr
 *
hdr
;

373 
dÀn
;

374 *
d©a
;

377 i‡(
tb
[
i
] =
NULL
)

380 
dÀn
 = 
	`RTA_PAYLOAD
(
tb
[
i
]Ë- (*
hdr
);

381 
d©a
 = (*Ë
	`RTA_DATA
(
tb
[
i
]Ë+ (*
hdr
);

383 i‡(
dÀn
 < 0)

386 
hdr
 = 
	`RTA_DATA
(
tb
[
i
]);

388 i‡(
hdr
->
Êags
 & 
TCF_EM_INVERT
)

389 
	`Ârötf
(
fd
, "NOT ");

391 i‡(
hdr
->
köd
 == 0) {

392 
__u32
 
ªf
;

394 i‡(
dÀn
 < (
__u32
))

397 
ªf
 = *(
__u32
 *Ë
d©a
;

398 
	`Ârötf
(
fd
, "(\n");

399 
n
 = 0;Ç <
¥efix
;Ç++)

400 
	`Ârötf
(
fd
, " ");

401 i‡(
	`¥öt_em©ch_£q
(
fd
, 
tb
, 
ªf
 + 1, 
¥efix
 + 1) < 0)

403 
n
 = 0;Ç < 
¥efix
;Ç++)

404 
	`Ârötf
(
fd
, " ");

405 
	`Ârötf
(
fd
, ") ");

408 
em©ch_utû
 *
e
;

410 
e
 = 
	`gë_em©ch_köd_num
(
hdr
->
köd
);

411 i‡(
e
 =
NULL
)

412 
	`Ârötf
(
fd
, "[unknownÉmatch %d]\n",

413 
hdr
->
köd
);

415 
	`Ârötf
(
fd
, "%s(", 
e
->
köd
);

416 i‡(
e
->
	`¥öt_e›t
(
fd
, 
hdr
, 
d©a
, 
dÀn
) < 0)

418 
	`Ârötf
(
fd
, ")\n");

420 i‡(
hdr
->
Êags
 & 
TCF_EM_REL_MASK
)

421 
n
 = 0;Ç < 
¥efix
;Ç++)

422 
	`Ârötf
(
fd
, " ");

425 
hdr
->
Êags
 & 
TCF_EM_REL_MASK
) {

426 
TCF_EM_REL_AND
:

427 
	`Ârötf
(
fd
, "AND ");

430 
TCF_EM_REL_OR
:

431 
	`Ârötf
(
fd
, "OR ");

438 
i
++;

442 
	}
}

444 
	$¥öt_em©ch_li°
(
FILE
 *
fd
, 
tcf_em©ch_åì_hdr
 *
hdr
,

445 
π©å
 *
πa
)

447 
îr
 = -1;

448 
π©å
 **
tb
;

450 
tb
 = 
	`mÆloc
((
hdr
->
nm©ches
 + 1Ë* (
π©å
 *));

451 i‡(
tb
 =
NULL
)

454 i‡(
	`∑r£_π©å_√°ed
(
tb
, 
hdr
->
nm©ches
, 
πa
) < 0)

455 
îrout
;

457 
	`Ârötf
(
fd
, "\n ");

458 i‡(
	`¥öt_em©ch_£q
(
fd
, 
tb
, 1, 1) < 0)

459 
îrout
;

461 
îr
 = 0;

462 
îrout
:

463 
	`‰ì
(
tb
);

464  
îr
;

465 
	}
}

467 
	$¥öt_em©ch
(
FILE
 *
fd
, c⁄° 
π©å
 *
πa
)

469 
π©å
 *
tb
[
TCA_EMATCH_TREE_MAX
+1];

470 
tcf_em©ch_åì_hdr
 *
hdr
;

472 i‡(
	`∑r£_π©å_√°ed
(
tb
, 
TCA_EMATCH_TREE_MAX
, 
πa
) < 0)

475 i‡(
tb
[
TCA_EMATCH_TREE_HDR
] =
NULL
) {

476 
	`Ârötf
(
°dîr
, "MissingÉmatchÅree header\n");

480 i‡(
tb
[
TCA_EMATCH_TREE_LIST
] =
NULL
) {

481 
	`Ârötf
(
°dîr
, "MissingÉmatchÅreeÜist\n");

485 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_EMATCH_TREE_HDR
]Ë< (*
hdr
)) {

486 
	`Ârötf
(
°dîr
, "EmatchÅree header size mismatch\n");

490 
hdr
 = 
	`RTA_DATA
(
tb
[
TCA_EMATCH_TREE_HDR
]);

492  
	`¥öt_em©ch_li°
(
fd
, 
hdr
, 
tb
[
TCA_EMATCH_TREE_LIST
]);

493 
	}
}

	@m_ematch.h

1 #i‚de‡
__TC_EMATCH_H_


2 
	#__TC_EMATCH_H_


	)

4 
	~<˘y≥.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

8 
	~"utûs.h
"

9 
	~"tc_utû.h
"

11 
	#EMATCHKINDSIZ
 16

	)

13 
	sb°r


15 *
	md©a
;

16 
	mÀn
;

17 
	mquŸed
;

18 
b°r
 *
	m√xt
;

21 
ölöe
 
b°r
 * 
	$b°r_Æloc
(c⁄° *
ãxt
)

23 
b°r
 *
b
 = 
	`ˇŒoc
(1, (*b));

25 i‡(
b
 =
NULL
)

26  
NULL
;

28 
b
->
d©a
 = 
	`°rdup
(
ãxt
);

29 i‡(
b
->
d©a
 =
NULL
) {

30 
	`‰ì
(
b
);

31  
NULL
;

34 
b
->
Àn
 = 
	`°æí
(
ãxt
);

36  
b
;

37 
	}
}

39 
ölöe
 
b°r
 * 
	$b°r_√w
(*
d©a
, 
Àn
)

41 
b°r
 *
b
 = 
	`ˇŒoc
(1, (*b));

43 i‡(
b
 =
NULL
)

44  
NULL
;

46 
b
->
d©a
 = data;

47 
b
->
Àn
 =Üen;

49  
b
;

50 
	}
}

52 
ölöe
 
	$b°rcmp
(
b°r
 *
b
, c⁄° *
ãxt
)

54 
Àn
 = 
	`°æí
(
ãxt
);

55 
d
 = 
b
->
Àn
 -Üen;

57 i‡(
d
 == 0)

58  
	`°∫cmp
(
b
->
d©a
, 
ãxt
, 
Àn
);

60  
d
;

61 
	}
}

63 
ölöe
 
	$b°πoul
(
b°r
 *
b
)

65 *
öv
 = 
NULL
;

66 
l
;

67 
buf
[
b
->
Àn
+1];

69 
	`mem˝y
(
buf
, 
b
->
d©a
, b->
Àn
);

70 
buf
[
b
->
Àn
] = '\0';

72 
l
 = 
	`°πﬁ
(
buf
, &
öv
, 0);

73 i‡(
l
 =
ULONG_MAX
 || 
öv
 =
buf
)

74  
LONG_MAX
;

76  
l
;

77 
	}
}

79 
ölöe
 
	$b°r_¥öt
(
FILE
 *
fd
, 
b°r
 *
b
, 
ascii
)

81 
i
;

82 *
s
 = 
b
->
d©a
;

84 i‡(
ascii
)

85 
i
 = 0; i < 
b
->
Àn
; i++)

86 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
s
[
i
]) ? s[i] : '.');

88 
i
 = 0; i < 
b
->
Àn
; i++)

89 
	`Ârötf
(
fd
, "%02x", 
s
[
i
]);

90 
	`Ârötf
(
fd
, "\"");

91 
i
 = 0; i < 
b
->
Àn
; i++)

92 
	`Ârötf
(
fd
, "%c", 
	`i•röt
(
s
[
i
]) ? s[i] : '.');

93 
	`Ârötf
(
fd
, "\"");

95 
	}
}

97 
ölöe
 
b°r
 *
	$b°r_√xt
(
b°r
 *
b
)

99  
b
->
√xt
;

100 
	}
}

102 
	sem©ch


104 
b°r
 *
	m¨gs
;

105 
	mödex
;

106 
	mövîãd
;

107 
	mªœti⁄
;

108 
	mchûd_ªf
;

109 
em©ch
 *
	mchûd
;

110 
em©ch
 *
	m√xt
;

113 
ölöe
 
em©ch
 * 
	$√w_em©ch
(
b°r
 *
¨gs
, 
övîãd
)

115 
em©ch
 *
e
 = 
	`ˇŒoc
(1, (*e));

117 i‡(
e
 =
NULL
)

118  
NULL
;

120 
e
->
¨gs
 =árgs;

121 
e
->
övîãd
 = inverted;

123  
e
;

124 
	}
}

126 
ölöe
 
	$¥öt_em©ch_åì
(
em©ch
 *
åì
)

128 
em©ch
 *
t
;

130 
t
 = 
åì
;Å;Å =Å->
√xt
) {

131 i‡(
t
->
övîãd
)

132 
	`¥ötf
("NOT ");

134 i‡(
t
->
chûd
) {

135 
	`¥ötf
("(");

136 
	`¥öt_em©ch_åì
(
t
->
chûd
);

137 
	`¥ötf
(")");

139 
b°r
 *
b
;

140 
b
 = 
t
->
¨gs
; b; b = b->
√xt
)

141 
	`¥ötf
("%s%s", 
b
->
d©a
, b->
√xt
 ? " " : "");

144 i‡(
t
->
ªœti⁄
 =
TCF_EM_REL_AND
)

145 
	`¥ötf
(" AND ");

146 i‡(
t
->
ªœti⁄
 =
TCF_EM_REL_OR
)

147 
	`¥ötf
(" OR ");

149 
	}
}

151 
	sem©ch_utû


153 
	mköd
[
EMATCHKINDSIZ
];

154 
	mköd_num
;

155 (*
	m∑r£_e›t
)(
	m∆msghdr
 *,
	mtcf_em©ch_hdr
 *,

156 
	mb°r
 *);

157 (*
	m¥öt_e›t
)(
	mFILE
 *, 
	mtcf_em©ch_hdr
 *, *, );

158 (*
	m¥öt_ußge
)(
	mFILE
 *);

159 
em©ch_utû
 *
	m√xt
;

162 
ölöe
 
	$∑r£_œyî
(
b°r
 *
b
)

164 i‡(*((*Ë
b
->
d©a
) == 'l')

165  
TCF_LAYER_LINK
;

166 i‡(*((*Ë
b
->
d©a
) == 'n')

167  
TCF_LAYER_NETWORK
;

168 i‡(*((*Ë
b
->
d©a
) == 't')

169  
TCF_LAYER_TRANSPORT
;

171  
INT_MAX
;

172 
	}
}

174 
em_∑r£_îr‹
(
îr
, 
b°r
 *
¨gs
, b°∏*
ˇrg
,

175 
em©ch_utû
 *, *
fmt
, ...);

176 
¥öt_em©ch
(
FILE
 *, c⁄° 
π©å
 *);

177 
∑r£_em©ch
(*, ***, , 
∆msghdr
 *);

	@m_estimator.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
e°_hñp
();

28 
	$e°_hñp
()

30 
	`Ârötf
(
°dîr
, "Usage: ...Éstimator INTERVAL TIME-CONST\n");

31 
	`Ârötf
(
°dîr
, " INTERVAL is interval between measurements\n");

32 
	`Ârötf
(
°dîr
, " TIME-CONST isáveragingÅime constant\n");

33 
	`Ârötf
(
°dîr
, "Example: ...Ést 1sec 8sec\n");

35 
	}
}

37 
	$∑r£_e°im©‹
(*
p_¨gc
, ***
p_¨gv
, 
tc_e°im©‹
 *
e°
)

39 
¨gc
 = *
p_¨gc
;

40 **
¨gv
 = *
p_¨gv
;

41 
A
, 
time_c⁄°
;

43 
	`NEXT_ARG
();

44 i‡(
e°
->
ewma_log
)

45 
	`du∑rg
("e°im©‹", *
¨gv
);

46 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

47 
	`e°_hñp
();

48 i‡(
	`gë_time
(&
A
, *
¨gv
))

49 
	`öv¨g
("estimator", "invalidÉstimator interval");

50 
	`NEXT_ARG
();

51 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

52 
	`e°_hñp
();

53 i‡(
	`gë_time
(&
time_c⁄°
, *
¨gv
))

54 
	`öv¨g
("estimator", "invalidÉstimatorÅime constant");

55 i‡(
	`tc_£tup_e°im©‹
(
A
, 
time_c⁄°
, 
e°
) < 0) {

56 
	`Ârötf
(
°dîr
, "Error:ÉstimatorÖarametersáre out ofÑange.\n");

59 i‡(
show_øw
)

60 
	`Ârötf
(
°dîr
, "[e°im©‹ i=%uÉ=%u]\n", 
e°
->
öãrvÆ
,É°->
ewma_log
);

61 *
p_¨gc
 = 
¨gc
;

62 *
p_¨gv
 = 
¨gv
;

64 
	}
}

	@m_gact.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

25 
	~<löux/tc_a˘/tc_ga˘.h
>

29 #ifde‡
CONFIG_GACT_PROB


30 c⁄° *
	$¥ob_n2a
(
p
)

32 i‡(
p
 =
PGACT_NONE
)

34 i‡(
p
 =
PGACT_NETRAND
)

36 i‡(
p
 =
PGACT_DETERM
)

39 
	}
}

43 
	$ex∂aö
()

45 #ifde‡
CONFIG_GACT_PROB


46 
	`Ârötf
(
°dîr
, "Usage: ... gact <ACTION> [RAND] [INDEX]\n");

47 
	`Ârötf
(
°dîr
,

55 
	`Ârötf
(
°dîr
, "Usage: ... gact <ACTION> [INDEX]\n");

56 
	`Ârötf
(
°dîr
,

61 
	}
}

65 
	$ußge
()

67 
	`ex∂aö
();

68 
	`exô
(-1);

69 
	}
}

72 
	$gë_a˘
(***
¨gv_p
)

74 **
¨gv
 = *
¨gv_p
;

76 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

77  
TC_ACT_RECLASSIFY
;

78 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 || matches(*argv, "shot") == 0) {

79  
TC_ACT_SHOT
;

80 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

81  
TC_ACT_UNSPEC
;

82 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

83  
TC_ACT_PIPE
;

84 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0 || matches(*argv, "ok") == 0) {

85  
TC_ACT_OK
;

87 
	`Ârötf
(
°dîr
,"badá˘i⁄Åy≥ %s\n",*
¨gv
);

90 
	}
}

93 
	$∑r£_ga˘
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

95 
¨gc
 = *
¨gc_p
;

96 **
¨gv
 = *
¨gv_p
;

97 
ok
 = 0;

98 
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

99 
tc_ga˘
 
p
;

100 #ifde‡
CONFIG_GACT_PROB


101 
rd
 = 0;

102 
tc_ga˘_p
 
µ
;

104 
π©å
 *
èû
;

106 
	`mem£t
(&
p
, 0,  (p));

107 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

109 i‡(
¨gc
 < 0)

113 i‡(
	`m©ches
(*
¨gv
, "gact") == 0) {

114 
ok
++;

116 
a˘i⁄
 = 
	`gë_a˘
(&
¨gv
);

117 i‡(
a˘i⁄
 != -10) {

118 
p
.
a˘i⁄
 =áction;

119 
ok
++;

121 
	`ex∂aö
();

122  
a˘i⁄
;

126 i‡(
ok
) {

127 
¨gc
--;

128 
¨gv
++;

131 #ifde‡
CONFIG_GACT_PROB


132 i‡(
ok
 && 
¨gc
 > 0) {

133 i‡(
	`m©ches
(*
¨gv
, "random") == 0) {

134 
rd
 = 1;

135 
	`NEXT_ARG
();

136 i‡(
	`m©ches
(*
¨gv
, "netrand") == 0) {

137 
	`NEXT_ARG
();

138 
µ
.
±y≥
 = 
PGACT_NETRAND
;

139 } i‡(
	`m©ches
(*
¨gv
, "determ") == 0) {

140 
	`NEXT_ARG
();

141 
µ
.
±y≥
 = 
PGACT_DETERM
;

143 
	`Ârötf
(
°dîr
, "Illegal \"randomÅype\"\n");

147 
a˘i⁄
 = 
	`gë_a˘
(&
¨gv
);

148 i‡(
a˘i⁄
 != -10) {

149 
µ
.
∑˘i⁄
 = 
a˘i⁄
;

151 
	`ex∂aö
();

154 
¨gc
--;

155 
¨gv
++;

156 i‡(
	`gë_u16
(&
µ
.
pvÆ
, *
¨gv
, 10)) {

157 
	`Ârötf
(
°dîr
, "IŒegÆÖrobabûôy vÆ 0x%x\n",
µ
.
pvÆ
);

160 i‡(
µ
.
pvÆ
 > 10000) {

161 
	`Ârötf
(
°dîr
, "IŒegÆÖrobabûôy vÆ 0x%x\n",
µ
.
pvÆ
);

164 
¨gc
--;

165 
¨gv
++;

166 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

167 
	`ußge
();

172 i‡(
¨gc
 > 0) {

173 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

174 
	`NEXT_ARG
();

175 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

176 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

179 
¨gc
--;

180 
¨gv
++;

181 
ok
++;

182 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

183 
	`ußge
();

187 i‡(!
ok
)

190 
èû
 = 
	`NLMSG_TAIL
(
n
);

191 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

192 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_GACT_PARMS
, &
p
,  (p));

193 #ifde‡
CONFIG_GACT_PROB


194 i‡(
rd
) {

195 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_GACT_PROB
, &
µ
,  (pp));

198 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

200 *
¨gc_p
 = 
¨gc
;

201 *
¨gv_p
 = 
¨gv
;

203 
	}
}

206 
	$¥öt_ga˘
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

208 
	`SPRINT_BUF
(
b1
);

209 #ifde‡
CONFIG_GACT_PROB


210 
	`SPRINT_BUF
(
b2
);

211 
tc_ga˘_p
 *
µ
 = 
NULL
;

212 
tc_ga˘_p
 
µ_dummy
;

214 
tc_ga˘
 *
p
 = 
NULL
;

215 
π©å
 *
tb
[
TCA_GACT_MAX
 + 1];

217 i‡(
¨g
 =
NULL
)

220 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_GACT_MAX
, 
¨g
);

222 i‡(
tb
[
TCA_GACT_PARMS
] =
NULL
) {

223 
	`Ârötf
(
f
, "[NULL gactÖarameters]");

226 
p
 = 
	`RTA_DATA
(
tb
[
TCA_GACT_PARMS
]);

228 
	`Ârötf
(
f
, "ga˘á˘i⁄ %s", 
	`a˘i⁄_n2a
(
p
->
a˘i⁄
, 
b1
,  (b1)));

229 #ifde‡
CONFIG_GACT_PROB


230 i‡(
NULL
 !
tb
[
TCA_GACT_PROB
]) {

231 
µ
 = 
	`RTA_DATA
(
tb
[
TCA_GACT_PROB
]);

234 
	`mem£t
(&
µ_dummy
, 0,  (pp_dummy));

235 
µ
 = &
µ_dummy
;

237 
	`Ârötf
(
f
, "\n\àøndomÅy≥ %†%†vÆ %d",
	`¥ob_n2a
(
µ
->
±y≥
), 
	`a˘i⁄_n2a
’p->
∑˘i⁄
, 
b2
,  (b2)),Öp->
pvÆ
);

239 
	`Ârötf
(
f
, "\n\àödex %dÑe‡%d böd %d",
p
->
ödex
,Ö->
ªf˙t
,Ö->
böd˙t
);

240 i‡(
show_°©s
) {

241 i‡(
tb
[
TCA_GACT_TM
]) {

242 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_GACT_TM
]);

243 
	`¥öt_tm
(
f
,
tm
);

246 
	`Ârötf
(
f
, "\n ");

248 
	}
}

250 
a˘i⁄_utû
 
	gga˘_a˘i⁄_utû
 = {

251 .
id
 = "gact",

252 .
	g∑r£_a›t
 = 
∑r£_ga˘
,

253 .
	g¥öt_a›t
 = 
¥öt_ga˘
,

	@m_ipt.c

13 
	~<sy¶og.h
>

14 
	~<sys/sockë.h
>

15 
	~<√töë/ö.h
>

16 
	~<¨∑/öë.h
>

17 
	~<ùèbÀs.h
>

18 
	~<löux/√tfûãr_ùv4/ù_èbÀs.h
>

19 
	~"utûs.h
"

20 
	~"tc_utû.h
"

21 
	~<löux/tc_a˘/tc_ùt.h
>

22 
	~<°dio.h
>

23 
	~<dlf˙.h
>

24 
	~<gë›t.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<√tdb.h
>

28 
	~<°dlib.h
>

29 
	~<˘y≥.h
>

30 
	~<°d¨g.h
>

31 
	~<limôs.h
>

32 
	~<uni°d.h
>

33 
	~<f˙é.h
>

34 
	~<sys/waô.h
>

36 c⁄° *
	g≤ame
 = "tc-ipt";

37 c⁄° *
	gäame
 = "mangle";

38 c⁄° *
	gpvîsi⁄
 = "0.1";

40 c⁄° *
	gùthooks
[] = {

48 
›ti⁄
 
	g‹igöÆ_›ts
[] = {

53 
ùèbÀs_èrgë
 *
	gt_li°
 = 
NULL
;

54 
›ti⁄
 *
	g›ts
 = 
‹igöÆ_›ts
;

55 
	gglobÆ_›ti⁄_off£t
 = 0;

56 
	#OPTION_OFFSET
 256

	)

58 *
	glib_dú
;

61 
	$ªgi°î_èrgë
(
ùèbÀs_èrgë
 *
me
)

65 
me
->
√xt
 = 
t_li°
;

66 
t_li°
 = 
me
;

68 
	}
}

71 
	$exô_åyhñp
(
°©us
)

73 
	`Ârötf
(
°dîr
, "Try `%s -h' or '%s --help' for more information.\n",

74 
≤ame
,Öname);

75 
	`exô
(
°©us
);

76 
	}
}

79 
	$exô_îr‹
(
exôty≥
 
°©us
, *
msg
, ...)

81 
va_li°
 
¨gs
;

83 
	`va_°¨t
(
¨gs
, 
msg
);

84 
	`Ârötf
(
°dîr
, "%†v%s: ", 
≤ame
, 
pvîsi⁄
);

85 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

86 
	`va_íd
(
¨gs
);

87 
	`Ârötf
(
°dîr
, "\n");

88 i‡(
°©us
 =
PARAMETER_PROBLEM
)

89 
	`exô_åyhñp
(
°©us
);

90 i‡(
°©us
 =
VERSION_PROBLEM
)

91 
	`Ârötf
(
°dîr
,

93 
	`exô
(
°©us
);

94 
	}
}

102 
	$addr_to_dŸãd
(c⁄° 
ö_addr
 *
addΩ
)

104 
buf
[20];

105 c⁄° *
byãp
;

107 
byãp
 = (c⁄° *Ë&(
addΩ
->
s_addr
);

108 
	`•rötf
(
buf
, "%d.%d.%d.%d", 
byãp
[0], bytep[1], bytep[2], bytep[3]);

109  
buf
;

110 
	}
}

112 
	$°rög_to_numbî_Œ
(c⁄° *
s
, 
mö
,

113 
max
,

114 *
ªt
)

116 
numbî
;

117 *
íd
;

120 
î∫o
 = 0;

121 
numbî
 = 
	`°πouŒ
(
s
, &
íd
, 0);

122 i‡(*
íd
 ='\0' &&Énd !
s
) {

124 i‡(
î∫o
 !
ERANGE
 && 
mö
 <
numbî
 && (!
max
 ||Çumber <= max)) {

125 *
ªt
 = 
numbî
;

130 
	}
}

132 
	$°rög_to_numbî_l
(c⁄° *
s
, 
mö
, 
max
,

133 *
ªt
)

135 
ªsu…
;

136 
numbî
;

138 
ªsu…
 = 
	`°rög_to_numbî_Œ
(
s
, 
mö
, 
max
, &
numbî
);

139 *
ªt
 = ()
numbî
;

141  
ªsu…
;

142 
	}
}

144 
	$°rög_to_numbî
(c⁄° *
s
, 
mö
, 
max
,

145 *
ªt
)

147 
ªsu…
;

148 
numbî
;

150 
ªsu…
 = 
	`°rög_to_numbî_l
(
s
, 
mö
, 
max
, &
numbî
);

151 *
ªt
 = ()
numbî
;

153  
ªsu…
;

154 
	}
}

156 
	$‰ì_›ts
(
›ti⁄
 *
›ts
)

158 i‡(
›ts
 !
‹igöÆ_›ts
) {

159 
	`‰ì
(
›ts
);

160 
›ts
 = 
‹igöÆ_›ts
;

161 
globÆ_›ti⁄_off£t
 = 0;

163 
	}
}

165 
›ti⁄
 *

166 
	$mîge_›ti⁄s
(
›ti⁄
 *
ﬁd›ts
, c⁄° ›ti⁄ *
√w›ts
,

167 *
›ti⁄_off£t
)

169 
›ti⁄
 *
mîge
;

170 
num_ﬁd
, 
num_√w
, 
i
;

172 
num_ﬁd
 = 0; 
ﬁd›ts
[num_ﬁd].
«me
;Çum_old++) ;

173 
num_√w
 = 0; 
√w›ts
[num_√w].
«me
;Çum_new++) ;

175 *
›ti⁄_off£t
 = 
globÆ_›ti⁄_off£t
 + 
OPTION_OFFSET
;

177 
mîge
 = 
	`mÆloc
( (
›ti⁄
Ë* (
num_√w
 + 
num_ﬁd
 + 1));

178 
	`mem˝y
(
mîge
, 
ﬁd›ts
, 
num_ﬁd
 *  (
›ti⁄
));

179 
i
 = 0; i < 
num_√w
; i++) {

180 
mîge
[
num_ﬁd
 + 
i
] = 
√w›ts
[i];

181 
mîge
[
num_ﬁd
 + 
i
].
vÆ
 +*
›ti⁄_off£t
;

183 
	`mem£t
(
mîge
 + 
num_ﬁd
 + 
num_√w
, 0,  (
›ti⁄
));

185  
mîge
;

186 
	}
}

189 
	$fw_ˇŒoc
(
size_t
 
cou¡
, size_à
size
)

191 *
p
;

193 i‡((
p
 = (*Ë
	`ˇŒoc
(
cou¡
, 
size
)Ë=
NULL
) {

194 
	`≥º‹
("iptables: calloc failed");

195 
	`exô
(1);

197  
p
;

198 
	}
}

200 
ùèbÀs_èrgë
 *

201 
	$föd_t
(*
«me
)

203 
ùèbÀs_èrgë
 *
m
;

204 
m
 = 
t_li°
; m; m = m->
√xt
) {

205 i‡(
	`°rcmp
(
m
->
«me
,Çame) == 0)

206  
m
;

209  
NULL
;

210 
	}
}

212 
ùèbÀs_èrgë
 *

213 
	$gë_èrgë_«me
(c⁄° *
«me
)

215 *
h™dÀ
;

216 *
îr‹
;

217 *
√w_«me
, *
 ame
;

218 
ùèbÀs_èrgë
 *
m
;

219 
∑th
[
	`°æí
(
lib_dú
Ë+  ("/libùt_.so"Ë+ såÀn(
«me
)];

221 
√w_«me
 = 
	`mÆloc
(
	`°æí
(
«me
) + 1);

222 
 ame
 = 
	`mÆloc
(
	`°æí
(
«me
) + 1);

223 i‡(
√w_«me
)

224 
	`mem£t
(
√w_«me
, '\0', 
	`°æí
(
«me
) + 1);

226 
	`exô_îr‹
(
PARAMETER_PROBLEM
, "get_target_name");

228 i‡(
 ame
)

229 
	`mem£t
(
 ame
, '\0', 
	`°æí
(
«me
) + 1);

231 
	`exô_îr‹
(
PARAMETER_PROBLEM
, "get_target_name");

233 
	`°r˝y
(
√w_«me
, 
«me
);

234 
	`°r˝y
(
 ame
, 
«me
);

236 i‡(
	`isuµî
(
 ame
[0])) {

237 
i
;

238 
i
 = 0; i < 
	`°æí
(
«me
); i++) {

239 
 ame
[
i
] = 
	`tﬁowî
(lname[i]);

243 i‡(
	`i¶owî
(
√w_«me
[0])) {

244 
i
;

245 
i
 = 0; i < 
	`°æí
(
√w_«me
); i++) {

246 
√w_«me
[
i
] = 
	`touµî
(new_name[i]);

250 
	`•rötf
(
∑th
, "%s/libùt_%s.so",
lib_dú
, 
√w_«me
);

251 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_LAZY
);

252 i‡(!
h™dÀ
) {

253 
	`•rötf
(
∑th
, 
lib_dú
, "/libùt_%s.so", 
 ame
);

254 
h™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_LAZY
);

255 i‡(!
h™dÀ
) {

256 
	`Âuts
(
	`dÀº‹
(), 
°dîr
);

257 
	`¥ötf
("\n");

258  
NULL
;

262 
m
 = 
	`dlsym
(
h™dÀ
, 
√w_«me
);

263 i‡((
îr‹
 = 
	`dÀº‹
()Ë!
NULL
) {

264 
m
 = (
ùèbÀs_èrgë
 *Ë
	`dlsym
(
h™dÀ
, 
 ame
);

265 i‡((
îr‹
 = 
	`dÀº‹
()Ë!
NULL
) {

266 
m
 = 
	`föd_t
(
√w_«me
);

267 i‡(
NULL
 =
m
) {

268 
m
 = 
	`föd_t
(
 ame
);

269 i‡(
NULL
 =
m
) {

270 
	`Âuts
(
îr‹
, 
°dîr
);

271 
	`Ârötf
(
°dîr
, "\n");

272 
	`dl˛o£
(
h™dÀ
);

273  
NULL
;

279  
m
;

280 
	}
}

283 
ö_addr
 *
	$dŸãd_to_addr
(c⁄° *
dŸãd
)

285 
ö_addr
 
addr
;

286 *
addΩ
;

287 *
p
, *
q
;

288 
⁄ebyã
;

289 
i
;

290 
buf
[20];

293 
	`°∫˝y
(
buf
, 
dŸãd
,  (buf) - 1);

294 
addΩ
 = (*Ë&(
addr
.
s_addr
);

296 
p
 = 
buf
;

297 
i
 = 0; i < 3; i++) {

298 i‡((
q
 = 
	`°rchr
(
p
, '.')Ë=
NULL
)

299  (
ö_addr
 *Ë
NULL
;

301 *
q
 = '\0';

302 i‡(
	`°rög_to_numbî
(
p
, 0, 255, &
⁄ebyã
) == -1)

303  (
ö_addr
 *Ë
NULL
;

305 
addΩ
[
i
] = (Ë
⁄ebyã
;

306 
p
 = 
q
 + 1;

310 i‡(
	`°rög_to_numbî
(
p
, 0, 255, &
⁄ebyã
) == -1)

311  (
ö_addr
 *Ë
NULL
;

313 
addΩ
[3] = (Ë
⁄ebyã
;

315  &
addr
;

316 
	}
}

318 
	$£t_ªvisi⁄
(*
«me
, 
u_öt8_t
 
ªvisi⁄
)

322 
«me
[
IPT_FUNCTION_MAXNAMELEN
 - 2] = '\0';

323 
«me
[
IPT_FUNCTION_MAXNAMELEN
 - 1] = 
ªvisi⁄
;

324 
	}
}

330 
	$buûd_°
(
ùèbÀs_èrgë
 *
èrgë
, 
ùt_íåy_èrgë
 *
t
)

332 
nfˇche
 = 0;

334 i‡(
èrgë
) {

335 
size_t
 
size
;

337 
size
 =

338 
	`IPT_ALIGN
( (
ùt_íåy_èrgë
)Ë+ 
èrgë
->
size
;

340 i‡(
NULL
 =
t
) {

341 
èrgë
->
t
 = 
	`fw_ˇŒoc
(1, 
size
);

342 
èrgë
->
t
->
u
.
èrgë_size
 = 
size
;

344 i‡(
èrgë
->
öô
 !
NULL
)

345 
èrgë
->
	`öô
—¨gë->
t
, &
nfˇche
);

346 
	`£t_ªvisi⁄
(
èrgë
->
t
->
u
.
u£r
.
«me
,Å¨gë->
ªvisi⁄
);

348 
èrgë
->
t
 =Å;

350 
	`°r˝y
(
èrgë
->
t
->
u
.
u£r
.
«me
,Åarget->name);

355 
	}
}

357 
	$∑r£_ùt
(
a˘i⁄_utû
 *
a
,*
¨gc_p
,

358 ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

360 
ùèbÀs_èrgë
 *
m
 = 
NULL
;

361 
ùt_íåy
 
fw
;

362 
π©å
 *
èû
;

363 
c
;

364 
ørgc
 = *
¨gc_p
;

365 **
¨gv
 = *
¨gv_p
;

366 
¨gc
 = 0, 
ürgc
 = 0;

367 
k
[16];

368 
ªs
 = -1;

369 
size
 = 0;

370 
iok
 = 0, 
ok
 = 0;

371 
__u32
 
hook
 = 0, 
ödex
 = 0;

372 
ªs
 = 0;

374 
lib_dú
 = 
	`gëív
("IPTABLES_LIB_DIR");

375 i‡(!
lib_dú
)

376 
lib_dú
 = 
IPT_LIB_DIR
;

379 
i
;

380 
i
 = 0; i < 
ørgc
; i++) {

381 i‡(
NULL
 =
¨gv
[
i
] || 0 =
	`°rcmp
(argv[i], "action")) {

385 
ürgc
 = 
¨gc
 = 
i
;

388 i‡(
¨gc
 <= 2) {

389 
	`Ârötf
(
°dîr
,"badárguemít†tÿùà%d v†%d \n", 
¨gc
, 
ørgc
);

394 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "j:", 
›ts
, 
NULL
);

395 i‡(
c
 == -1)

397 
c
) {

399 
m
 = 
	`gë_èrgë_«me
(
›èrg
);

400 i‡(
NULL
 !
m
) {

402 i‡(0 > 
	`buûd_°
(
m
, 
NULL
)) {

403 
	`¥ötf
(" %†îr‹ \n", 
m
->
«me
);

406 
›ts
 =

407 
	`mîge_›ti⁄s
(
›ts
, 
m
->
exåa_›ts
,

408 &
m
->
›ti⁄_off£t
);

410 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

413 
ok
++;

417 
	`mem£t
(&
fw
, 0,  (fw));

418 i‡(
m
) {

419 
m
->
	`∑r£
(
c
 - m->
›ti⁄_off£t
, 
¨gv
, 0,

420 &
m
->
tÊags
, 
NULL
, &m->
t
);

422 
	`Ârötf
(
°dîr
," faûedÅÿfödÅ¨gë %s\n\n", 
›èrg
);

426 
ok
++;

432 i‡(
ürgc
 > 
›töd
) {

433 i‡(
	`m©ches
(
¨gv
[
›töd
], "index") == 0) {

434 i‡(
	`gë_u32
(&
ödex
, 
¨gv
[
›töd
 + 1], 10)) {

435 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

436 
	`‰ì_›ts
(
›ts
);

439 
iok
++;

441 
›töd
 += 2;

445 i‡(!
ok
 && !
iok
) {

446 
	`Ârötf
(
°dîr
," i± P¨£∏BAD!! (%s)\n", *
¨gv
);

451 i‡(
m
)

452 
m
->
	`föÆ_check
(m->
tÊags
);

455 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

456 i‡(
t
->
tcm_∑ª¡
 !
TC_H_ROOT


457 && 
t
->
tcm_∑ª¡
 =
	`TC_H_MAJ
(
TC_H_INGRESS
)) {

458 
hook
 = 
NF_IP_PRE_ROUTING
;

460 
hook
 = 
NF_IP_POST_ROUTING
;

464 
èû
 = 
	`NLMSG_TAIL
(
n
);

465 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

466 
	`Ârötf
(
°dout
, "èbÀ«me: %†hook: %s\¿", 
äame
, 
ùthooks
[
hook
]);

467 
	`Ârötf
(
°dout
, "\ttarget: ");

469 i‡(
m
)

470 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

471 
	`Ârötf
(
°dout
, " index %d\n", 
ödex
);

473 i‡(
	`°æí
(
äame
) > 16) {

474 
size
 = 16;

475 
k
[15] = 0;

477 
size
 = 1 + 
	`°æí
(
äame
);

479 
	`°∫˝y
(
k
, 
äame
, 
size
);

481 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TABLE
, 
k
, 
size
);

482 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_HOOK
, &
hook
, 4);

483 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_INDEX
, &
ödex
, 4);

484 i‡(
m
)

485 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_IPT_TARG
, 
m
->
t
, m->t->
u
.
èrgë_size
);

486 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

488 
¨gc
 -
›töd
;

489 
¨gv
 +
›töd
;

490 *
¨gc_p
 = 
ørgc
 - 
ürgc
;

491 *
¨gv_p
 = 
¨gv
;

493 
›töd
 = 1;

494 
	`‰ì_›ts
(
›ts
);

498 
	}
}

501 
	$¥öt_ùt
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

503 
π©å
 *
tb
[
TCA_IPT_MAX
 + 1];

504 
ùt_íåy_èrgë
 *
t
 = 
NULL
;

506 i‡(
¨g
 =
NULL
)

509 
lib_dú
 = 
	`gëív
("IPTABLES_LIB_DIR");

510 i‡(!
lib_dú
)

511 
lib_dú
 = 
IPT_LIB_DIR
;

513 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_IPT_MAX
, 
¨g
);

515 i‡(
tb
[
TCA_IPT_TABLE
] =
NULL
) {

516 
	`Ârötf
(
f
, "[NULL iptÅableÇame ]ássuming mangle ");

518 
	`Ârötf
(
f
, "tablename: %s ",

519 (*Ë
	`RTA_DATA
(
tb
[
TCA_IPT_TABLE
]));

522 i‡(
tb
[
TCA_IPT_HOOK
] =
NULL
) {

523 
	`Ârötf
(
f
, "[NULL ipt hookÇame ]\n ");

526 
__u32
 
hook
;

527 
hook
 = *(
__u32
 *Ë
	`RTA_DATA
(
tb
[
TCA_IPT_HOOK
]);

528 
	`Ârötf
(
f
, " hook: %†\n", 
ùthooks
[
hook
]);

531 i‡(
tb
[
TCA_IPT_TARG
] =
NULL
) {

532 
	`Ârötf
(
f
, "\t[NULL iptÅargetÖarameters ] \n");

535 
ùèbÀs_èrgë
 *
m
 = 
NULL
;

536 
t
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TARG
]);

537 
m
 = 
	`gë_èrgë_«me
(
t
->
u
.
u£r
.
«me
);

538 i‡(
NULL
 !
m
) {

539 i‡(0 > 
	`buûd_°
(
m
, 
t
)) {

540 
	`Ârötf
(
°dîr
, " %†îr‹ \n", 
m
->
«me
);

544 
›ts
 =

545 
	`mîge_›ti⁄s
(
›ts
, 
m
->
exåa_›ts
,

546 &
m
->
›ti⁄_off£t
);

548 
	`Ârötf
(
°dîr
, " failedÅo findÅarget %s\n\n",

549 
t
->
u
.
u£r
.
«me
);

552 
	`Ârötf
(
f
, "\ttarget ");

553 
m
->
	`¥öt
(
NULL
, m->
t
, 0);

554 i‡(
tb
[
TCA_IPT_INDEX
] =
NULL
) {

555 
	`Ârötf
(
f
, " [NULL iptÅarget index ]\n");

557 
__u32
 
ödex
;

558 
ödex
 = *(
__u32
 *Ë
	`RTA_DATA
(
tb
[
TCA_IPT_INDEX
]);

559 
	`Ârötf
(
f
, " \n\tödex %d", 
ödex
);

562 i‡(
tb
[
TCA_IPT_CNT
]) {

563 
tc_˙t
 *
c
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_CNT
]);;

564 
	`Ârötf
(
f
, "Ñe‡%d böd %d", 
c
->
ªf˙t
, c->
böd˙t
);

566 i‡(
show_°©s
) {

567 i‡(
tb
[
TCA_IPT_TM
]) {

568 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_IPT_TM
]);

569 
	`¥öt_tm
(
f
,
tm
);

572 
	`Ârötf
(
f
, " \n");

575 
	`‰ì_›ts
(
›ts
);

578 
	}
}

580 
a˘i⁄_utû
 
	gùt_a˘i⁄_utû
 = {

581 .
id
 = "ipt",

582 .
	g∑r£_a›t
 = 
∑r£_ùt
,

583 .
	g¥öt_a›t
 = 
¥öt_ùt
,

	@m_mirred.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<sy¶og.h
>

19 
	~<f˙é.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

27 
	~<löux/tc_a˘/tc_múªd.h
>

29 
	gmúªd_d
 = 1;

32 
	$ex∂aö
()

34 
	`Ârötf
(
°dîr
, "Usage: mirred <DIRECTION> <ACTION> [index INDEX] <dev DEVICENAME> \n");

35 
	`Ârötf
(
°dîr
, "where: \n");

36 
	`Ârötf
(
°dîr
, "\tDIRECTION := <ingress |Égress>\n");

37 
	`Ârötf
(
°dîr
, "\tACTION := <mirror |Ñedirect>\n");

38 
	`Ârötf
(
°dîr
, "\tINDEX isÅhe specificÖolicy instance id\n");

39 
	`Ârötf
(
°dîr
, "\tDEVICENAME isÅhe devicename \n");

41 
	}
}

44 
	$ußge
()

46 
	`ex∂aö
();

47 
	`exô
(-1);

48 
	}
}

50 *
	$múªd_n2a
(
a˘i⁄
)

52 
a˘i⁄
) {

53 
TCA_EGRESS_REDIR
:

55 
TCA_INGRESS_REDIR
:

57 
TCA_EGRESS_MIRROR
:

59 
TCA_INGRESS_MIRROR
:

64 
	}
}

67 
	$∑r£_egªss
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

70 
¨gc
 = *
¨gc_p
;

71 **
¨gv
 = *
¨gv_p
;

72 
ok
 = 0, 
iok
 = 0, 
múr‹
=0,
ªdú
=0;

73 
tc_múªd
 
p
;

74 
π©å
 *
èû
;

75 
d
[16];

77 
	`mem£t
(
d
,0,(d)-1);

78 
	`mem£t
(&
p
,0,(
tc_múªd
));

80 
¨gc
 > 0) {

82 i‡(
	`m©ches
(*
¨gv
, "action") == 0) {

84 } i‡(
	`m©ches
(*
¨gv
, "egress") == 0) {

85 
	`NEXT_ARG
();

86 
ok
++;

90 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

91 
	`NEXT_ARG
();

92 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

93 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

96 
iok
++;

97 i‡(!
ok
) {

98 
¨gc
--;

99 
¨gv
++;

102 } if(!
ok
) {

103 
	`Ârötf
(
°dîr
, "wa†ex≥˘ögÉgªs†(%s)\n", *
¨gv
);

106 } i‡(!
múr‹
 && 
	`m©ches
(*
¨gv
, "mirror") == 0) {

107 
múr‹
=1;

108 i‡(
ªdú
) {

109 
	`Ârötf
(
°dîr
, "Cant have both mirrorándÑedir\n");

112 
p
.
ó˘i⁄
 = 
TCA_EGRESS_MIRROR
;

113 
p
.
a˘i⁄
 = 
TC_ACT_PIPE
;

114 
ok
++;

115 } i‡(!
ªdú
 && 
	`m©ches
(*
¨gv
, "redirect") == 0) {

116 
ªdú
=1;

117 i‡(
múr‹
) {

118 
	`Ârötf
(
°dîr
, "Cant have both mirrorándÑedir\n");

121 
p
.
ó˘i⁄
 = 
TCA_EGRESS_REDIR
;

122 
p
.
a˘i⁄
 = 
TC_ACT_STOLEN
;

123 
ok
++;

124 } i‡((
ªdú
 || 
múr‹
Ë&& 
	`m©ches
(*
¨gv
, "dev") == 0) {

125 
	`NEXT_ARG
();

126 i‡(
	`°æí
(
d
))

127 
	`du∑rg
("dev", *
¨gv
);

129 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

130 
¨gc
--;

131 
¨gv
++;

138 
	`NEXT_ARG
();

141 i‡(!
ok
 && !
iok
) {

147 i‡(
d
[0]) {

148 
idx
;

149 
	`Œ_öô_m≠
(&
πh
);

151 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

152 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

156 
p
.
ifödex
 = 
idx
;

160 i‡(
¨gc
 && 
p
.
ó˘i⁄
 =
TCA_EGRESS_MIRROR
) {

162 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

163 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

164 
	`NEXT_ARG
();

165 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

166 
p
.
a˘i⁄
 = 
TC_POLICE_PIPE
;

167 
	`NEXT_ARG
();

168 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

169 
	`m©ches
(*
¨gv
, "shot") == 0) {

170 
p
.
a˘i⁄
 = 
TC_POLICE_SHOT
;

171 
	`NEXT_ARG
();

172 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

173 
p
.
a˘i⁄
 = 
TC_POLICE_UNSPEC
;

174 
	`NEXT_ARG
();

175 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

176 
p
.
a˘i⁄
 = 
TC_POLICE_OK
;

177 
	`NEXT_ARG
();

182 i‡(
¨gc
) {

183 i‡(
iok
 && 
	`m©ches
(*
¨gv
, "index") == 0) {

184 
	`Ârötf
(
°dîr
, "mirred: Illegal double index\n");

187 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

188 
	`NEXT_ARG
();

189 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

190 
	`Ârötf
(
°dîr
, "mirred: Illegal \"index\"\n");

193 
¨gc
--;

194 
¨gv
++;

199 i‡(
múªd_d
)

200 
	`Ârötf
(
°dout
, "A˘i⁄ %d devi˚ %†ifödex %d\n",
p
.
a˘i⁄
, 
d
,p.
ifödex
);

202 
èû
 = 
	`NLMSG_TAIL
(
n
);

203 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

204 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_MIRRED_PARMS
, &
p
,  (p));

205 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

207 *
¨gc_p
 = 
¨gc
;

208 *
¨gv_p
 = 
¨gv
;

210 
	}
}

214 
	$∑r£_múªd
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

217 
¨gc
 = *
¨gc_p
;

218 **
¨gv
 = *
¨gv_p
;

220 i‡(
¨gc
 < 0) {

221 
	`Ârötf
(
°dîr
,"múªd badárguemíàcou¡ %d\n", 
¨gc
);

225 i‡(
	`m©ches
(*
¨gv
, "mirred") == 0) {

226 
	`NEXT_ARG
();

228 
	`Ârötf
(
°dîr
,"múªd badárguemíà%s\n", *
¨gv
);

233 i‡(
	`m©ches
(*
¨gv
, "egress") == 0 || matches(*argv, "index") == 0) {

234 
ªt
 = 
	`∑r£_egªss
(
a
, &
¨gc
, &
¨gv
, 
tˇ_id
, 
n
);

235 i‡(
ªt
 == 0) {

236 *
¨gc_p
 = 
¨gc
;

237 *
¨gv_p
 = 
¨gv
;

241 } i‡(
	`m©ches
(*
¨gv
, "ingress") == 0) {

242 
	`Ârötf
(
°dîr
,"mirred ingressÇot supportedátÅhe moment\n");

243 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

244 
	`ußge
();

246 
	`Ârötf
(
°dîr
,"múªd o±i⁄ÇŸ suµ‹ãd %s\n", *
¨gv
);

251 
	}
}

254 
	$¥öt_múªd
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

256 
tc_múªd
 *
p
;

257 
π©å
 *
tb
[
TCA_MIRRED_MAX
 + 1];

258 c⁄° *
dev
;

259 
	`SPRINT_BUF
(
b1
);

261 i‡(
¨g
 =
NULL
)

264 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_MIRRED_MAX
, 
¨g
);

266 i‡(
tb
[
TCA_MIRRED_PARMS
] =
NULL
) {

267 
	`Ârötf
(
f
, "[NULL mirredÖarameters]");

270 
p
 = 
	`RTA_DATA
(
tb
[
TCA_MIRRED_PARMS
]);

277 i‡((
dev
 = 
	`Œ_ödex_to_«me
(
p
->
ifödex
)) == 0) {

278 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ %d\n", 
p
->
ifödex
);

282 
	`Ârötf
(
f
, "múªd (%†tÿdevi˚ %sË%s", 
	`múªd_n2a
(
p
->
ó˘i⁄
), 
dev
,
	`a˘i⁄_n2a
’->
a˘i⁄
, 
b1
,  (b1)));

284 
	`Ârötf
(
f
, "\n ");

285 
	`Ârötf
(
f
, "\tödex %dÑe‡%d böd %d",
p
->
ödex
,p->
ªf˙t
,p->
böd˙t
);

287 i‡(
show_°©s
) {

288 i‡(
tb
[
TCA_MIRRED_TM
]) {

289 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_MIRRED_TM
]);

290 
	`¥öt_tm
(
f
,
tm
);

293 
	`Ârötf
(
f
, "\n ");

295 
	}
}

297 
a˘i⁄_utû
 
	gmúªd_a˘i⁄_utû
 = {

298 .
id
 = "mirred",

299 .
	g∑r£_a›t
 = 
∑r£_múªd
,

300 .
	g¥öt_a›t
 = 
¥öt_múªd
,

	@m_pedit.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<uni°d.h
>

21 
	~<sy¶og.h
>

22 
	~<f˙é.h
>

23 
	~<sys/sockë.h
>

24 
	~<√töë/ö.h
>

25 
	~<¨∑/öë.h
>

26 
	~<°rög.h
>

27 
	~<dlf˙.h
>

28 
	~"utûs.h
"

29 
	~"tc_utû.h
"

30 
	~"m_≥dô.h
"

32 
m_≥dô_utû
 *
	g≥dô_li°
;

33 
	g≥dô_debug
 = 1;

36 
	$ex∂aö
()

38 
	`Ârötf
(
°dîr
, "Usage: ...Öedit munge <MUNGE>\n");

39 
	`Ârötf
(
°dîr
,

52 
	}
}

55 
	$ußge
()

57 
	`ex∂aö
();

58 
	`exô
(-1);

59 
	}
}

62 
	$≥dô_∑r£_n››t
 (*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

64 
¨gc
 = *
¨gc_p
;

65 **
¨gv
 = *
¨gv_p
;

67 i‡(
¨gc
) {

68 
	`Ârötf
(
°dîr
, "Unknow¿a˘i⁄ hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", *
¨gv
);

74 
	}
}

76 
m_≥dô_utû


77 *
	$gë_≥dô_köd
(*
°r
)

79 *
pBODY
;

80 *
dlh
;

81 
buf
[256];

82 
m_≥dô_utû
 *
p
;

84 
p
 = 
≥dô_li°
;Ö;Ö =Ö->
√xt
) {

85 i‡(
	`°rcmp
(
p
->
id
, 
°r
) == 0)

86  
p
;

89 
	`¢¥ötf
(
buf
, (buf), "p_%s.so", 
°r
);

90 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

91 i‡(
dlh
 =
NULL
) {

92 
dlh
 = 
pBODY
;

93 i‡(
dlh
 =
NULL
) {

94 
dlh
 = 
pBODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

95 i‡(
dlh
 =
NULL
)

96 
n€xi°
;

100 
	`¢¥ötf
(
buf
, (buf), "p_≥dô_%s", 
°r
);

101 
p
 = 
	`dlsym
(
dlh
, 
buf
);

102 i‡(
p
 =
NULL
)

103 
n€xi°
;

105 
ªg
:

106 
p
->
√xt
 = 
≥dô_li°
;

107 
≥dô_li°
 = 
p
;

108  
p
;

110 
n€xi°
:

111 
p
 = 
	`mÆloc
((*p));

112 i‡(
p
) {

113 
	`mem£t
(
p
, 0, (*p));

114 
	`°∫˝y
(
p
->
id
, 
°r
, (p->id)-1);

115 
p
->
∑r£_≥›t
 = 
≥dô_∑r£_n››t
;

116 
ªg
;

118  
p
;

119 
	}
}

122 
	$∑ck_key
(
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

124 
hwm
 = 
£l
->
nkeys
;

126 i‡(
hwm
 >
MAX_OFFS
)

129 i‡(
tkey
->
off
 % 4) {

130 
	`Ârötf
(
°dîr
, "offsets MUST be in 32 bit boundaries\n");

134 
£l
->
keys
[
hwm
].
vÆ
 = 
tkey
->val;

135 
£l
->
keys
[
hwm
].
mask
 = 
tkey
->mask;

136 
£l
->
keys
[
hwm
].
off
 = 
tkey
->off;

137 
£l
->
keys
[
hwm
].
©
 = 
tkey
->at;

138 
£l
->
keys
[
hwm
].
offmask
 = 
tkey
->offmask;

139 
£l
->
keys
[
hwm
].
shi·
 = 
tkey
->shift;

140 
£l
->
nkeys
++;

142 
	}
}

146 
	$∑ck_key32
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

148 i‡(
tkey
->
off
 > (tkey->off & ~3)) {

149 
	`Ârötf
(
°dîr
,

154 
tkey
->
vÆ
 = 
	`ht⁄l
—key->vÆ & 
ªèö
);

155 
tkey
->
mask
 = 
	`ht⁄l
—key->mask | ~
ªèö
);

157 
tkey
->
off
 &= ~3;

158  
	`∑ck_key
(
£l
,
tkey
);

159 
	}
}

162 
	$∑ck_key16
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

164 
öd
 = 0, 
°ride
 = 0;

165 
__u32
 
m
[4] = {0xFFFF0000,0xFF0000FF,0x0000FFFF};

167 i‡(0 > 
tkey
->
off
) {

168 
öd
 = 
tkey
->
off
 + 1;

169 i‡(0 > 
öd
)

170 
öd
 = -1*ind;

172 
öd
 = 
tkey
->
off
;

175 i‡(
tkey
->
vÆ
 > 0xFFFF ||Åkey->
mask
 > 0xFFFF) {

176 
	`Ârötf
(
°dîr
, "pack_key16 bad value\n");

180 
öd
 = 
tkey
->
off
 & 3;

182 i‡(0 > 
öd
 || 2 < ind) {

183 
	`Ârötf
(
°dîr
, "∑ck_key16 bad index vÆuê%d\n",
öd
);

187 
°ride
 = 8 * 
öd
;

188 
tkey
->
vÆ
 = 
	`ht⁄s
(tkey->val);

189 i‡(
°ride
 > 0) {

190 
tkey
->
vÆ
 <<
°ride
;

191 
tkey
->
mask
 <<
°ride
;

192 
ªèö
 <<
°ride
;

194 
tkey
->
mask
 = 
ªèö
|
m
[
öd
];

196 
tkey
->
off
 &= ~3;

198 i‡(
≥dô_debug
)

199 
	`¥ötf
("∑ck_key16: FöÆ vÆ %08x mask %08x \n",
tkey
->
vÆ
,tkey->
mask
);

200  
	`∑ck_key
(
£l
,
tkey
);

202 
	}
}

205 
	$∑ck_key8
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

207 
öd
 = 0, 
°ride
 = 0;

208 
__u32
 
m
[4] = {0xFFFFFF00,0xFFFF00FF,0xFF00FFFF,0x00FFFFFF};

210 i‡(0 > 
tkey
->
off
) {

211 
öd
 = 
tkey
->
off
 + 1;

212 i‡(0 > 
öd
)

213 
öd
 = -1*ind;

215 
öd
 = 
tkey
->
off
;

218 i‡(
tkey
->
vÆ
 > 0xFF ||Åkey->
mask
 > 0xFF) {

219 
	`Ârötf
(
°dîr
, "∑ck_key8 bad vÆuê(vÆ %x mask %x\n", 
tkey
->
vÆ
,Åkey->
mask
);

223 
öd
 = 
tkey
->
off
 & 3;

224 
°ride
 = 8 * 
öd
;

225 
tkey
->
vÆ
 <<
°ride
;

226 
tkey
->
mask
 <<
°ride
;

227 
ªèö
 <<
°ride
;

228 
tkey
->
mask
 = 
ªèö
|
m
[
öd
];

229 
tkey
->
off
 &= ~3;

231 i‡(
≥dô_debug
)

232 
	`¥ötf
("∑ck_key8: FöÆ w‹d of‡%d vÆ %08x mask %08x \n",
tkey
->
off
 ,Åkey->
vÆ
,tkey->
mask
);

233  
	`∑ck_key
(
£l
,
tkey
);

234 
	}
}

237 
	$∑r£_vÆ
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 * 
vÆ
, 
ty≥
)

239 
¨gc
 = *
¨gc_p
;

240 **
¨gv
 = *
¨gv_p
;

242 i‡(
¨gc
 <= 0)

245 i‡(
TINT
 =
ty≥
)

246  
	`gë_öãgî
((*Ë
vÆ
, *
¨gv
, 0);

248 i‡(
TU32
 =
ty≥
)

249  
	`gë_u32
(
vÆ
, *
¨gv
, 0);

251 i‡(
TIPV4
 =
ty≥
) {

252 
öë_¥efix
 
addr
;

253 i‡(
	`gë_¥efix_1
(&
addr
, *
¨gv
, 
AF_INET
)) {

256 *
vÆ
=
addr
.
d©a
[0];

259 i‡(
TIPV6
 =
ty≥
) {

265 
	}
}

268 
	$∑r£_cmd
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 
Àn
, 
ty≥
,__u32 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

270 
__u32
 
mask
 = 0, 
vÆ
 = 0;

271 
__u32
 
o
 = 0xFF;

272 
ªs
 = -1;

273 
¨gc
 = *
¨gc_p
;

274 **
¨gv
 = *
¨gv_p
;

276 i‡(
¨gc
 <= 0)

279 i‡(
≥dô_debug
)

280 
	`¥ötf
("∑r£_cmdárg¯%d %†off£à%dÜígth %d\n",
¨gc
,*
¨gv
,
tkey
->
off
,
Àn
);

282 i‡(
Àn
 == 2)

283 
o
 = 0xFFFF;

284 i‡(
Àn
 == 4)

285 
o
 = 0xFFFFFFFF;

287 i‡(
	`m©ches
(*
¨gv
, "invert") == 0) {

288 
ªèö
 = 
vÆ
 = 
mask
 = 
o
;

289 } i‡(
	`m©ches
(*
¨gv
, "set") == 0) {

290 
	`NEXT_ARG
();

291 i‡(
	`∑r£_vÆ
(&
¨gc
, &
¨gv
, &
vÆ
, 
ty≥
))

293 } i‡(
	`m©ches
(*
¨gv
, "preserve") == 0) {

294 
ªèö
 = 
mask
 = 
o
;

296 i‡(
	`m©ches
(*
¨gv
, "clear") != 0)

300 
¨gc
--; 
¨gv
++;

302 i‡(
¨gc
 && 
	`m©ches
(*
¨gv
, "retain") == 0) {

303 
	`NEXT_ARG
();

304 i‡(
	`∑r£_vÆ
(&
¨gc
, &
¨gv
, &
ªèö
, 
TU32
))

306 
¨gc
--; 
¨gv
++;

309 
tkey
->
vÆ
 = val;

311 i‡(
Àn
 == 1) {

312 
tkey
->
mask
 = 0xFF;

313 
ªs
 = 
	`∑ck_key8
(
ªèö
,
£l
,
tkey
);

314 
d⁄e
;

316 i‡(
Àn
 == 2) {

317 
tkey
->
mask
 = mask;

318 
ªs
 = 
	`∑ck_key16
(
ªèö
,
£l
,
tkey
);

319 
d⁄e
;

321 i‡(
Àn
 == 4) {

322 
tkey
->
mask
 = mask;

323 
ªs
 = 
	`∑ck_key32
(
ªèö
,
£l
,
tkey
);

324 
d⁄e
;

328 
d⁄e
:

329 i‡(
≥dô_debug
)

330 
	`¥ötf
("∑r£_cmd d⁄ê¨g¯%d %†off£à%dÜígth %d\n",
¨gc
,*
¨gv
,
tkey
->
off
,
Àn
);

331 *
¨gc_p
 = 
¨gc
;

332 *
¨gv_p
 = 
¨gv
;

333  
ªs
;

335 
	}
}

338 
	$∑r£_off£t
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

340 
off
;

341 
__u32
 
Àn
, 
ªèö
;

342 
¨gc
 = *
¨gc_p
;

343 **
¨gv
 = *
¨gv_p
;

344 
ªs
 = -1;

346 i‡(
¨gc
 <= 0)

349 i‡(
	`gë_öãgî
(&
off
, *
¨gv
, 0))

351 
tkey
->
off
 = off;

353 
¨gc
--;

354 
¨gv
++;

356 i‡(
¨gc
 <= 0)

360 i‡(
	`m©ches
(*
¨gv
, "u32") == 0) {

361 
Àn
 = 4;

362 
ªèö
 = 0xFFFFFFFF;

363 
d⁄e
;

365 i‡(
	`m©ches
(*
¨gv
, "u16") == 0) {

366 
Àn
 = 2;

367 
ªèö
 = 0x0;

368 
d⁄e
;

370 i‡(
	`m©ches
(*
¨gv
, "u8") == 0) {

371 
Àn
 = 1;

372 
ªèö
 = 0x0;

373 
d⁄e
;

378 
d⁄e
:

380 
	`NEXT_ARG
();

383 i‡(
	`m©ches
(*
¨gv
, "at") == 0) {

385 
__u32
 
©v
=0,
offmask
=0x0,
shi·
=0;

387 
	`NEXT_ARG
();

388 i‡(
	`gë_u32
(&
©v
, *
¨gv
, 0))

390 
tkey
->
©
 = 
©v
;

392 
	`NEXT_ARG
();

394 i‡(
	`gë_u32
(&
offmask
, *
¨gv
, 16))

396 
tkey
->
offmask
 = offmask;

398 
	`NEXT_ARG
();

400 i‡(
	`gë_u32
(&
shi·
, *
¨gv
, 0))

402 
tkey
->
shi·
 = shift;

404 
	`NEXT_ARG
();

407 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 
Àn
, 
TU32
,
ªèö
,
£l
,
tkey
);

409 *
¨gc_p
 = 
¨gc
;

410 *
¨gv_p
 = 
¨gv
;

411  
ªs
;

412 
	}
}

415 
	$∑r£_munge
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
)

417 
tc_≥dô_key
 
tkey
;

418 
¨gc
 = *
¨gc_p
;

419 **
¨gv
 = *
¨gv_p
;

420 
ªs
 = -1;

422 i‡(
¨gc
 <= 0)

425 
	`mem£t
(&
tkey
, 0, (tkey));

427 i‡(
	`m©ches
(*
¨gv
, "offset") == 0) {

428 
	`NEXT_ARG
();

429 
ªs
 = 
	`∑r£_off£t
(&
¨gc
, &
¨gv
,
£l
,&
tkey
);

430 
d⁄e
;

432 
k
[16];

433 
m_≥dô_utû
 *
p
 = 
NULL
;

435 
	`°∫˝y
(
k
, *
¨gv
,  (k) - 1);

437 i‡(
¨gc
 > 0 ) {

438 
p
 = 
	`gë_≥dô_köd
(
k
);

439 i‡(
NULL
 =
p
)

440 
bad_vÆ
;

441 
ªs
 = 
p
->
	`∑r£_≥›t
(&
¨gc
, &
¨gv
, 
£l
,&
tkey
);

442 i‡(
ªs
 < 0) {

443 
	`Ârötf
(
°dîr
,"badÖeditÖarsing\n");

444 
bad_vÆ
;

446 
d⁄e
;

450 
bad_vÆ
:

453 
d⁄e
:

455 *
¨gc_p
 = 
¨gc
;

456 *
¨gv_p
 = 
¨gv
;

457  
ªs
;

458 
	}
}

461 
	$∑r£_≥dô
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

464 
tc_≥dô_£l
 
£l
;

465 
tc_≥dô_key
 
keys
[
MAX_OFFS
];

466 } 
£l
;

468 
¨gc
 = *
¨gc_p
;

469 **
¨gv
 = *
¨gv_p
;

470 
ok
 = 0, 
iok
 = 0;

471 
π©å
 *
èû
;

473 
	`mem£t
(&
£l
, 0, (sel));

475 
¨gc
 > 0) {

476 i‡(
≥dô_debug
 > 1)

477 
	`Ârötf
(
°dîr
, "whûê≥dô (%d:%s)\n",
¨gc
, *
¨gv
);

478 i‡(
	`m©ches
(*
¨gv
, "pedit") == 0) {

479 
	`NEXT_ARG
();

480 
ok
++;

482 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

483 
	`ußge
();

484 } i‡(
	`m©ches
(*
¨gv
, "munge") == 0) {

485 i‡(!
ok
) {

486 
	`Ârötf
(
°dîr
, "IŒegÆÖedô c⁄°ru˘ (%sË\n", *
¨gv
);

487 
	`ex∂aö
();

490 
	`NEXT_ARG
();

491 i‡(
	`∑r£_munge
(&
¨gc
, &
¨gv
,&
£l
.sel)) {

492 
	`Ârötf
(
°dîr
, "IŒegÆÖedô c⁄°ru˘ (%sË\n", *
¨gv
);

493 
	`ex∂aö
();

496 
ok
++;

503 i‡(!
ok
) {

504 
	`ex∂aö
();

508 i‡(
¨gc
) {

509 i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

510 
£l
.£l.
a˘i⁄
 = 
TC_ACT_RECLASSIFY
;

511 
	`NEXT_ARG
();

512 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

513 
£l
.£l.
a˘i⁄
 = 
TC_ACT_PIPE
;

514 
	`NEXT_ARG
();

515 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

516 
	`m©ches
(*
¨gv
, "shot") == 0) {

517 
£l
.£l.
a˘i⁄
 = 
TC_ACT_SHOT
;

518 
	`NEXT_ARG
();

519 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

520 
£l
.£l.
a˘i⁄
 = 
TC_ACT_UNSPEC
;

521 
	`NEXT_ARG
();

522 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

523 
£l
.£l.
a˘i⁄
 = 
TC_ACT_OK
;

524 
	`NEXT_ARG
();

528 i‡(
¨gc
) {

529 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

530 
	`NEXT_ARG
();

531 i‡(
	`gë_u32
(&
£l
.£l.
ödex
, *
¨gv
, 10)) {

532 
	`Ârötf
(
°dîr
, "Pedit: Illegal \"index\"\n");

535 
¨gc
--;

536 
¨gv
++;

537 
iok
++;

541 
èû
 = 
	`NLMSG_TAIL
(
n
);

542 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

543 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_PEDIT_PARMS
,&
£l
, (£l.£l)+£l.£l.
nkeys
*(
tc_≥dô_key
));

544 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

546 *
¨gc_p
 = 
¨gc
;

547 *
¨gv_p
 = 
¨gv
;

549 
	}
}

552 
	$¥öt_≥dô
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
)

554 
tc_≥dô_£l
 *
£l
;

555 
π©å
 *
tb
[
TCA_PEDIT_MAX
 + 1];

556 
	`SPRINT_BUF
(
b1
);

558 i‡(
¨g
 =
NULL
)

561 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_PEDIT_MAX
, 
¨g
);

563 i‡(
tb
[
TCA_PEDIT_PARMS
] =
NULL
) {

564 
	`Ârötf
(
f
, "[NULLÖeditÖarameters]");

567 
£l
 = 
	`RTA_DATA
(
tb
[
TCA_PEDIT_PARMS
]);

569 
	`Ârötf
(
f
, "Öedôá˘i⁄ %†key†%d\¿", 
	`a˘i⁄_n2a
(
£l
->
a˘i⁄
, 
b1
,  (b1)),£l->
nkeys
);

570 
	`Ârötf
(
f
, "\àödex %dÑe‡%d böd %d", 
£l
->
ödex
,£l->
ªf˙t
, sñ->
böd˙t
);

572 i‡(
show_°©s
) {

573 i‡(
tb
[
TCA_PEDIT_TM
]) {

574 
tcf_t
 *
tm
 = 
	`RTA_DATA
(
tb
[
TCA_PEDIT_TM
]);

575 
	`¥öt_tm
(
f
,
tm
);

578 i‡(
£l
->
nkeys
) {

579 
i
;

580 
tc_≥dô_key
 *
key
 = 
£l
->
keys
;

582 
i
=0; i<
£l
->
nkeys
; i++, 
key
++) {

583 
	`Ârötf
(
f
, "\n\àkey #%d",
i
);

584 
	`Ârötf
(
f
, "át %d: val %08x mask %08x",

585 ()
key
->
off
,

586 ()
	`¡ohl
(
key
->
vÆ
),

587 ()
	`¡ohl
(
key
->
mask
));

590 
	`Ârötf
(
f
, "\≈edô %x key†%d i†nŸ LEGIT", 
£l
->
ödex
,£l->
nkeys
);

594 
	`Ârötf
(
f
, "\n ");

596 
	}
}

599 
	$≥dô_¥öt_x°©s
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

602 
	}
}

604 
a˘i⁄_utû
 
	g≥dô_a˘i⁄_utû
 = {

605 .
id
 = "pedit",

606 .
	g∑r£_a›t
 = 
∑r£_≥dô
,

607 .
	g¥öt_a›t
 = 
¥öt_≥dô
,

	@m_pedit.h

13 #i‚de‡
_ACT_PEDIT_H_


14 
	#_ACT_PEDIT_H_
 1

	)

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/öë.h
>

24 
	~<°rög.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~<löux/tc_a˘/tc_≥dô.h
>

29 
	#MAX_OFFS
 128

	)

31 
	#TIPV4
 1

	)

32 
	#TIPV6
 2

	)

33 
	#TINT
 3

	)

34 
	#TU32
 4

	)

36 
	#RU32
 0xFFFFFFFF

	)

37 
	#RU16
 0xFFFF

	)

38 
	#RU8
 0xFF

	)

40 
	#PEDITKINDSIZ
 16

	)

42 
	sm_≥dô_utû


44 
m_≥dô_utû
 *
	m√xt
;

45 
	mid
[
PEDITKINDSIZ
];

46 (*
	m∑r£_≥›t
)(*
	m¨gc_p
, ***
	m¨gv_p
,
tc_≥dô_£l
 *
	m£l
,
tc_≥dô_key
 *
	mtkey
);

50 
∑r£_cmd
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 
Àn
, 
ty≥
,__u32 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

51 
∑ck_key
(
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

52 
∑ck_key32
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

53 
∑ck_key16
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

54 
∑ck_key8
(
__u32
 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

55 
∑r£_vÆ
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 * 
vÆ
, 
ty≥
);

56 
∑r£_cmd
(*
¨gc_p
, ***
¨gv_p
, 
__u32
 
Àn
, 
ty≥
,__u32 
ªèö
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

57 
∑r£_off£t
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
);

58 
∑r£_≥dô
(
a˘i⁄_utû
 *
a
, *
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
);

59 
¥öt_≥dô
(
a˘i⁄_utû
 *
au
,
FILE
 * 
f
, 
π©å
 *
¨g
);

60 
≥dô_¥öt_x°©s
(
a˘i⁄_utû
 *
au
, 
FILE
 *
f
, 
π©å
 *
x°©s
);

	@m_police.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<√töë/ö.h
>

23 
	~<¨∑/öë.h
>

24 
	~<°rög.h
>

26 
	~"utûs.h
"

27 
	~"tc_utû.h
"

29 
a˘i⁄_utû
 
	gpﬁi˚_a˘i⁄_utû
 = {

30 .
id
 = "police",

31 .
	g∑r£_a›t
 = 
a˘_∑r£_pﬁi˚
,

32 .
	g¥öt_a›t
 = 
¥öt_pﬁi˚
,

35 
	$ußge
()

37 
	`Ârötf
(
°dîr
, "Usage: ...ÖoliceÑate BPS burst BYTES[/BYTES] [ mtu BYTES[/BYTES] ]\n");

38 
	`Ârötf
(
°dîr
, " [Öeakrate BPS ] [ávrate BPS ]\n");

39 
	`Ârötf
(
°dîr
, " [ ACTIONTERM ]\n");

40 
	`Ârötf
(
°dîr
, "Old Syntax ACTIONTERM :=áction <EXCEEDACT>[/NOTEXCEEDACT] \n");

41 
	`Ârötf
(
°dîr
, "New Syntax ACTIONTERM := conform-exceed <EXCEEDACT>[/NOTEXCEEDACT] \n");

42 
	`Ârötf
(
°dîr
, "Where: *EXCEEDACT :=Öipe | ok |Ñeclassify | drop | continue \n");

43 
	`Ârötf
(
°dîr
, "Where:Öipe is only valid forÇew syntax \n");

44 
	`exô
(-1);

45 
	}
}

47 
	$ex∂aö1
(*
¨g
)

49 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

50 
	}
}

52 *
	$pﬁi˚_a˘i⁄_n2a
(
a˘i⁄
, *
buf
, 
Àn
)

54 
a˘i⁄
) {

58 
TC_POLICE_OK
:

61 
TC_POLICE_SHOT
:

64 
TC_POLICE_RECLASSIFY
:

66 
TC_POLICE_PIPE
:

69 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
a˘i⁄
);

70  
buf
;

72 
	}
}

74 
	$pﬁi˚_a˘i⁄_a2n
(*
¨g
, *
ªsu…
)

76 
ªs
;

78 i‡(
	`m©ches
(
¨g
, "continue") == 0)

79 
ªs
 = -1;

80 i‡(
	`m©ches
(
¨g
, "drop") == 0)

81 
ªs
 = 
TC_POLICE_SHOT
;

82 i‡(
	`m©ches
(
¨g
, "shot") == 0)

83 
ªs
 = 
TC_POLICE_SHOT
;

84 i‡(
	`m©ches
(
¨g
, "pass") == 0)

85 
ªs
 = 
TC_POLICE_OK
;

86 i‡(
	`°rcmp
(
¨g
, "ok") == 0)

87 
ªs
 = 
TC_POLICE_OK
;

88 i‡(
	`m©ches
(
¨g
, "reclassify") == 0)

89 
ªs
 = 
TC_POLICE_RECLASSIFY
;

90 i‡(
	`m©ches
(
¨g
, "pipe") == 0)

91 
ªs
 = 
TC_POLICE_PIPE
;

93 
dummy
;

94 i‡(
	`ssˇnf
(
¨g
, "%d%c", &
ªs
, &
dummy
) != 1)

97 *
ªsu…
 = 
ªs
;

99 
	}
}

102 
	$gë_pﬁi˚_ªsu…
(*
a˘i⁄
, *
ªsu…
, *
¨g
)

104 *
p
 = 
	`°rchr
(
¨g
, '/');

106 i‡(
p
)

107 *
p
 = 0;

109 i‡(
	`pﬁi˚_a˘i⁄_a2n
(
¨g
, 
a˘i⁄
)) {

110 i‡(
p
)

111 *
p
 = '/';

115 i‡(
p
) {

116 *
p
 = '/';

117 i‡(
	`pﬁi˚_a˘i⁄_a2n
(
p
+1, 
ªsu…
))

121 
	}
}

124 
	$a˘_∑r£_pﬁi˚
(
a˘i⁄_utû
 *
a
,*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

126 
¨gc
 = *
¨gc_p
;

127 **
¨gv
 = *
¨gv_p
;

128 
ªs
 = -1;

129 
ok
=0;

130 
tc_pﬁi˚
 
p
;

131 
__u32
 
πab
[256];

132 
__u32
 
±ab
[256];

133 
__u32
 
avøã
 = 0;

134 
¥esu…
 = 0;

135 
buf„r
=0, 
mtu
=0, 
mpu
=0;

136 
R˚Œ_log
=-1, 
P˚Œ_log
 = -1;

137 
π©å
 *
èû
;

139 
	`mem£t
(&
p
, 0, (p));

140 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

142 i‡(
a
)

143 
	`NEXT_ARG
();

145 i‡(
¨gc
 <= 0)

148 
¨gc
 > 0) {

150 i‡(
	`m©ches
(*
¨gv
, "index") == 0) {

151 
	`NEXT_ARG
();

152 i‡(
	`gë_u32
(&
p
.
ödex
, *
¨gv
, 10)) {

153 
	`Ârötf
(
°dîr
, "Illegal \"index\"\n");

156 } i‡(
	`m©ches
(*
¨gv
, "burst") == 0 ||

157 
	`°rcmp
(*
¨gv
, "buffer") == 0 ||

158 
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

159 
	`NEXT_ARG
();

160 i‡(
buf„r
) {

161 
	`Ârötf
(
°dîr
, "Double \"buffer/burst\" spec\n");

164 i‡(
	`gë_size_™d_˚Œ
(&
buf„r
, &
R˚Œ_log
, *
¨gv
) < 0) {

165 
	`ex∂aö1
("buffer");

168 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0 ||

169 
	`°rcmp
(*
¨gv
, "minburst") == 0) {

170 
	`NEXT_ARG
();

171 i‡(
mtu
) {

172 
	`Ârötf
(
°dîr
, "Double \"mtu/minburst\" spec\n");

175 i‡(
	`gë_size_™d_˚Œ
(&
mtu
, &
P˚Œ_log
, *
¨gv
) < 0) {

176 
	`ex∂aö1
("mtu");

179 } i‡(
	`°rcmp
(*
¨gv
, "mpu") == 0) {

180 
	`NEXT_ARG
();

181 i‡(
mpu
) {

182 
	`Ârötf
(
°dîr
, "Double \"mpu\" spec\n");

185 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

186 
	`ex∂aö1
("mpu");

189 } i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

190 
	`NEXT_ARG
();

191 i‡(
p
.
øã
.rate) {

192 
	`Ârötf
(
°dîr
, "Double \"rate\" spec\n");

195 i‡(
	`gë_øã
(&
p
.
øã
.øã, *
¨gv
)) {

196 
	`ex∂aö1
("rate");

199 } i‡(
	`°rcmp
(*
¨gv
, "avrate") == 0) {

200 
	`NEXT_ARG
();

201 i‡(
avøã
) {

202 
	`Ârötf
(
°dîr
, "Double \"avrate\" spec\n");

205 i‡(
	`gë_øã
(&
avøã
, *
¨gv
)) {

206 
	`ex∂aö1
("avrate");

209 } i‡(
	`m©ches
(*
¨gv
, "peakrate") == 0) {

210 
	`NEXT_ARG
();

211 i‡(
p
.
≥akøã
.
øã
) {

212 
	`Ârötf
(
°dîr
, "Double \"peakrate\" spec\n");

215 i‡(
	`gë_øã
(&
p
.
≥akøã
.
øã
, *
¨gv
)) {

216 
	`ex∂aö1
("peakrate");

219 } i‡(
	`m©ches
(*
¨gv
, "reclassify") == 0) {

220 
p
.
a˘i⁄
 = 
TC_POLICE_RECLASSIFY
;

221 } i‡(
	`m©ches
(*
¨gv
, "drop") == 0 ||

222 
	`m©ches
(*
¨gv
, "shot") == 0) {

223 
p
.
a˘i⁄
 = 
TC_POLICE_SHOT
;

224 } i‡(
	`m©ches
(*
¨gv
, "continue") == 0) {

225 
p
.
a˘i⁄
 = 
TC_POLICE_UNSPEC
;

226 } i‡(
	`m©ches
(*
¨gv
, "pass") == 0) {

227 
p
.
a˘i⁄
 = 
TC_POLICE_OK
;

228 } i‡(
	`m©ches
(*
¨gv
, "pipe") == 0) {

229 
p
.
a˘i⁄
 = 
TC_POLICE_PIPE
;

230 } i‡(
	`°rcmp
(*
¨gv
, "conform-exceed") == 0) {

231 
	`NEXT_ARG
();

232 i‡(
	`gë_pﬁi˚_ªsu…
(&
p
.
a˘i⁄
, &
¥esu…
, *
¨gv
)) {

233 
	`Ârötf
(
°dîr
, "Illegal \"action\"\n");

236 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

237 
	`ußge
();

241 
ok
++;

242 
¨gc
--; 
¨gv
++;

245 i‡(!
ok
)

248 i‡(
p
.
øã
.øã && !
buf„r
) {

249 
	`Ârötf
(
°dîr
, "\"burst\"Ñequires \"rate\".\n");

252 i‡(
p
.
≥akøã
.
øã
) {

253 i‡(!
p
.
øã
.rate) {

254 
	`Ârötf
(
°dîr
, "\"peakrate\"Ñequires \"rate\".\n");

257 i‡(!
mtu
) {

258 
	`Ârötf
(
°dîr
, "\"mtu\" isÑequired, if \"peakrate\" isÑequested.\n");

263 i‡(
p
.
øã
.rate) {

264 i‡((
R˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
p
.
øã
.øã, 
πab
, R˚Œ_log, 
mtu
, 
mpu
)) < 0) {

265 
	`Ârötf
(
°dîr
, "TBF: failedÅo calculateÑateÅable.\n");

268 
p
.
bur°
 = 
	`tc_ˇlc_xmôtime
’.
øã
.øã, 
buf„r
);

269 
p
.
øã
.
˚Œ_log
 = 
R˚Œ_log
;

270 
p
.
øã
.
mpu
 = mpu;

272 
p
.
mtu
 = mtu;

273 i‡(
p
.
≥akøã
.
øã
) {

274 i‡((
P˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
p
.
≥akøã
.
øã
, 
±ab
, P˚Œ_log, 
mtu
, 
mpu
)) < 0) {

275 
	`Ârötf
(
°dîr
, "POLICE: failedÅo calculateÖeakÑateÅable.\n");

278 
p
.
≥akøã
.
˚Œ_log
 = 
P˚Œ_log
;

279 
p
.
≥akøã
.
mpu
 = mpu;

282 
èû
 = 
	`NLMSG_TAIL
(
n
);

283 
	`add©å_l
(
n
, 
MAX_MSG
, 
tˇ_id
, 
NULL
, 0);

284 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_POLICE_TBF
, &
p
, (p));

285 i‡(
p
.
øã
.rate)

286 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_POLICE_RATE
, 
πab
, 1024);

287 i‡(
p
.
≥akøã
.
øã
)

288 
	`add©å_l
(
n
, 
MAX_MSG
, 
TCA_POLICE_PEAKRATE
, 
±ab
, 1024);

289 i‡(
avøã
)

290 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_POLICE_AVRATE
, 
avøã
);

291 i‡(
¥esu…
)

292 
	`add©å32
(
n
, 
MAX_MSG
, 
TCA_POLICE_RESULT
, 
¥esu…
);

294 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

295 
ªs
 = 0;

297 *
¨gc_p
 = 
¨gc
;

298 *
¨gv_p
 = 
¨gv
;

299  
ªs
;

300 
	}
}

302 
	$∑r£_pﬁi˚
(*
¨gc_p
, ***
¨gv_p
, 
tˇ_id
, 
∆msghdr
 *
n
)

304  
	`a˘_∑r£_pﬁi˚
(
NULL
,
¨gc_p
,
¨gv_p
,
tˇ_id
,
n
);

305 
	}
}

308 
	$¥öt_pﬁi˚
(
a˘i⁄_utû
 *
a
, 
FILE
 *
f
, 
π©å
 *
¨g
)

310 
	`SPRINT_BUF
(
b1
);

311 
tc_pﬁi˚
 *
p
;

312 
π©å
 *
tb
[
TCA_POLICE_MAX
+1];

313 
buf„r
;

315 i‡(
¨g
 =
NULL
)

318 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_POLICE_MAX
, 
¨g
);

320 i‡(
tb
[
TCA_POLICE_TBF
] =
NULL
) {

321 
	`Ârötf
(
f
, "[NULLÖoliceÅbf]");

324 #i‚de‡
STOOPID_8BYTE


325 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_POLICE_TBF
]Ë< (*
p
)) {

326 
	`Ârötf
(
f
, "[truncatedÖoliceÅbf]");

330 
p
 = 
	`RTA_DATA
(
tb
[
TCA_POLICE_TBF
]);

332 
	`Ârötf
(
f
, "Öﬁi˚ 0x%x ", 
p
->
ödex
);

333 
	`Ârötf
(
f
, "øã %†", 
	`•röt_øã
(
p
->
øã
.øã, 
b1
));

334 
buf„r
 = 
	`tc_ˇlc_xmôsize
(
p
->
øã
.øã,Ö->
bur°
);

335 
	`Ârötf
(
f
, "bur° %†", 
	`•röt_size
(
buf„r
, 
b1
));

336 
	`Ârötf
(
f
, "mtu %†", 
	`•röt_size
(
p
->
mtu
, 
b1
));

337 i‡(
show_øw
)

338 
	`Ârötf
(
f
, "[%08x] ", 
p
->
bur°
);

339 i‡(
p
->
≥akøã
.
øã
)

340 
	`Ârötf
(
f
, "≥akøã %†", 
	`•röt_øã
(
p
->
≥akøã
.
øã
, 
b1
));

341 i‡(
tb
[
TCA_POLICE_AVRATE
])

342 
	`Ârötf
(
f
, "avøã %†", 
	`•röt_øã
(*(
__u32
*)
	`RTA_DATA
(
tb
[
TCA_POLICE_AVRATE
]), 
b1
));

343 
	`Ârötf
(
f
, "a˘i⁄ %s", 
	`pﬁi˚_a˘i⁄_n2a
(
p
->
a˘i⁄
, 
b1
, (b1)));

344 i‡(
tb
[
TCA_POLICE_RESULT
]) {

345 
	`Ârötf
(
f
, "/%†", 
	`pﬁi˚_a˘i⁄_n2a
(*(*)
	`RTA_DATA
(
tb
[
TCA_POLICE_RESULT
]), 
b1
, (b1)));

347 
	`Ârötf
(
f
, " ");

348 
	`Ârötf
(
f
, "\ƒe‡%d böd %d\n",
p
->
ªf˙t
,Ö->
böd˙t
);

351 
	}
}

354 
	$tc_¥öt_pﬁi˚
(
FILE
 *
f
, 
π©å
 *
¨g
) {

355  
	`¥öt_pﬁi˚
(&
pﬁi˚_a˘i⁄_utû
,
f
,
¨g
);

356 
	}
}

	@p_icmp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

28 
	$∑r£_icmp
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

30 
ªs
 = -1;

32 
¨gc
 = *
¨gc_p
;

33 **
¨gv
 = *
¨gv_p
;

35 i‡(
¨gc
 < 2)

38 i‡(
	`°rcmp
(*
¨gv
, "type") == 0) {

39 
	`NEXT_ARG
();

40 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 0);

41 
d⁄e
;

43 i‡(
	`°rcmp
(*
¨gv
, "code") == 0) {

44 
	`NEXT_ARG
();

45 
ªs
 = 
	`∑r£_u8
(&
¨gc
, &
¨gv
, 1);

46 
d⁄e
;

50 
d⁄e
:

51 *
¨gc_p
 = 
¨gc
;

52 *
¨gv_p
 = 
¨gv
;

54  
ªs
;

55 
	}
}

57 
m_≥dô_utû
 
	gp_≥dô_icmp
 = {

58 
NULL
,

60 
∑r£_icmp
,

	@p_ip.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

27 
	$∑r£_ù
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

29 
ªs
 = -1;

30 
¨gc
 = *
¨gc_p
;

31 **
¨gv
 = *
¨gv_p
;

33 i‡(
¨gc
 < 2)

36 i‡(
	`°rcmp
(*
¨gv
, "src") == 0) {

37 
	`NEXT_ARG
();

38 
tkey
->
off
 = 12;

39 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 4, 
TIPV4
,
RU32
,
£l
,
tkey
);

40 
d⁄e
;

42 i‡(
	`°rcmp
(*
¨gv
, "dst") == 0) {

43 
	`NEXT_ARG
();

44 
tkey
->
off
 = 16;

45 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 4, 
TIPV4
,
RU32
,
£l
,
tkey
);

46 
d⁄e
;

52 i‡(
	`°rcmp
(*
¨gv
, "tos"Ë=0 || 
	`m©ches
(*argv, "dsfield") == 0) {

53 
	`NEXT_ARG
();

54 
tkey
->
off
 = 1;

55 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

56 
d⁄e
;

58 i‡(
	`°rcmp
(*
¨gv
, "ihl") == 0) {

59 
	`NEXT_ARG
();

60 
tkey
->
off
 = 0;

61 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

62 
d⁄e
;

64 i‡(
	`°rcmp
(*
¨gv
, "protocol") == 0) {

65 
	`NEXT_ARG
();

66 
tkey
->
off
 = 9;

67 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

68 
d⁄e
;

71 i‡(
	`m©ches
(*
¨gv
, "precedence") == 0) {

72 
	`NEXT_ARG
();

73 
tkey
->
off
 = 1;

74 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

75 
d⁄e
;

78 i‡(
	`°rcmp
(*
¨gv
, "nofrag") == 0) {

79 
	`NEXT_ARG
();

80 
tkey
->
off
 = 6;

81 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x3F,
£l
,
tkey
);

82 
d⁄e
;

85 i‡(
	`°rcmp
(*
¨gv
, "firstfrag") == 0) {

86 
	`NEXT_ARG
();

87 
tkey
->
off
 = 6;

88 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x1F,
£l
,
tkey
);

89 
d⁄e
;

91 i‡(
	`°rcmp
(*
¨gv
, "ce") == 0) {

92 
	`NEXT_ARG
();

93 
tkey
->
off
 = 6;

94 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x80,
£l
,
tkey
);

95 
d⁄e
;

97 i‡(
	`°rcmp
(*
¨gv
, "df") == 0) {

98 
	`NEXT_ARG
();

99 
tkey
->
off
 = 6;

100 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x40,
£l
,
tkey
);

101 
d⁄e
;

103 i‡(
	`°rcmp
(*
¨gv
, "mf") == 0) {

104 
	`NEXT_ARG
();

105 
tkey
->
off
 = 6;

106 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,0x20,
£l
,
tkey
);

107 
d⁄e
;

109 i‡(
	`°rcmp
(*
¨gv
, "dport") == 0) {

110 
	`NEXT_ARG
();

111 
tkey
->
off
 = 22;

112 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 2, 
TU32
,
RU16
,
£l
,
tkey
);

113 
d⁄e
;

115 i‡(
	`°rcmp
(*
¨gv
, "sport") == 0) {

116 
	`NEXT_ARG
();

117 
tkey
->
off
 = 20;

118 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 2, 
TU32
,
RU16
,
£l
,
tkey
);

119 
d⁄e
;

121 i‡(
	`°rcmp
(*
¨gv
, "icmp_type") == 0) {

122 
	`NEXT_ARG
();

123 
tkey
->
off
 = 20;

124 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

125 
d⁄e
;

127 i‡(
	`°rcmp
(*
¨gv
, "icmp_code") == 0) {

128 
	`NEXT_ARG
();

129 
tkey
->
off
 = 20;

130 
ªs
 = 
	`∑r£_cmd
(&
¨gc
, &
¨gv
, 1, 
TU32
,
RU8
,
£l
,
tkey
);

131 
d⁄e
;

135 
d⁄e
:

136 *
¨gc_p
 = 
¨gc
;

137 *
¨gv_p
 = 
¨gv
;

138  
ªs
;

139 
	}
}

142 
	$∑r£_ù6
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

144 
ªs
 = -1;

145  
ªs
;

146 
	}
}

148 
m_≥dô_utû
 
	gp_≥dô_ù
 = {

149 
NULL
,

151 
∑r£_ù
,

155 
m_≥dô_utû
 
	gp_≥dô_ù6
 = {

156 
NULL
,

158 
∑r£_ù6
,

	@p_tcp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

27 
	$∑r£_t˝
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

29 
ªs
 = -1;

30  
ªs
;

31 
	}
}

32 
m_≥dô_utû
 
	gp_≥dô_t˝
 = {

33 
NULL
,

35 
∑r£_t˝
,

	@p_udp.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~"utûs.h
"

23 
	~"tc_utû.h
"

24 
	~"m_≥dô.h
"

27 
	$∑r£_udp
(*
¨gc_p
, ***
¨gv_p
,
tc_≥dô_£l
 *
£l
,
tc_≥dô_key
 *
tkey
)

29 
ªs
 = -1;

30  
ªs
;

31 
	}
}

33 
m_≥dô_utû
 
	gp_≥dô_udp
 = {

34 
NULL
,

36 
∑r£_udp
,

	@q_atm.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<˘y≥.h
>

12 
	~<sy¶og.h
>

13 
	~<f˙é.h
>

14 
	~<sys/sockë.h
>

15 
	~<sys/io˘l.h
>

16 
	~<√töë/ö.h
>

17 
	~<¨∑/öë.h
>

18 
	~<°rög.h
>

19 
	~<©m.h
>

20 
	~<löux/©mdev.h
>

21 
	~<löux/©m¨p.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

27 
	#MAX_HDR_LEN
 64

	)

29 
	#ußge
(Ë(-1)

	)

32 
	$©m_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

34 i‡(
¨gc
) {

35 
	`Ârötf
(
°dîr
,"Usage:átm\n");

39 
	}
}

42 
	$ex∂aö
()

44 
	`Ârötf
(
°dîr
, "Usage: ...átm (Övc ADDR | svc ADDR [ sap SAP ] ) "

46 
	`Ârötf
(
°dîr
, " [ hdr HEX... ] [Éxcess ( CLASSID | clp ) ] "

48 
	}
}

51 
	$©m_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

52 
∆msghdr
 *
n
)

54 
sockaddr_©msvc
 
addr
;

55 
©m_qos
 
qos
;

56 
©m_ßp
 
ßp
;

57 
hdr
[
MAX_HDR_LEN
];

58 
__u32
 
ex˚ss
 = 0;

59 
π©å
 *
èû
;

60 
¢dbuf
 = 0;

61 
hdr_Àn
 = -1;

62 
£t_˛ù
 = 0;

63 
s
;

65 
	`mem£t
(&
addr
,0,(addr));

66 (Ë
	`ãxt2qos
("Øl5,ubr:sdu=9180,rx:n⁄e",&
qos
,0);

67 (Ë
	`ãxt2ßp
("bŒi:l2=iso8802",&
ßp
,0);

68 
¨gc
 > 0) {

69 i‡(!
	`°rcmp
(*
¨gv
,"pvc")) {

70 
	`NEXT_ARG
();

71 i‡(
	`ãxt2©m
(*
¨gv
,(
sockaddr
 *Ë&
addr
,

72 (
addr
),
T2A_PVC
 | 
T2A_NAME
) < 0) {

73 
	`ex∂aö
();

77 i‡(!
	`°rcmp
(*
¨gv
,"svc")) {

78 
	`NEXT_ARG
();

79 i‡(
	`ãxt2©m
(*
¨gv
,(
sockaddr
 *Ë&
addr
,

80 (
addr
),
T2A_SVC
 | 
T2A_NAME
) < 0) {

81 
	`ex∂aö
();

85 i‡(!
	`°rcmp
(*
¨gv
,"qos")) {

86 
	`NEXT_ARG
();

87 i‡(
	`ãxt2qos
(*
¨gv
,&
qos
,0) < 0) {

88 
	`ex∂aö
();

92 i‡(!
	`°rcmp
(*
¨gv
,"sndbuf")) {

93 *
íd
;

95 
	`NEXT_ARG
();

96 
¢dbuf
 = 
	`°πﬁ
(*
¨gv
,&
íd
,0);

97 i‡(*
íd
) {

98 
	`ex∂aö
();

102 i‡(!
	`°rcmp
(*
¨gv
,"sap")) {

103 
	`NEXT_ARG
();

104 i‡(
addr
.
ßs_Ámûy
 !
AF_ATMSVC
 ||

105 
	`ãxt2ßp
(*
¨gv
,&
ßp
,
T2A_NAME
) < 0) {

106 
	`ex∂aö
();

110 i‡(!
	`°rcmp
(*
¨gv
,"hdr")) {

111 *
±r
;

112 *
wÆk
;

114 
	`NEXT_ARG
();

115 
±r
 = 
hdr
;

116 
wÆk
 = *
¨gv
; *walk; walk++) {

117 
tmp
;

119 i‡(
±r
 =
hdr
+
MAX_HDR_LEN
) {

120 
	`Ârötf
(
°dîr
,"header isÅooÜong\n");

123 i‡(*
wÆk
 == '.') ;

124 i‡(!
	`isxdigô
(
wÆk
[0]) || !walk[1] ||

125 !
	`isxdigô
(
wÆk
[1])) {

126 
	`ex∂aö
();

129 
	`ssˇnf
(
wÆk
,"%2x",&
tmp
);

130 *
±r
++ = 
tmp
;

131 
wÆk
++;

133 
hdr_Àn
 = 
±r
-
hdr
;

135 i‡(!
	`°rcmp
(*
¨gv
,"excess")) {

136 
	`NEXT_ARG
();

137 i‡(!
	`°rcmp
(*
¨gv
,"˛p")Ë
ex˚ss
 = 0;

138 i‡(
	`gë_tc_˛assid
(&
ex˚ss
,*
¨gv
)) {

139 
	`ex∂aö
();

143 i‡(!
	`°rcmp
(*
¨gv
,"clip")) {

144 
£t_˛ù
 = 1;

147 
	`ex∂aö
();

150 
¨gc
--;

151 
¨gv
++;

153 
s
 = 
	`sockë
(
addr
.
ßs_Ámûy
,
SOCK_DGRAM
,0);

154 i‡(
s
 < 0) {

155 
	`≥º‹
("socket");

158 i‡(
	`£tsock›t
(
s
,
SOL_ATM
,
SO_ATMQOS
,&
qos
,(qos)) < 0) {

159 
	`≥º‹
("SO_ATMQOS");

162 i‡(
¢dbuf
)

163 i‡(
	`£tsock›t
(
s
,
SOL_SOCKET
,
SO_SNDBUF
,&
¢dbuf
,(sndbuf)) < 0) {

164 
	`≥º‹
("SO_SNDBUF");

167 i‡(
addr
.
ßs_Ámûy
 =
AF_ATMSVC
 && 
	`£tsock›t
(
s
,
SOL_ATM
,
SO_ATMSAP
,

168 &
ßp
,(sap)) < 0) {

169 
	`≥º‹
("SO_ATMSAP");

172 i‡(
	`c⁄√˘
(
s
,(
sockaddr
 *Ë&
addr
,addr.
ßs_Ámûy
 =
AF_ATMPVC
 ?

173 (
sockaddr_©mpvc
Ë: (
addr
)) < 0) {

174 
	`≥º‹
("connect");

177 i‡(
£t_˛ù
)

178 i‡(
	`io˘l
(
s
,
ATMARP_MKIP
,0) < 0) {

179 
	`≥º‹
("ioctl ATMARP_MKIP");

182 
èû
 = 
	`NLMSG_TAIL
(
n
);

183 
	`add©å_l
(
n
,1024,
TCA_OPTIONS
,
NULL
,0);

184 
	`add©å_l
(
n
,1024,
TCA_ATM_FD
,&
s
,(s));

185 i‡(
ex˚ss
Ë
	`add©å_l
(
n
,1024,
TCA_ATM_EXCESS
,&excess,(excess));

186 i‡(
hdr_Àn
 !-1Ë
	`add©å_l
(
n
,1024,
TCA_ATM_HDR
,
hdr
,hdr_len);

187 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

189 
	}
}

193 
	$©m_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

195 
π©å
 *
tb
[
TCA_ATM_MAX
+1];

196 
buf„r
[
MAX_ATM_ADDR_LEN
+1];

198 i‡(
›t
 =
NULL
)

201 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_ATM_MAX
, 
›t
);

202 i‡(
tb
[
TCA_ATM_ADDR
]) {

203 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_ADDR
]) <

204 (
sockaddr_©mpvc
))

205 
	`Ârötf
(
°dîr
,"ATM:áddressÅoo short\n");

207 i‡(
	`©m2ãxt
(
buf„r
,
MAX_ATM_ADDR_LEN
,

208 
	`RTA_DATA
(
tb
[
TCA_ATM_ADDR
]),
A2T_PRETTY
 | 
A2T_NAME
) <

209 0Ë
	`Ârötf
(
°dîr
,"atm2textÉrror\n");

210 
	`Ârötf
(
f
,"pv¯%†",
buf„r
);

213 i‡(
tb
[
TCA_ATM_HDR
]) {

214 
i
;

216 
	`Ârötf
(
f
,"hdr");

217 
i
 = 0; i < 
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_HDR
]); i++)

218 
	`Ârötf
(
f
,"%c%02x",
i
 ? '.' : ' ',

219 ((*Ë
	`RTA_DATA
(
tb
[
TCA_ATM_HDR
]))[
i
]);

220 i‡(!
i
Ë
	`Ârötf
(
f
," .");

221 
	`Ârötf
(
f
," ");

223 i‡(
tb
[
TCA_ATM_EXCESS
]) {

224 
__u32
 
ex˚ss
;

226 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_EXCESS
]Ë< (
ex˚ss
))

227 
	`Ârötf
(
°dîr
,"ATM:Éxcess class IDÅoo short\n");

229 
ex˚ss
 = *(
__u32
 *Ë
	`RTA_DATA
(
tb
[
TCA_ATM_EXCESS
]);

230 i‡(!
ex˚ss
Ë
	`Ârötf
(
f
,"excess clp ");

232 
buf
[64];

234 
	`¥öt_tc_˛assid
(
buf
,(buf),
ex˚ss
);

235 
	`Ârötf
(
f
,"ex˚s†%†",
buf
);

239 i‡(
tb
[
TCA_ATM_STATE
]) {

240 c⁄° *
m≠
[] = { 
ATM_VS2TXT_MAP
 };

241 
°©e
;

243 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_ATM_STATE
]Ë< (
°©e
))

244 
	`Ârötf
(
°dîr
,"ATM: state fieldÅoo short\n");

246 
°©e
 = *(*Ë
	`RTA_DATA
(
tb
[
TCA_ATM_STATE
]);

247 
	`Ârötf
(
f
,"%†",
m≠
[
°©e
]);

251 
	}
}

254 
qdisc_utû
 
	g©m_qdisc_utû
 = {

255 .
id
 = "atm",

256 .
	g∑r£_q›t
 = 
©m_∑r£_›t
,

257 .
	g¥öt_q›t
 = 
©m_¥öt_›t
,

258 .
	g∑r£_c›t
 = 
©m_∑r£_˛ass_›t
,

259 .
	g¥öt_c›t
 = 
©m_¥öt_›t
,

	@q_cbq.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

25 
	~"tc_cbq.h
"

27 
	$ex∂aö_˛ass
()

29 
	`Ârötf
(
°dîr
, "Usage: ... cbq bandwidth BPSÑate BPS maxburst PKTS [ávpkt BYTES ]\n");

30 
	`Ârötf
(
°dîr
, " [ minburst PKTS ] [ bounded ] [ isolated ]\n");

31 
	`Ârötf
(
°dîr
, " [állot BYTES ] [ mpu BYTES ] [ weight RATE ]\n");

32 
	`Ârötf
(
°dîr
, " [Örio NUMBER ] [ cell BYTES ] [Éwma LOG ]\n");

33 
	`Ârötf
(
°dîr
, " [Éstimator INTERVAL TIME_CONSTANT ]\n");

34 
	`Ârötf
(
°dîr
, " [ split CLASSID ] [ defmap MASK/CHANGE ]\n");

35 
	}
}

37 
	$ex∂aö
()

39 
	`Ârötf
(
°dîr
, "Usage: ... cbq bandwidth BPSávpkt BYTES [ mpu BYTES ]\n");

40 
	`Ârötf
(
°dîr
, " [ cell BYTES ] [Éwma LOG ]\n");

41 
	}
}

43 
	$ex∂aö1
(*
¨g
)

45 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

46 
	}
}

48 
	#ußge
(Ë(-1)

	)

50 
	$cbq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

52 
tc_øã•ec
 
r
;

53 
tc_cbq_lss›t
 
lss
;

54 
__u32
 
πab
[256];

55 
mpu
=0, 
avpkt
=0, 
ÆlŸ
=0;

56 
˚Œ_log
=-1;

57 
ewma_log
=-1;

58 
π©å
 *
èû
;

60 
	`mem£t
(&
lss
, 0, (lss));

61 
	`mem£t
(&
r
, 0, (r));

63 
¨gc
 > 0) {

64 i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0 ||

65 
	`°rcmp
(*
¨gv
, "rate") == 0) {

66 
	`NEXT_ARG
();

67 i‡(
	`gë_øã
(&
r
.
øã
, *
¨gv
)) {

68 
	`ex∂aö1
("bandwidth");

71 } i‡(
	`°rcmp
(*
¨gv
, "ewma") == 0) {

72 
	`NEXT_ARG
();

73 i‡(
	`gë_öãgî
(&
ewma_log
, *
¨gv
, 0)) {

74 
	`ex∂aö1
("ewma");

77 i‡(
ewma_log
 > 31) {

78 
	`Ârötf
(
°dîr
, "ewma_log must be < 32\n");

81 } i‡(
	`°rcmp
(*
¨gv
, "cell") == 0) {

82 
˚Œ
;

83 
i
;

84 
	`NEXT_ARG
();

85 i‡(
	`gë_size
(&
˚Œ
, *
¨gv
)) {

86 
	`ex∂aö1
("cell");

89 
i
=0; i<32; i++)

90 i‡((1<<
i
Ë=
˚Œ
)

92 i‡(
i
>=32) {

93 
	`Ârötf
(
°dîr
, "cell must be 2^n\n");

96 
˚Œ_log
 = 
i
;

97 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

98 
	`NEXT_ARG
();

99 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

100 
	`ex∂aö1
("avpkt");

103 } i‡(
	`°rcmp
(*
¨gv
, "mpu") == 0) {

104 
	`NEXT_ARG
();

105 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

106 
	`ex∂aö1
("mpu");

109 } i‡(
	`°rcmp
(*
¨gv
, "allot") == 0) {

110 
	`NEXT_ARG
();

112 i‡(
	`gë_size
(&
ÆlŸ
, *
¨gv
)) {

113 
	`ex∂aö1
("allot");

116 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

117 
	`ex∂aö
();

120 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

121 
	`ex∂aö
();

124 
¨gc
--; 
¨gv
++;

129 i‡(
r
.
øã
 == 0) {

130 
	`Ârötf
(
°dîr
, "CBQ: bandwidth isÑequiredÖarameter.\n");

133 i‡(
avpkt
 == 0) {

134 
	`Ârötf
(
°dîr
, "CBQ: \"avpkt\" isÑequired.\n");

137 i‡(
ÆlŸ
 < (
avpkt
*3)/2)

138 
ÆlŸ
 = (
avpkt
*3)/2;

140 i‡((
˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
r
.
øã
, 
πab
, cñl_log, 
ÆlŸ
, 
mpu
)) < 0) {

141 
	`Ârötf
(
°dîr
, "CBQ: failedÅo calculateÑateÅable.\n");

144 
r
.
˚Œ_log
 = cell_log;

145 
r
.
mpu
 = mpu;

147 i‡(
ewma_log
 < 0)

148 
ewma_log
 = 
TC_CBQ_DEF_EWMA
;

149 
lss
.
ewma_log
 =Éwma_log;

150 
lss
.
maxidÀ
 = 
	`tc_ˇlc_xmôtime
(
r
.
øã
, 
avpkt
);

151 
lss
.
ch™ge
 = 
TCF_CBQ_LSS_MAXIDLE
|
TCF_CBQ_LSS_EWMA
|
TCF_CBQ_LSS_AVPKT
;

152 
lss
.
avpkt
 =ávpkt;

154 
èû
 = 
	`NLMSG_TAIL
(
n
);

155 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

156 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_RATE
, &
r
, (r));

157 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_LSSOPT
, &
lss
, (lss));

158 
	`add©å_l
(
n
, 3024, 
TCA_CBQ_RTAB
, 
πab
, 1024);

159 i‡(
show_øw
) {

160 
i
;

161 
i
=0; i<256; i++)

162 
	`¥ötf
("%u ", 
πab
[
i
]);

163 
	`¥ötf
("\n");

165 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

167 
	}
}

169 
	$cbq_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

171 
wº_ok
=0, 
f›t_ok
=0;

172 
tc_øã•ec
 
r
;

173 
tc_cbq_lss›t
 
lss
;

174 
tc_cbq_wº›t
 
wº
;

175 
tc_cbq_f›t
 
f›t
;

176 
tc_cbq_ovl
 
ovl
;

177 
__u32
 
πab
[256];

178 
mpu
=0;

179 
˚Œ_log
=-1;

180 
ewma_log
=-1;

181 
bndw
 = 0;

182 
möbur°
=0, 
maxbur°
=0;

183 
π©å
 *
èû
;

185 
	`mem£t
(&
r
, 0, (r));

186 
	`mem£t
(&
lss
, 0, (lss));

187 
	`mem£t
(&
wº
, 0, (wrr));

188 
	`mem£t
(&
f›t
, 0, (fopt));

189 
	`mem£t
(&
ovl
, 0, (ovl));

191 
¨gc
 > 0) {

192 i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

193 
	`NEXT_ARG
();

194 i‡(
	`gë_øã
(&
r
.
øã
, *
¨gv
)) {

195 
	`ex∂aö1
("rate");

198 } i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0) {

199 
	`NEXT_ARG
();

200 i‡(
	`gë_øã
(&
bndw
, *
¨gv
)) {

201 
	`ex∂aö1
("bandwidth");

204 } i‡(
	`°rcmp
(*
¨gv
, "minidle") == 0) {

205 
	`NEXT_ARG
();

206 i‡(
	`gë_u32
(&
lss
.
möidÀ
, *
¨gv
, 0)) {

207 
	`ex∂aö1
("minidle");

210 
lss
.
ch™ge
 |
TCF_CBQ_LSS_MINIDLE
;

211 } i‡(
	`°rcmp
(*
¨gv
, "minburst") == 0) {

212 
	`NEXT_ARG
();

213 i‡(
	`gë_u32
(&
möbur°
, *
¨gv
, 0)) {

214 
	`ex∂aö1
("minburst");

217 
lss
.
ch™ge
 |
TCF_CBQ_LSS_OFFTIME
;

218 } i‡(
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

219 
	`NEXT_ARG
();

220 i‡(
	`gë_u32
(&
maxbur°
, *
¨gv
, 0)) {

221 
	`ex∂aö1
("maxburst");

224 
lss
.
ch™ge
 |
TCF_CBQ_LSS_MAXIDLE
;

225 } i‡(
	`°rcmp
(*
¨gv
, "bounded") == 0) {

226 
lss
.
Êags
 |
TCF_CBQ_LSS_BOUNDED
;

227 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

228 } i‡(
	`°rcmp
(*
¨gv
, "borrow") == 0) {

229 
lss
.
Êags
 &~
TCF_CBQ_LSS_BOUNDED
;

230 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

231 } i‡(
	`°rcmp
(*
¨gv
, "isolated") == 0) {

232 
lss
.
Êags
 |
TCF_CBQ_LSS_ISOLATED
;

233 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

234 } i‡(
	`°rcmp
(*
¨gv
, "sharing") == 0) {

235 
lss
.
Êags
 &~
TCF_CBQ_LSS_ISOLATED
;

236 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

237 } i‡(
	`°rcmp
(*
¨gv
, "ewma") == 0) {

238 
	`NEXT_ARG
();

239 i‡(
	`gë_öãgî
(&
ewma_log
, *
¨gv
, 0)) {

240 
	`ex∂aö1
("ewma");

243 i‡(
ewma_log
 > 31) {

244 
	`Ârötf
(
°dîr
, "ewma_log must be < 32\n");

247 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
;

248 } i‡(
	`°rcmp
(*
¨gv
, "cell") == 0) {

249 
˚Œ
;

250 
i
;

251 
	`NEXT_ARG
();

252 i‡(
	`gë_size
(&
˚Œ
, *
¨gv
)) {

253 
	`ex∂aö1
("cell");

256 
i
=0; i<32; i++)

257 i‡((1<<
i
Ë=
˚Œ
)

259 i‡(
i
>=32) {

260 
	`Ârötf
(
°dîr
, "cell must be 2^n\n");

263 
˚Œ_log
 = 
i
;

264 } i‡(
	`°rcmp
(*
¨gv
, "prio") == 0) {

265 
¥io
;

266 
	`NEXT_ARG
();

267 i‡(
	`gë_u32
(&
¥io
, *
¨gv
, 0)) {

268 
	`ex∂aö1
("prio");

271 i‡(
¥io
 > 
TC_CBQ_MAXPRIO
) {

272 
	`Ârötf
(
°dîr
, "\"¥io\" mu° bênumbî i¿thêøngê1...%d\n", 
TC_CBQ_MAXPRIO
);

275 
wº
.
¥i‹ôy
 = 
¥io
;

276 
wº_ok
++;

277 } i‡(
	`°rcmp
(*
¨gv
, "allot") == 0) {

278 
	`NEXT_ARG
();

279 i‡(
	`gë_size
(&
wº
.
ÆlŸ
, *
¨gv
)) {

280 
	`ex∂aö1
("allot");

283 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

284 
	`NEXT_ARG
();

285 i‡(
	`gë_size
(&
lss
.
avpkt
, *
¨gv
)) {

286 
	`ex∂aö1
("avpkt");

289 
lss
.
ch™ge
 |
TCF_CBQ_LSS_AVPKT
;

290 } i‡(
	`°rcmp
(*
¨gv
, "mpu") == 0) {

291 
	`NEXT_ARG
();

292 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

293 
	`ex∂aö1
("mpu");

296 } i‡(
	`°rcmp
(*
¨gv
, "weight") == 0) {

297 
	`NEXT_ARG
();

298 i‡(
	`gë_size
(&
wº
.
weight
, *
¨gv
)) {

299 
	`ex∂aö1
("weight");

302 
wº_ok
++;

303 } i‡(
	`°rcmp
(*
¨gv
, "split") == 0) {

304 
	`NEXT_ARG
();

305 i‡(
	`gë_tc_˛assid
(&
f›t
.
•lô
, *
¨gv
)) {

306 
	`Ârötf
(
°dîr
, "Invalid splitÇode ID.\n");

307 
	`ußge
();

309 
f›t_ok
++;

310 } i‡(
	`°rcmp
(*
¨gv
, "defmap") == 0) {

311 
îr
;

312 
	`NEXT_ARG
();

313 
îr
 = 
	`ssˇnf
(*
¨gv
, "%08x/%08x", &
f›t
.
defm≠
, &f›t.
defch™ge
);

314 i‡(
îr
 < 1) {

315 
	`Ârötf
(
°dîr
, "Invalid defmap, should be MASK32[/MASK]\n");

318 i‡(
îr
 == 1)

319 
f›t
.
defch™ge
 = ~0;

320 
f›t_ok
++;

321 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

322 
	`ex∂aö_˛ass
();

325 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

326 
	`ex∂aö_˛ass
();

329 
¨gc
--; 
¨gv
++;

335 i‡(
r
.
øã
) {

336 
pktsize
 = 
wº
.
ÆlŸ
;

337 i‡(
wº
.
ÆlŸ
 < (
lss
.
avpkt
*3)/2)

338 
wº
.
ÆlŸ
 = (
lss
.
avpkt
*3)/2;

339 i‡((
˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
r
.
øã
, 
πab
, cñl_log, 
pktsize
, 
mpu
)) < 0) {

340 
	`Ârötf
(
°dîr
, "CBQ: failedÅo calculateÑateÅable.\n");

343 
r
.
˚Œ_log
 = cell_log;

344 
r
.
mpu
 = mpu;

346 i‡(
ewma_log
 < 0)

347 
ewma_log
 = 
TC_CBQ_DEF_EWMA
;

348 
lss
.
ewma_log
 =Éwma_log;

349 i‡(
lss
.
ch™ge
&(
TCF_CBQ_LSS_OFFTIME
|
TCF_CBQ_LSS_MAXIDLE
)) {

350 i‡(
lss
.
avpkt
 == 0) {

351 
	`Ârötf
(
°dîr
, "CBQ:ávpkt isÑequired for max/minburst.\n");

354 i‡(
bndw
==0 || 
r
.
øã
 == 0) {

355 
	`Ârötf
(
°dîr
, "CBQ: bandwidth&rateáreÑequired for max/minburst.\n");

359 i‡(
wº
.
¥i‹ôy
 =0 && (
n
->
∆msg_Êags
&
NLM_F_EXCL
)) {

360 
wº_ok
 = 1;

361 
wº
.
¥i‹ôy
 = 
TC_CBQ_MAXPRIO
;

362 i‡(
wº
.
ÆlŸ
 == 0)

363 
wº
.
ÆlŸ
 = (
lss
.
avpkt
*3)/2;

365 i‡(
wº_ok
) {

366 i‡(
wº
.
weight
 == 0)

367 
wº
.
weight
 = (wº.
¥i‹ôy
 =
TC_CBQ_MAXPRIO
Ë? 1 : 
r
.
øã
;

368 i‡(
wº
.
ÆlŸ
 == 0) {

369 
	`Ârötf
(
°dîr
, "CBQ: \"allot\" isÑequiredÅo set WRRÖarameters.\n");

373 i‡(
lss
.
ch™ge
&
TCF_CBQ_LSS_MAXIDLE
) {

374 
lss
.
maxidÀ
 = 
	`tc_cbq_ˇlc_maxidÀ
(
bndw
, 
r
.
øã
,Üss.
avpkt
, 
ewma_log
, 
maxbur°
);

375 
lss
.
ch™ge
 |
TCF_CBQ_LSS_MAXIDLE
;

376 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
|
TCF_CBQ_LSS_AVPKT
;

378 i‡(
lss
.
ch™ge
&
TCF_CBQ_LSS_OFFTIME
) {

379 
lss
.
of·ime
 = 
	`tc_cbq_ˇlc_of·ime
(
bndw
, 
r
.
øã
,Üss.
avpkt
, 
ewma_log
, 
möbur°
);

380 
lss
.
ch™ge
 |
TCF_CBQ_LSS_OFFTIME
;

381 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
|
TCF_CBQ_LSS_AVPKT
;

383 i‡(
lss
.
ch™ge
&
TCF_CBQ_LSS_MINIDLE
) {

384 
lss
.
möidÀ
 <<lss.
ewma_log
;

385 
lss
.
ch™ge
 |
TCF_CBQ_LSS_EWMA
;

388 
èû
 = 
	`NLMSG_TAIL
(
n
);

389 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

390 i‡(
lss
.
ch™ge
) {

391 
lss
.
ch™ge
 |
TCF_CBQ_LSS_FLAGS
;

392 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_LSSOPT
, &
lss
, (lss));

394 i‡(
wº_ok
)

395 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_WRROPT
, &
wº
, (wrr));

396 i‡(
f›t_ok
)

397 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_FOPT
, &
f›t
, (fopt));

398 i‡(
r
.
øã
) {

399 
	`add©å_l
(
n
, 1024, 
TCA_CBQ_RATE
, &
r
, (r));

400 
	`add©å_l
(
n
, 3024, 
TCA_CBQ_RTAB
, 
πab
, 1024);

401 i‡(
show_øw
) {

402 
i
;

403 
i
=0; i<256; i++)

404 
	`¥ötf
("%u ", 
πab
[
i
]);

405 
	`¥ötf
("\n");

408 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

410 
	}
}

413 
	$cbq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

415 
π©å
 *
tb
[
TCA_CBQ_MAX
+1];

416 
tc_øã•ec
 *
r
 = 
NULL
;

417 
tc_cbq_lss›t
 *
lss
 = 
NULL
;

418 
tc_cbq_wº›t
 *
wº
 = 
NULL
;

419 
tc_cbq_f›t
 *
f›t
 = 
NULL
;

420 
tc_cbq_ovl
 *
ovl
 = 
NULL
;

421 
	`SPRINT_BUF
(
b1
);

423 i‡(
›t
 =
NULL
)

426 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_CBQ_MAX
, 
›t
);

428 i‡(
tb
[
TCA_CBQ_RATE
]) {

429 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_RATE
]Ë< (*
r
))

430 
	`Ârötf
(
°dîr
, "CBQ:Åoo shortÑate opt\n");

432 
r
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_RATE
]);

434 i‡(
tb
[
TCA_CBQ_LSSOPT
]) {

435 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_LSSOPT
]Ë< (*
lss
))

436 
	`Ârötf
(
°dîr
, "CBQ:Åoo shortÜss opt\n");

438 
lss
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_LSSOPT
]);

440 i‡(
tb
[
TCA_CBQ_WRROPT
]) {

441 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_WRROPT
]Ë< (*
wº
))

442 
	`Ârötf
(
°dîr
, "CBQ:Åoo short wrr opt\n");

444 
wº
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_WRROPT
]);

446 i‡(
tb
[
TCA_CBQ_FOPT
]) {

447 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_FOPT
]Ë< (*
f›t
))

448 
	`Ârötf
(
°dîr
, "CBQ:Åoo short fopt\n");

450 
f›t
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_FOPT
]);

452 i‡(
tb
[
TCA_CBQ_OVL_STRATEGY
]) {

453 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_OVL_STRATEGY
]Ë< (*
ovl
))

454 
	`Ârötf
(
°dîr
, "CBQ:Åoo short overlimit strategy %u/%u\n",

455 (Ë
	`RTA_PAYLOAD
(
tb
[
TCA_CBQ_OVL_STRATEGY
]),

456 (Ë(*
ovl
));

458 
ovl
 = 
	`RTA_DATA
(
tb
[
TCA_CBQ_OVL_STRATEGY
]);

461 i‡(
r
) {

462 
buf
[64];

463 
	`¥öt_øã
(
buf
, (buf), 
r
->
øã
);

464 
	`Ârötf
(
f
, "øã %†", 
buf
);

465 i‡(
show_dëaûs
) {

466 
	`Ârötf
(
f
, "˚Œ %ub ", 1<<
r
->
˚Œ_log
);

467 i‡(
r
->
mpu
)

468 
	`Ârötf
(
f
, "mpu %ub ", 
r
->
mpu
);

471 i‡(
lss
 &&Üss->
Êags
) {

472 
comma
=0;

473 
	`Ârötf
(
f
, "(");

474 i‡(
lss
->
Êags
&
TCF_CBQ_LSS_BOUNDED
) {

475 
	`Ârötf
(
f
, "bounded");

476 
comma
=1;

478 i‡(
lss
->
Êags
&
TCF_CBQ_LSS_ISOLATED
) {

479 i‡(
comma
)

480 
	`Ârötf
(
f
, ",");

481 
	`Ârötf
(
f
, "isolated");

483 
	`Ârötf
(
f
, ") ");

485 i‡(
wº
) {

486 i‡(
wº
->
¥i‹ôy
 !
TC_CBQ_MAXPRIO
)

487 
	`Ârötf
(
f
, "¥iÿ%u", 
wº
->
¥i‹ôy
);

489 
	`Ârötf
(
f
, "prioÇo-transmit");

490 i‡(
show_dëaûs
) {

491 
buf
[64];

492 
	`Ârötf
(
f
, "/%u ", 
wº
->
˝ri‹ôy
);

493 i‡(
wº
->
weight
 != 1) {

494 
	`¥öt_øã
(
buf
, (buf), 
wº
->
weight
);

495 
	`Ârötf
(
f
, "weighà%†", 
buf
);

497 i‡(
wº
->
ÆlŸ
)

498 
	`Ârötf
(
f
, "ÆlŸ %ub ", 
wº
->
ÆlŸ
);

501 i‡(
lss
 && 
show_dëaûs
) {

502 
	`Ârötf
(
f
, "\∆evñ %uÉwm®%uávpkà%ub ", 
lss
->
Àvñ
,Üss->
ewma_log
,Üss->
avpkt
);

503 i‡(
lss
->
maxidÀ
) {

504 
	`Ârötf
(
f
, "maxidÀ %†", 
	`•röt_ticks
(
lss
->
maxidÀ
>>lss->
ewma_log
, 
b1
));

505 i‡(
show_øw
)

506 
	`Ârötf
(
f
, "[%08x] ", 
lss
->
maxidÀ
);

508 i‡(
lss
->
möidÀ
!=0x7fffffff) {

509 
	`Ârötf
(
f
, "möidÀ %†", 
	`•röt_ticks
(
lss
->
möidÀ
>>lss->
ewma_log
, 
b1
));

510 i‡(
show_øw
)

511 
	`Ârötf
(
f
, "[%08x] ", 
lss
->
möidÀ
);

513 i‡(
lss
->
of·ime
) {

514 
	`Ârötf
(
f
, "of·imê%†", 
	`•röt_ticks
(
lss
->
of·ime
, 
b1
));

515 i‡(
show_øw
)

516 
	`Ârötf
(
f
, "[%08x] ", 
lss
->
of·ime
);

519 i‡(
f›t
 && 
show_dëaûs
) {

520 
buf
[64];

521 
	`¥öt_tc_˛assid
(
buf
, (buf), 
f›t
->
•lô
);

522 
	`Ârötf
(
f
, "\n•lô %†", 
buf
);

523 i‡(
f›t
->
defm≠
) {

524 
	`Ârötf
(
f
, "defm≠ %08x", 
f›t
->
defm≠
);

528 
	}
}

530 
	$cbq_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

532 
tc_cbq_x°©s
 *
°
;

534 i‡(
x°©s
 =
NULL
)

537 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

540 
°
 = 
	`RTA_DATA
(
x°©s
);

541 
	`Ârötf
(
f
, " b‹rowed %u ovîa˘i⁄†%uávgidÀ %g undîtimê%g", 
°
->
b‹rows
,

542 
°
->
ovîa˘i⁄s
, ()°->
avgidÀ
, ()°->
undîtime
);

544 
	}
}

546 
qdisc_utû
 
	gcbq_qdisc_utû
 = {

547 .
id
 = "cbq",

548 .
	g∑r£_q›t
 = 
cbq_∑r£_›t
,

549 .
	g¥öt_q›t
 = 
cbq_¥öt_›t
,

550 .
	g¥öt_x°©s
 = 
cbq_¥öt_x°©s
,

551 .
	g∑r£_c›t
 = 
cbq_∑r£_˛ass_›t
,

552 .
	g¥öt_c›t
 = 
cbq_¥öt_›t
,

	@q_dsmark.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sy¶og.h
>

12 
	~<f˙é.h
>

13 
	~<sys/sockë.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<°rög.h
>

18 
	~"utûs.h
"

19 
	~"tc_utû.h
"

22 
	#ußge
(Ë(-1)

	)

25 
	$ex∂aö
()

27 
	`Ârötf
(
°dîr
,"Usage: dsmark indices INDICES [ default_index "

29 
	}
}

32 
	$dsm¨k_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

33 
∆msghdr
 *
n
)

35 
π©å
 *
èû
;

36 
__u16
 
öd
;

37 *
íd
;

38 
dÊt
,
£t_tc_ödex
;

40 
öd
 = 
£t_tc_ödex
 = 0;

41 
dÊt
 = -1;

42 
¨gc
 > 0) {

43 i‡(!
	`°rcmp
(*
¨gv
,"indices")) {

44 
	`NEXT_ARG
();

45 
öd
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

46 i‡(*
íd
) {

47 
	`ex∂aö
();

51 i‡(!
	`°rcmp
(*
¨gv
,"default_index") || !strcmp(*argv,

53 
	`NEXT_ARG
();

54 
dÊt
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

55 i‡(*
íd
) {

56 
	`ex∂aö
();

60 i‡(!
	`°rcmp
(*
¨gv
,"set_tc_index")) {

61 
£t_tc_ödex
 = 1;

64 
	`ex∂aö
();

67 
¨gc
--;

68 
¨gv
++;

70 i‡(!
öd
) {

71 
	`ex∂aö
();

74 
èû
 = 
	`NLMSG_TAIL
(
n
);

75 
	`add©å_l
(
n
,1024,
TCA_OPTIONS
,
NULL
,0);

76 
	`add©å_l
(
n
,1024,
TCA_DSMARK_INDICES
,&
öd
,(ind));

77 i‡(
dÊt
 != -1) {

78 
__u16
 
tmp
 = 
dÊt
;

80 
	`add©å_l
(
n
,1024,
TCA_DSMARK_DEFAULT_INDEX
,&
tmp
,(tmp));

82 i‡(
£t_tc_ödex
Ë
	`add©å_l
(
n
,1024,
TCA_DSMARK_SET_TC_INDEX
,
NULL
,0);

83 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

85 
	}
}

88 
	$ex∂aö_˛ass
()

90 
	`Ârötf
(
°dîr
, "Usage: ... dsmark [ mask MASK ] [ value VALUE ]\n");

91 
	}
}

94 
	$dsm¨k_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

95 
∆msghdr
 *
n
)

97 
π©å
 *
èû
;

98 
__u8
 
tmp
;

99 *
íd
;

101 
èû
 = 
	`NLMSG_TAIL
(
n
);

102 
	`add©å_l
(
n
,1024,
TCA_OPTIONS
,
NULL
,0);

103 
¨gc
 > 0) {

104 i‡(!
	`°rcmp
(*
¨gv
,"mask")) {

105 
	`NEXT_ARG
();

106 
tmp
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

107 i‡(*
íd
) {

108 
	`ex∂aö_˛ass
();

111 
	`add©å_l
(
n
,1024,
TCA_DSMARK_MASK
,&
tmp
,1);

113 i‡(!
	`°rcmp
(*
¨gv
,"value")) {

114 
	`NEXT_ARG
();

115 
tmp
 = 
	`°πoul
(*
¨gv
,&
íd
,0);

116 i‡(*
íd
) {

117 
	`ex∂aö_˛ass
();

120 
	`add©å_l
(
n
,1024,
TCA_DSMARK_VALUE
,&
tmp
,1);

123 
	`ex∂aö_˛ass
();

126 
¨gc
--;

127 
¨gv
++;

129 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

131 
	}
}

135 
	$dsm¨k_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

137 
π©å
 *
tb
[
TCA_DSMARK_MAX
+1];

139 i‡(!
›t
)  0;

140 
	`mem£t
(
tb
, 0, (tb));

141 
	`∑r£_π©å
(
tb
, 
TCA_DSMARK_MAX
, 
	`RTA_DATA
(
›t
), 
	`RTA_PAYLOAD
(opt));

142 i‡(
tb
[
TCA_DSMARK_MASK
]) {

143 i‡(!
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_MASK
]))

144 
	`Ârötf
(
°dîr
,"dsmark:Émpty mask\n");

145 
	`Ârötf
(
f
,"mask 0x%02x ",

146 *(
__u8
 *Ë
	`RTA_DATA
(
tb
[
TCA_DSMARK_MASK
]));

148 i‡(
tb
[
TCA_DSMARK_VALUE
]) {

149 i‡(!
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_VALUE
]))

150 
	`Ârötf
(
°dîr
,"dsmark:Émpty value\n");

151 
	`Ârötf
(
f
,"value 0x%02x ",

152 *(
__u8
 *Ë
	`RTA_DATA
(
tb
[
TCA_DSMARK_VALUE
]));

154 i‡(
tb
[
TCA_DSMARK_INDICES
]) {

155 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_INDICES
]Ë< (
__u16
))

156 
	`Ârötf
(
°dîr
,"dsmark: indicesÅoo short\n");

157 
	`Ârötf
(
f
,"indices 0x%04x ",

158 *(
__u16
 *Ë
	`RTA_DATA
(
tb
[
TCA_DSMARK_INDICES
]));

160 i‡(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]) {

161 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]Ë< (
__u16
))

162 
	`Ârötf
(
°dîr
,"dsmark: default_indexÅoo short\n");

163 
	`Ârötf
(
f
,"default_index 0x%04x ",

164 *(
__u16
 *Ë
	`RTA_DATA
(
tb
[
TCA_DSMARK_DEFAULT_INDEX
]));

166 i‡(
tb
[
TCA_DSMARK_SET_TC_INDEX
]Ë
	`Ârötf
(
f
,"set_tc_index ");

168 
	}
}

171 
qdisc_utû
 
	gdsm¨k_qdisc_utû
 = {

172 .
id
 = "dsmark",

173 .
	g∑r£_q›t
 = 
dsm¨k_∑r£_›t
,

174 .
	g¥öt_q›t
 = 
dsm¨k_¥öt_›t
,

175 .
	g∑r£_c›t
 = 
dsm¨k_∑r£_˛ass_›t
,

176 .
	g¥öt_c›t
 = 
dsm¨k_¥öt_›t
,

	@q_fifo.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ... [p|b]fifo [Üimit NUMBER ]\n");

29 
	}
}

31 
	#ußge
(Ë(-1)

	)

33 
	$fifo_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

35 
ok
=0;

36 
tc_fifo_q›t
 
›t
;

37 
	`mem£t
(&
›t
, 0, (opt));

39 
¨gc
 > 0) {

40 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

41 
	`NEXT_ARG
();

42 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

43 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

46 
ok
++;

47 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

48 
	`ex∂aö
();

51 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

52 
	`ex∂aö
();

55 
¨gc
--; 
¨gv
++;

58 i‡(
ok
)

59 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

61 
	}
}

63 
	$fifo_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

65 
tc_fifo_q›t
 *
q›t
;

67 i‡(
›t
 =
NULL
)

70 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

72 
q›t
 = 
	`RTA_DATA
(
›t
);

73 i‡(
	`°rcmp
(
qu
->
id
, "bfifo") == 0) {

74 
	`SPRINT_BUF
(
b1
);

75 
	`Ârötf
(
f
, "limô %s", 
	`•röt_size
(
q›t
->
limô
, 
b1
));

77 
	`Ârötf
(
f
, "limô %up", 
q›t
->
limô
);

79 
	}
}

82 
qdisc_utû
 
	gbfifo_qdisc_utû
 = {

83 .
id
 = "bfifo",

84 .
	g∑r£_q›t
 = 
fifo_∑r£_›t
,

85 .
	g¥öt_q›t
 = 
fifo_¥öt_›t
,

88 
qdisc_utû
 
	gpfifo_qdisc_utû
 = {

89 .
id
 = "pfifo",

90 .
	g∑r£_q›t
 = 
fifo_∑r£_›t
,

91 .
	g¥öt_q›t
 = 
fifo_¥öt_›t
,

94 
¥io_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
);

95 
qdisc_utû
 
	gpfifo_Á°_qdisc_utû
 = {

96 .
id
 = "pfifo_fast",

97 .
	g¥öt_q›t
 = 
¥io_¥öt_›t
,

	@q_gred.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<sy¶og.h
>

19 
	~<f˙é.h
>

20 
	~<sys/sockë.h
>

21 
	~<√töë/ö.h
>

22 
	~<¨∑/öë.h
>

23 
	~<°rög.h
>

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

28 
	~"tc_ªd.h
"

32 
	#DPRINTF
(
f‹m©
,
¨gs
...Ë
	`Ârötf
(
°dîr
,f‹m©,##¨gs)

	)

34 
	#DPRINTF
(
f‹m©
,
¨gs
...)

	)

37 
	$ex∂aö
()

39 
	`Ârötf
(
°dîr
, "Usage: ... gred DP drop-probabilityÜimit BYTES "

41 
	`Ârötf
(
°dîr
, "ávpkt BYTES burst PACKETSÖrobability PROBABILITY "

43 
	`Ârötf
(
°dîr
, " [prio value]\n");

44 
	`Ârötf
(
°dîr
," OR ...\n");

45 
	`Ârötf
(
°dîr
," gred setup DPs <num of DPs> default <default DP> "

47 
	}
}

49 
	#ußge
(Ë(-1)

	)

51 
	$öô_gªd
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

54 
π©å
 *
èû
;

55 
tc_gªd_s›t
 
›t
;

56 
	`mem£t
(&
›t
, 0, (
tc_gªd_s›t
));

58 
¨gc
 > 0) {

59 
	`DPRINTF
(
°dîr
,"öô_gªd: invoked wôh %s\n",*
¨gv
);

60 i‡(
	`°rcmp
(*
¨gv
, "DPs") == 0) {

61 
	`NEXT_ARG
();

62 
	`DPRINTF
(
°dîr
,"öô_gªd:Çext_¨g wôh %s\n",*
¨gv
);

63 
›t
.
DPs
=
	`°πﬁ
(*
¨gv
, (**)
NULL
, 10);

64 i‡(
›t
.
DPs
 >
MAX_DPs
) {

65 
	`Ârötf
(
°dîr
, "DP†=%u \n",
›t
.
DPs
);

66 
	`Ârötf
(
°dîr
, "Illegal \"DPs\"\n");

67 
	`Ârötf
(
°dîr
, "GRED: only %d DPsáre "

68 "cuºíéy suµ‹ãd\n",
MAX_DPs
);

71 } i‡(
	`°rcmp
(*
¨gv
, "default") == 0) {

72 
	`NEXT_ARG
();

73 
›t
.
def_DP
=
	`°πﬁ
(*
¨gv
, (**)
NULL
, 10);

74 i‡(!
›t
.
DPs
) {

75 
	`Ârötf
(
°dîr
, "\"default DP\" must be "

79 i‡(
›t
.
def_DP
>›t.
DPs
) {

83 
	`Ârötf
(
°dîr
, "\"deÁu… DP\" mu° bêÀs†th™ %d\n",
›t
.
DPs
);

86 } i‡(
	`°rcmp
(*
¨gv
, "grio") == 0) {

87 
›t
.
grio
=1;

88 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

89 
	`ex∂aö
();

92 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

93 
	`ex∂aö
();

96 
¨gc
--; 
¨gv
++;

99 i‡((!
›t
.
DPs
Ë|| (!›t.
def_DP
))

101 
	`Ârötf
(
°dîr
, "Illegal gred setupÖarameters \n");

104 
	`DPRINTF
("TC_GRED: sídög DPs=%d deÁu…=%d\n",
›t
.
DPs
,›t.
def_DP
);

105 
n
->
∆msg_Êags
|=
NLM_F_CREATE
;

106 
èû
 = 
	`NLMSG_TAIL
(
n
);

107 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

108 
	`add©å_l
(
n
, 1024, 
TCA_GRED_DPS
, &
›t
, (
tc_gªd_s›t
));

109 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

111 
	}
}

115 
	$gªd_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

117 
ok
=0;

118 
tc_gªd_q›t
 
›t
;

119 
bur°
 = 0;

120 
avpkt
 = 0;

121 
¥obabûôy
 = 0.02;

122 
øã
 = 0;

123 
wlog
;

124 
__u8
 
sbuf
[256];

125 
π©å
 *
èû
;

127 
	`mem£t
(&
›t
, 0, (opt));

129 
¨gc
 > 0) {

130 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

131 
	`NEXT_ARG
();

132 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

133 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

136 
ok
++;

137 } i‡(
	`°rcmp
(*
¨gv
, "setup") == 0) {

138 i‡(
ok
) {

139 
	`Ârötf
(
°dîr
, "Illegal \"setup\"\n");

142  
	`öô_gªd
(
qu
,
¨gc
-1, 
¨gv
+1,
n
);

144 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

145 
	`NEXT_ARG
();

146 i‡(
	`gë_size
(&
›t
.
qth_mö
, *
¨gv
)) {

147 
	`Ârötf
(
°dîr
, "Illegal \"min\"\n");

150 
ok
++;

151 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

152 
	`NEXT_ARG
();

153 i‡(
	`gë_size
(&
›t
.
qth_max
, *
¨gv
)) {

154 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

157 
ok
++;

158 } i‡(
	`°rcmp
(*
¨gv
, "DP") == 0) {

159 
	`NEXT_ARG
();

160 
›t
.
DP
=
	`°πﬁ
(*
¨gv
, (**)
NULL
, 10);

161 
	`DPRINTF
 ("\¿******* DP =%u\n",
›t
.
DP
);

162 i‡(
›t
.
DP
 >
MAX_DPs
) {

163 
	`Ârötf
(
°dîr
, "DP =%u \n",
›t
.
DP
);

164 
	`Ârötf
(
°dîr
, "Illegal \"DP\"\n");

165 
	`Ârötf
(
°dîr
, "GRED: o∆y %d DP†¨êcuºíéy suµ‹ãd\n",
MAX_DPs
);

168 
ok
++;

169 } i‡(
	`°rcmp
(*
¨gv
, "burst") == 0) {

170 
	`NEXT_ARG
();

171 i‡(
	`gë_unsig√d
(&
bur°
, *
¨gv
, 0)) {

172 
	`Ârötf
(
°dîr
, "Illegal \"burst\"\n");

175 
ok
++;

176 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

177 
	`NEXT_ARG
();

178 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

179 
	`Ârötf
(
°dîr
, "Illegal \"avpkt\"\n");

182 
ok
++;

183 } i‡(
	`°rcmp
(*
¨gv
, "probability") == 0) {

184 
	`NEXT_ARG
();

185 i‡(
	`ssˇnf
(*
¨gv
, "%lg", &
¥obabûôy
) != 1) {

186 
	`Ârötf
(
°dîr
, "Illegal \"probability\"\n");

189 
ok
++;

190 } i‡(
	`°rcmp
(*
¨gv
, "prio") == 0) {

191 
	`NEXT_ARG
();

192 
›t
.
¥io
=
	`°πﬁ
(*
¨gv
, (**)
NULL
, 10);

194 
ok
++;

195 } i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0) {

196 
	`NEXT_ARG
();

197 i‡(
	`gë_øã
(&
øã
, *
¨gv
)) {

198 
	`Ârötf
(
°dîr
, "Illegal \"bandwidth\"\n");

201 
ok
++;

202 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

203 
	`ex∂aö
();

206 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

207 
	`ex∂aö
();

210 
¨gc
--; 
¨gv
++;

213 i‡(!
ok
)

216 i‡(
øã
 == 0)

217 
	`gë_øã
(&
øã
, "10Mbit");

219 i‡(!
›t
.
qth_mö
 || !›t.
qth_max
 || !
bur°
 || !›t.
limô
 || !
avpkt
 ||

220 (
›t
.
DP
<0)) {

221 
	`Ârötf
(
°dîr
, "RequiredÖarameter (min, max, burst,Üimit, "

226 i‡((
wlog
 = 
	`tc_ªd_evÆ_ewma
(
›t
.
qth_mö
, 
bur°
, 
avpkt
)) < 0) {

227 
	`Ârötf
(
°dîr
, "GRED: failedÅo calculate EWMA constant.\n");

230 i‡(
wlog
 >= 10)

231 
	`Ârötf
(
°dîr
, "GRED: WARNING. Burst %d seemsÅo beÅo "

232 "œrge.\n", 
bur°
);

233 
›t
.
Wlog
 = 
wlog
;

234 i‡((
wlog
 = 
	`tc_ªd_evÆ_P
(
›t
.
qth_mö
, o±.
qth_max
, 
¥obabûôy
)) < 0) {

235 
	`Ârötf
(
°dîr
, "GRED: failedÅo calculateÖrobability.\n");

238 
›t
.
Plog
 = 
wlog
;

239 i‡((
wlog
 = 
	`tc_ªd_evÆ_idÀ_dampög
(
›t
.
Wlog
, 
avpkt
, 
øã
, 
sbuf
)) < 0)

241 
	`Ârötf
(
°dîr
, "GRED: failedÅo calculate idle damping "

245 
›t
.
S˚Œ_log
 = 
wlog
;

247 
èû
 = 
	`NLMSG_TAIL
(
n
);

248 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

249 
	`add©å_l
(
n
, 1024, 
TCA_GRED_PARMS
, &
›t
, (opt));

250 
	`add©å_l
(
n
, 1024, 
TCA_GRED_STAB
, 
sbuf
, 256);

251 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

253 
	}
}

255 
	$gªd_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

257 
π©å
 *
tb
[
TCA_GRED_STAB
+1];

258 
tc_gªd_q›t
 *
q›t
;

259 
i
;

260 
	`SPRINT_BUF
(
b1
);

261 
	`SPRINT_BUF
(
b2
);

262 
	`SPRINT_BUF
(
b3
);

263 
	`SPRINT_BUF
(
b4
);

264 
	`SPRINT_BUF
(
b5
);

266 i‡(
›t
 =
NULL
)

269 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_GRED_STAB
, 
›t
);

271 i‡(
tb
[
TCA_GRED_PARMS
] =
NULL
)

274 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_GRED_PARMS
]);

275 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_GRED_PARMS
]Ë< (*
q›t
)*
MAX_DPs
) {

276 
	`Ârötf
(
f
,"\n GREDÑeceived message smallerÅhanÉxpected\n");

282 
i
=0;i<
MAX_DPs
;i++, 
q›t
++) {

283 i‡(
q›t
->
DP
 >
MAX_DPs
) ;

284 
	`Ârötf
(
f
, "\n DP:%d (prio %d) Average Queue %s Measured "

286 
q›t
->
DP
,

287 
q›t
->
¥io
,

288 
	`•röt_size
(
q›t
->
qave
, 
b4
),

289 
	`•röt_size
(
q›t
->
backlog
, 
b5
));

290 
	`Ârötf
(
f
, "\n\t Packet drops: %d (forced %dÉarly %d) ",

291 
q›t
->
f‹˚d
+q›t->
óæy
,

292 
q›t
->
f‹˚d
,

293 
q›t
->
óæy
);

294 
	`Ârötf
(
f
, "\n\t PacketÅotals: %u (bytes %u) ",

295 
q›t
->
∑ckës
,

296 
q›t
->
byãsö
);

297 i‡(
show_dëaûs
)

298 
	`Ârötf
(
f
, "\nÜimit %s min %s max %s ",

299 
	`•röt_size
(
q›t
->
limô
, 
b1
),

300 
	`•röt_size
(
q›t
->
qth_mö
, 
b2
),

301 
	`•röt_size
(
q›t
->
qth_max
, 
b3
));

302 
	`Ârötf
(
f
, "ewma %u Plog %u Scell_log %u",

303 
q›t
->
Wlog
, q›t->
Plog
, q›t->
S˚Œ_log
);

306 
	}
}

308 
qdisc_utû
 
	ggªd_qdisc_utû
 = {

309 .
id
 = "gred",

310 .
	g∑r£_q›t
 = 
gªd_∑r£_›t
,

311 .
	g¥öt_q›t
 = 
gªd_¥öt_›t
,

	@q_hfsc.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

27 
hfsc_gë_sc
(*, ***, 
tc_£rvi˚_curve
 *);

31 
	$ex∂aö_qdisc
()

33 
	`Ârötf
(
°dîr
,

38 
	}
}

41 
	$ex∂aö_˛ass
()

43 
	`Ârötf
(
°dîr
,

61 
	}
}

64 
	$ex∂aö1
(*
¨g
)

66 
	`Ârötf
(
°dîr
, "HFSC: IŒegÆ \"%s\"\n", 
¨g
);

67 
	}
}

70 
	$hfsc_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

72 
tc_hfsc_q›t
 
q›t
;

74 
	`mem£t
(&
q›t
, 0, (qopt));

76 
¨gc
 > 0) {

77 i‡(
	`m©ches
(*
¨gv
, "default") == 0) {

78 
	`NEXT_ARG
();

79 i‡(
q›t
.
def˛s
 != 0) {

80 
	`Ârötf
(
°dîr
, "HFSC: Double \"default\"\n");

83 i‡(
	`gë_u16
(&
q›t
.
def˛s
, *
¨gv
, 16) < 0) {

84 
	`ex∂aö1
("default");

87 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

88 
	`ex∂aö_qdisc
();

91 
	`Ârötf
(
°dîr
, "HFSC: Wh© i†\"%s\" ?\n", *
¨gv
);

92 
	`ex∂aö_qdisc
();

95 
¨gc
--, 
¨gv
++;

98 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
q›t
, (qopt));

100 
	}
}

103 
	$hfsc_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

105 
tc_hfsc_q›t
 *
q›t
;

107 i‡(
›t
 =
NULL
)

109 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

111 
q›t
 = 
	`RTA_DATA
(
›t
);

113 i‡(
q›t
->
def˛s
 != 0)

114 
	`Ârötf
(
f
, "deÁu… %x ", 
q›t
->
def˛s
);

117 
	}
}

120 
	$hfsc_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

122 
tc_hfsc_°©s
 *
°
;

124 i‡(
x°©s
 =
NULL
)

126 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

128 
°
 = 
	`RTA_DATA
(
x°©s
);

130 
	`Ârötf
(
f
, "Öîiod %u ", 
°
->
≥riod
);

131 i‡(
°
->
w‹k
 != 0)

132 
	`Ârötf
(
f
, "w‹k %Œu byã†", (Ë
°
->
w‹k
);

133 i‡(
°
->
πw‹k
 != 0)

134 
	`Ârötf
(
f
, "πw‹k %Œu byã†", (Ë
°
->
πw‹k
);

135 
	`Ârötf
(
f
, "Àvñ %u ", 
°
->
Àvñ
);

136 
	`Ârötf
(
f
, "\n");

139 
	}
}

142 
	$hfsc_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

143 
∆msghdr
 *
n
)

145 
tc_£rvi˚_curve
 
rsc
, 
fsc
, 
usc
;

146 
rsc_ok
, 
fsc_ok
, 
usc_ok
;

147 
π©å
 *
èû
;

149 
	`mem£t
(&
rsc
, 0, (rsc));

150 
	`mem£t
(&
fsc
, 0, (fsc));

151 
	`mem£t
(&
usc
, 0, (usc));

152 
rsc_ok
 = 
fsc_ok
 = 
usc_ok
 = 0;

154 
¨gc
 > 0) {

155 i‡(
	`m©ches
(*
¨gv
, "rt") == 0) {

156 
	`NEXT_ARG
();

157 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
rsc
) < 0) {

158 
	`ex∂aö1
("rt");

161 
rsc_ok
 = 1;

162 } i‡(
	`m©ches
(*
¨gv
, "ls") == 0) {

163 
	`NEXT_ARG
();

164 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
fsc
) < 0) {

165 
	`ex∂aö1
("ls");

168 
fsc_ok
 = 1;

169 } i‡(
	`m©ches
(*
¨gv
, "sc") == 0) {

170 
	`NEXT_ARG
();

171 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
rsc
) < 0) {

172 
	`ex∂aö1
("sc");

175 
	`mem˝y
(&
fsc
, &
rsc
, (fsc));

176 
rsc_ok
 = 1;

177 
fsc_ok
 = 1;

178 } i‡(
	`m©ches
(*
¨gv
, "ul") == 0) {

179 
	`NEXT_ARG
();

180 i‡(
	`hfsc_gë_sc
(&
¨gc
, &
¨gv
, &
usc
) < 0) {

181 
	`ex∂aö1
("ul");

184 
usc_ok
 = 1;

185 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

186 
	`ex∂aö_˛ass
();

189 
	`Ârötf
(
°dîr
, "HFSC: Wh© i†\"%s\" ?\n", *
¨gv
);

190 
	`ex∂aö_˛ass
();

193 
¨gc
--, 
¨gv
++;

196 i‡(!(
rsc_ok
 || 
fsc_ok
 || 
usc_ok
)) {

197 
	`Ârötf
(
°dîr
, "HFSC:ÇoÖarameters given\n");

198 
	`ex∂aö_˛ass
();

201 i‡(
usc_ok
 && !
fsc_ok
) {

202 
	`Ârötf
(
°dîr
, "HFSC: Upper-limit Service Curve without "

204 
	`ex∂aö_˛ass
();

208 
èû
 = 
	`NLMSG_TAIL
(
n
);

210 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

211 i‡(
rsc_ok
)

212 
	`add©å_l
(
n
, 1024, 
TCA_HFSC_RSC
, &
rsc
, (rsc));

213 i‡(
fsc_ok
)

214 
	`add©å_l
(
n
, 1024, 
TCA_HFSC_FSC
, &
fsc
, (fsc));

215 i‡(
usc_ok
)

216 
	`add©å_l
(
n
, 1024, 
TCA_HFSC_USC
, &
usc
, (usc));

218 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

220 
	}
}

223 
	$hfsc_¥öt_sc
(
FILE
 *
f
, *
«me
, 
tc_£rvi˚_curve
 *
sc
)

225 
	`SPRINT_BUF
(
b1
);

227 
	`Ârötf
(
f
, "%†", 
«me
);

228 
	`Ârötf
(
f
, "m1 %†", 
	`•röt_øã
(
sc
->
m1
, 
b1
));

229 
	`Ârötf
(
f
, "d %†", 
	`•röt_time
(
	`tc_c‹e_ktime2time
(
sc
->
d
), 
b1
));

230 
	`Ârötf
(
f
, "m2 %†", 
	`•röt_øã
(
sc
->
m2
, 
b1
));

231 
	}
}

234 
	$hfsc_¥öt_˛ass_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

236 
π©å
 *
tb
[
TCA_HFSC_MAX
+1];

237 
tc_£rvi˚_curve
 *
rsc
 = 
NULL
, *
fsc
 = NULL, *
usc
 = NULL;

239 i‡(
›t
 =
NULL
)

242 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_HFSC_MAX
, 
›t
);

244 i‡(
tb
[
TCA_HFSC_RSC
]) {

245 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HFSC_RSC
]Ë< (*
rsc
))

246 
	`Ârötf
(
°dîr
, "HFSC:ÅruncatedÑealtime option\n");

248 
rsc
 = 
	`RTA_DATA
(
tb
[
TCA_HFSC_RSC
]);

250 i‡(
tb
[
TCA_HFSC_FSC
]) {

251 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HFSC_FSC
]Ë< (*
fsc
))

252 
	`Ârötf
(
°dîr
, "HFSC:ÅruncatedÜinkshare option\n");

254 
fsc
 = 
	`RTA_DATA
(
tb
[
TCA_HFSC_FSC
]);

256 i‡(
tb
[
TCA_HFSC_USC
]) {

257 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HFSC_USC
]Ë< (*
usc
))

258 
	`Ârötf
(
°dîr
, "HFSC:Åruncated upperlimit option\n");

260 
usc
 = 
	`RTA_DATA
(
tb
[
TCA_HFSC_USC
]);

264 i‡(
rsc
 !
NULL
 && 
fsc
 != NULL &&

265 
	`memcmp
(
rsc
, 
fsc
, (*rsc)) == 0)

266 
	`hfsc_¥öt_sc
(
f
, "sc", 
rsc
);

268 i‡(
rsc
 !
NULL
)

269 
	`hfsc_¥öt_sc
(
f
, "π", 
rsc
);

270 i‡(
fsc
 !
NULL
)

271 
	`hfsc_¥öt_sc
(
f
, "ls", 
fsc
);

273 i‡(
usc
 !
NULL
)

274 
	`hfsc_¥öt_sc
(
f
, "ul", 
usc
);

277 
	}
}

279 
qdisc_utû
 
	ghfsc_qdisc_utû
 = {

280 .
id
 = "hfsc",

281 .
	g∑r£_q›t
 = 
hfsc_∑r£_›t
,

282 .
	g¥öt_q›t
 = 
hfsc_¥öt_›t
,

283 .
	g¥öt_x°©s
 = 
hfsc_¥öt_x°©s
,

284 .
	g∑r£_c›t
 = 
hfsc_∑r£_˛ass_›t
,

285 .
	g¥öt_c›t
 = 
hfsc_¥öt_˛ass_›t
,

289 
	$hfsc_gë_sc1
(*
¨g˝
, ***
¨gvp
, 
tc_£rvi˚_curve
 *
sc
)

291 **
¨gv
 = *
¨gvp
;

292 
¨gc
 = *
¨g˝
;

293 
m1
 = 0, 
d
 = 0, 
m2
 = 0;

295 i‡(
	`m©ches
(*
¨gv
, "m1") == 0) {

296 
	`NEXT_ARG
();

297 i‡(
	`gë_øã
(&
m1
, *
¨gv
) < 0) {

298 
	`ex∂aö1
("m1");

301 
	`NEXT_ARG
();

304 i‡(
	`m©ches
(*
¨gv
, "d") == 0) {

305 
	`NEXT_ARG
();

306 i‡(
	`gë_time
(&
d
, *
¨gv
) < 0) {

307 
	`ex∂aö1
("d");

310 
	`NEXT_ARG
();

313 i‡(
	`m©ches
(*
¨gv
, "m2") == 0) {

314 
	`NEXT_ARG
();

315 i‡(
	`gë_øã
(&
m2
, *
¨gv
) < 0) {

316 
	`ex∂aö1
("m2");

322 
sc
->
m1
 = m1;

323 
sc
->
d
 = 
	`tc_c‹e_time2ktime
(d);

324 
sc
->
m2
 = m2;

326 *
¨gvp
 = 
¨gv
;

327 *
¨g˝
 = 
¨gc
;

329 
	}
}

332 
	$hfsc_gë_sc2
(*
¨g˝
, ***
¨gvp
, 
tc_£rvi˚_curve
 *
sc
)

334 **
¨gv
 = *
¨gvp
;

335 
¨gc
 = *
¨g˝
;

336 
umax
 = 0, 
dmax
 = 0, 
øã
 = 0;

338 i‡(
	`m©ches
(*
¨gv
, "umax") == 0) {

339 
	`NEXT_ARG
();

340 i‡(
	`gë_size
(&
umax
, *
¨gv
) < 0) {

341 
	`ex∂aö1
("umax");

344 
	`NEXT_ARG
();

347 i‡(
	`m©ches
(*
¨gv
, "dmax") == 0) {

348 
	`NEXT_ARG
();

349 i‡(
	`gë_time
(&
dmax
, *
¨gv
) < 0) {

350 
	`ex∂aö1
("dmax");

353 
	`NEXT_ARG
();

356 i‡(
	`m©ches
(*
¨gv
, "rate") == 0) {

357 
	`NEXT_ARG
();

358 i‡(
	`gë_øã
(&
øã
, *
¨gv
) < 0) {

359 
	`ex∂aö1
("rate");

365 i‡(
umax
 !0 && 
dmax
 == 0) {

366 
	`Ârötf
(
°dîr
, "HFSC: umax given but dmax is zero.\n");

370 i‡(
dmax
 !0 && 
	`˚û
(1.0 * 
umax
 * 
TIME_UNITS_PER_SEC
 / dmaxË> 
øã
) {

375 
sc
->
m1
 = 
	`˚û
(1.0 * 
umax
 * 
TIME_UNITS_PER_SEC
 / 
dmax
);

376 
sc
->
d
 = 
	`tc_c‹e_time2ktime
(
dmax
);

377 
sc
->
m2
 = 
øã
;

383 
sc
->
m1
 = 0;

384 
sc
->
d
 = 
	`tc_c‹e_time2ktime
(
	`˚û
(
dmax
 - 
umax
 * 
TIME_UNITS_PER_SEC
 / 
øã
));

385 
sc
->
m2
 = 
øã
;

388 *
¨gvp
 = 
¨gv
;

389 *
¨g˝
 = 
¨gc
;

391 
	}
}

394 
	$hfsc_gë_sc
(*
¨g˝
, ***
¨gvp
, 
tc_£rvi˚_curve
 *
sc
)

396 i‡(
	`hfsc_gë_sc1
(
¨g˝
, 
¨gvp
, 
sc
) < 0 &&

397 
	`hfsc_gë_sc2
(
¨g˝
, 
¨gvp
, 
sc
) < 0)

400 i‡(
sc
->
m1
 =0 && sc->
m2
 == 0) {

401 
	`Ârötf
(
°dîr
, "HFSC: Service Curve hasÅwo zero slopes\n");

406 
	}
}

	@q_htb.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	#HTB_TC_VER
 0x30003

	)

27 #i‡
HTB_TC_VER
 >> 16 !
TC_HTB_PROTOVER


31 
	$ex∂aö
()

33 
	`Ârötf
(
°dîr
, "Usage: ... qdiscádd ... htb [default N] [r2q N]\n"

50 "\nTC HTB vîsi⁄ %d.%d\n",
HTB_TC_VER
>>16,HTB_TC_VER&0xffff

52 
	}
}

54 
	$ex∂aö1
(*
¨g
)

56 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

57 
	`ex∂aö
();

58 
	}
}

61 
	#ußge
(Ë(-1)

	)

63 
	$htb_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

65 
tc_htb_glob
 
›t
;

66 
π©å
 *
èû
;

67 
i
; *
p
;

68 
	`mem£t
(&
›t
,0,(opt));

69 
›t
.
øã2qu™tum
 = 10;

70 
›t
.
vîsi⁄
 = 3;

72 
¨gc
 > 0) {

73 i‡(
	`m©ches
(*
¨gv
, "r2q") == 0) {

74 
	`NEXT_ARG
();

75 i‡(
	`gë_u32
(&
›t
.
øã2qu™tum
, *
¨gv
, 10)) {

76 
	`ex∂aö1
("r2q");  -1;

78 } i‡(
	`m©ches
(*
¨gv
, "default") == 0) {

79 
	`NEXT_ARG
();

80 i‡(
	`gë_u32
(&
›t
.
def˛s
, *
¨gv
, 16)) {

81 
	`ex∂aö1
("default");  -1;

83 } i‡(
	`m©ches
(*
¨gv
, "debug") == 0) {

84 
	`NEXT_ARG
(); 
p
 = *
¨gv
;

85 
i
=0; i<16; i++,
p
++) {

86 i‡(*
p
<'0' || *p>'3') ;

87 
›t
.
debug
 |(*
p
-'0')<<(2*
i
);

90 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

91 
	`ex∂aö
();

94 
¨gc
--; 
¨gv
++;

96 
èû
 = 
	`NLMSG_TAIL
(
n
);

97 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

98 
	`add©å_l
(
n
, 2024, 
TCA_HTB_INIT
, &
›t
, 
	`NLMSG_ALIGN
((opt)));

99 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

101 
	}
}

103 
	$htb_∑r£_˛ass_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

105 
ok
=0;

106 
tc_htb_›t
 
›t
;

107 
__u32
 
πab
[256],
˘ab
[256];

108 
buf„r
=0,
cbuf„r
=0;

109 
˚Œ_log
=-1,
c˚Œ_log
 = -1;

110 
mtu
, 
mpu
;

111 
mpu8
 = 0, 
ovîhód
 = 0;

112 
π©å
 *
èû
;

114 
	`mem£t
(&
›t
, 0, (›t)); 
mtu
 = 1600;

116 
¨gc
 > 0) {

117 i‡(
	`m©ches
(*
¨gv
, "prio") == 0) {

118 
	`NEXT_ARG
();

119 i‡(
	`gë_u32
(&
›t
.
¥io
, *
¨gv
, 10)) {

120 
	`ex∂aö1
("prio");  -1;

122 
ok
++;

123 } i‡(
	`m©ches
(*
¨gv
, "mtu") == 0) {

124 
	`NEXT_ARG
();

125 i‡(
	`gë_u32
(&
mtu
, *
¨gv
, 10)) {

126 
	`ex∂aö1
("mtu");  -1;

128 } i‡(
	`m©ches
(*
¨gv
, "mpu") == 0) {

129 
	`NEXT_ARG
();

130 i‡(
	`gë_u8
(&
mpu8
, *
¨gv
, 10)) {

131 
	`ex∂aö1
("mpu");  -1;

133 } i‡(
	`m©ches
(*
¨gv
, "overhead") == 0) {

134 
	`NEXT_ARG
();

135 i‡(
	`gë_u8
(&
ovîhód
, *
¨gv
, 10)) {

136 
	`ex∂aö1
("overhead");  -1;

138 } i‡(
	`m©ches
(*
¨gv
, "quantum") == 0) {

139 
	`NEXT_ARG
();

140 i‡(
	`gë_u32
(&
›t
.
qu™tum
, *
¨gv
, 10)) {

141 
	`ex∂aö1
("quantum");  -1;

143 } i‡(
	`m©ches
(*
¨gv
, "burst") == 0 ||

144 
	`°rcmp
(*
¨gv
, "buffer") == 0 ||

145 
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

146 
	`NEXT_ARG
();

147 i‡(
	`gë_size_™d_˚Œ
(&
buf„r
, &
˚Œ_log
, *
¨gv
) < 0) {

148 
	`ex∂aö1
("buffer");

151 
ok
++;

152 } i‡(
	`m©ches
(*
¨gv
, "cburst") == 0 ||

153 
	`°rcmp
(*
¨gv
, "cbuffer") == 0 ||

154 
	`°rcmp
(*
¨gv
, "cmaxburst") == 0) {

155 
	`NEXT_ARG
();

156 i‡(
	`gë_size_™d_˚Œ
(&
cbuf„r
, &
c˚Œ_log
, *
¨gv
) < 0) {

157 
	`ex∂aö1
("cbuffer");

160 
ok
++;

161 } i‡(
	`°rcmp
(*
¨gv
, "ceil") == 0) {

162 
	`NEXT_ARG
();

163 i‡(
›t
.
˚û
.
øã
) {

164 
	`Ârötf
(
°dîr
, "Double \"ceil\" spec\n");

167 i‡(
	`gë_øã
(&
›t
.
˚û
.
øã
, *
¨gv
)) {

168 
	`ex∂aö1
("ceil");

171 
ok
++;

172 } i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

173 
	`NEXT_ARG
();

174 i‡(
›t
.
øã
.rate) {

175 
	`Ârötf
(
°dîr
, "Double \"rate\" spec\n");

178 i‡(
	`gë_øã
(&
›t
.
øã
.øã, *
¨gv
)) {

179 
	`ex∂aö1
("rate");

182 
ok
++;

183 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

184 
	`ex∂aö
();

187 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

188 
	`ex∂aö
();

191 
¨gc
--; 
¨gv
++;

197 i‡(
›t
.
øã
.rate == 0) {

198 
	`Ârötf
(
°dîr
, "\"rate\" isÑequired.\n");

202 i‡(!
›t
.
˚û
.
øã
) opt.ceil = opt.rate;

206 i‡(!
buf„r
Ëbuf„∏
›t
.
øã
.øã / 
	`gë_hz
(Ë+ 
mtu
;

207 i‡(!
cbuf„r
Ëcbuf„∏
›t
.
˚û
.
øã
 / 
	`gë_hz
(Ë+ 
mtu
;

210 
mpu
 = ()
mpu8
 | ()
ovîhód
 << 8;

211 
›t
.
˚û
.
mpu
 = mpu; o±.
øã
.mpu = mpu;

213 i‡((
˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
›t
.
øã
.øã, 
πab
, cñl_log, 
mtu
, 
mpu
)) < 0) {

214 
	`Ârötf
(
°dîr
, "htb: failedÅo calculateÑateÅable.\n");

217 
›t
.
buf„r
 = 
	`tc_ˇlc_xmôtime
(›t.
øã
.rate, buffer);

218 
›t
.
øã
.
˚Œ_log
 = cell_log;

220 i‡((
c˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
›t
.
˚û
.
øã
, 
˘ab
, 
˚Œ_log
, 
mtu
, 
mpu
)) < 0) {

221 
	`Ârötf
(
°dîr
, "htb: failedÅo calculate ceilÑateÅable.\n");

224 
›t
.
cbuf„r
 = 
	`tc_ˇlc_xmôtime
(›t.
˚û
.
øã
, cbuffer);

225 
›t
.
˚û
.
˚Œ_log
 = 
c˚Œ_log
;

227 
èû
 = 
	`NLMSG_TAIL
(
n
);

228 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

229 
	`add©å_l
(
n
, 2024, 
TCA_HTB_PARMS
, &
›t
, (opt));

230 
	`add©å_l
(
n
, 3024, 
TCA_HTB_RTAB
, 
πab
, 1024);

231 
	`add©å_l
(
n
, 4024, 
TCA_HTB_CTAB
, 
˘ab
, 1024);

232 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

234 
	}
}

236 
	$htb_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

238 
π©å
 *
tb
[
TCA_HTB_RTAB
+1];

239 
tc_htb_›t
 *
h›t
;

240 
tc_htb_glob
 *
g›t
;

241 
buf„r
,
cbuf„r
;

242 
	`SPRINT_BUF
(
b1
);

243 
	`SPRINT_BUF
(
b2
);

244 
	`SPRINT_BUF
(
b3
);

246 i‡(
›t
 =
NULL
)

249 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_HTB_RTAB
, 
›t
);

251 i‡(
tb
[
TCA_HTB_PARMS
]) {

253 
h›t
 = 
	`RTA_DATA
(
tb
[
TCA_HTB_PARMS
]);

254 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_PARMS
]Ë< (*
h›t
))  -1;

256 i‡(!
h›t
->
Àvñ
) {

257 
	`Ârötf
(
f
, "¥iÿ%d ", ()
h›t
->
¥io
);

258 i‡(
show_dëaûs
)

259 
	`Ârötf
(
f
, "qu™tum %d ", ()
h›t
->
qu™tum
);

261 
	`Ârötf
(
f
, "øã %†", 
	`•röt_øã
(
h›t
->
øã
.øã, 
b1
));

262 
buf„r
 = 
	`tc_ˇlc_xmôsize
(
h›t
->
øã
.rate, hopt->buffer);

263 
	`Ârötf
(
f
, "˚û %†", 
	`•röt_øã
(
h›t
->
˚û
.
øã
, 
b1
));

264 
cbuf„r
 = 
	`tc_ˇlc_xmôsize
(
h›t
->
˚û
.
øã
, hopt->cbuffer);

265 i‡(
show_dëaûs
) {

266 
	`Ârötf
(
f
, "burst %s/%u mpu %s overhead %s ",

267 
	`•röt_size
(
buf„r
, 
b1
),

268 1<<
h›t
->
øã
.
˚Œ_log
,

269 
	`•röt_size
(
h›t
->
øã
.
mpu
&0xFF, 
b2
),

270 
	`•röt_size
((
h›t
->
øã
.
mpu
>>8)&0xFF, 
b3
));

271 
	`Ârötf
(
f
, "cburst %s/%u mpu %s overhead %s ",

272 
	`•röt_size
(
cbuf„r
, 
b1
),

273 1<<
h›t
->
˚û
.
˚Œ_log
,

274 
	`•röt_size
(
h›t
->
˚û
.
mpu
&0xFF, 
b2
),

275 
	`•röt_size
((
h›t
->
˚û
.
mpu
>>8)&0xFF, 
b3
));

276 
	`Ârötf
(
f
, "Àvñ %d ", ()
h›t
->
Àvñ
);

278 
	`Ârötf
(
f
, "bur° %†", 
	`•röt_size
(
buf„r
, 
b1
));

279 
	`Ârötf
(
f
, "cbur° %†", 
	`•röt_size
(
cbuf„r
, 
b1
));

281 i‡(
show_øw
)

282 
	`Ârötf
(
f
, "buffer [%08x] cbuffer [%08x] ",

283 
h›t
->
buf„r
,h›t->
cbuf„r
);

285 i‡(
tb
[
TCA_HTB_INIT
]) {

286 
g›t
 = 
	`RTA_DATA
(
tb
[
TCA_HTB_INIT
]);

287 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_HTB_INIT
]Ë< (*
g›t
))  -1;

289 
	`Ârötf
(
f
, "r2q %d default %x direct_packets_stat %u",

290 
g›t
->
øã2qu™tum
,g›t->
def˛s
,g›t->
dúe˘_pkts
);

291 i‡(
show_dëaûs
)

292 
	`Ârötf
(
f
," vî %d.%d",
g›t
->
vîsi⁄
 >> 16,gopt->version & 0xffff);

295 
	}
}

297 
	$htb_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

299 
tc_htb_x°©s
 *
°
;

300 i‡(
x°©s
 =
NULL
)

303 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

306 
°
 = 
	`RTA_DATA
(
x°©s
);

307 
	`Ârötf
(
f
, "Üended: %u borrowed: %u giants: %u\n",

308 
°
->
Ànds
,°->
b‹rows
,°->
gü¡s
);

309 
	`Ârötf
(
f
, "Åokís: %d ctokís: %d\n", 
°
->
tokís
,°->
˘okís
);

311 
	}
}

313 
qdisc_utû
 
	ghtb_qdisc_utû
 = {

314 .
id
 = "htb",

315 .
	g∑r£_q›t
 = 
htb_∑r£_›t
,

316 .
	g¥öt_q›t
 = 
htb_¥öt_›t
,

317 .
	g¥öt_x°©s
 = 
htb_¥öt_x°©s
,

318 .
	g∑r£_c›t
 = 
htb_∑r£_˛ass_›t
,

319 .
	g¥öt_c›t
 = 
htb_¥öt_›t
,

323 
qdisc_utû
 
	ghtb2_qdisc_utû
 = {

324 .
id
 = "htb2",

325 .
	g∑r£_q›t
 = 
htb_∑r£_›t
,

326 .
	g¥öt_q›t
 = 
htb_¥öt_›t
,

327 .
	g¥öt_x°©s
 = 
htb_¥öt_x°©s
,

328 .
	g∑r£_c›t
 = 
htb_∑r£_˛ass_›t
,

329 .
	g¥öt_c›t
 = 
htb_¥öt_›t
,

	@q_ingress.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<sy¶og.h
>

21 
	~<f˙é.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

27 
	~"utûs.h
"

28 
	~"tc_utû.h
"

30 
	$ex∂aö
()

32 
	`Ârötf
(
°dîr
, "Usage: ... ingress \n");

33 
	}
}

35 
	#ußge
(Ë(-1)

	)

37 
	$ögªss_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

40 i‡(
¨gc
 > 0) {

41 
¨gc
 > 0) {

43 i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

44 
	`NEXT_ARG
();

45 
¨gc
--; 
¨gv
++;

47 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

48 
	`ex∂aö
();

54 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

56 
	}
}

58 
	$ögªss_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

61 
	`Ârötf
(
f
, "---------------- ");

63 
	}
}

65 
qdisc_utû
 
	gögªss_qdisc_utû
 = {

66 .
id
 = "ingress",

67 .
	g∑r£_q›t
 = 
ögªss_∑r£_›t
,

68 .
	g¥öt_q›t
 = 
ögªss_¥öt_›t
,

	@q_netem.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
,

38 
	}
}

40 
	$ex∂aö1
(c⁄° *
¨g
)

42 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

43 
	}
}

45 
	#ußge
(Ë(-1)

	)

53 
	#MAXDIST
 65536

	)

54 
	$gë_di°ributi⁄
(c⁄° *
ty≥
, 
__s16
 *
d©a
)

56 
FILE
 *
f
;

57 
n
;

58 
x
;

59 
size_t
 
Àn
;

60 *
löe
 = 
NULL
;

61 
«me
[128];

63 
	`¢¥ötf
(
«me
, “ame), "%s/%s.di°", 
	`gë_tc_lib
(), 
ty≥
);

64 i‡((
f
 = 
	`f›í
(
«me
, "r")Ë=
NULL
) {

65 
	`Ârötf
(
°dîr
, "No distribution data for %s (%s: %s)\n",

66 
ty≥
, 
«me
, 
	`°ªº‹
(
î∫o
));

70 
n
 = 0;

71 
	`gëlöe
(&
löe
, &
Àn
, 
f
) != -1) {

72 *
p
, *
ídp
;

73 i‡(*
löe
 == '\n' || *line == '#')

76 
p
 = 
löe
; ;Ö = 
ídp
) {

77 
x
 = 
	`°πﬁ
(
p
, &
ídp
, 0);

78 i‡(
ídp
 =
p
)

81 i‡(
n
 >
MAXDIST
) {

82 
	`Ârötf
(
°dîr
, "%s:Åoo much data\n",

83 
«me
);

84 
n
 = -1;

85 
îr‹
;

87 
d©a
[
n
++] = 
x
;

90 
îr‹
:

91 
	`‰ì
(
löe
);

92 
	`f˛o£
(
f
);

93  
n
;

94 
	}
}

96 
	$i¢umbî
(c⁄° *
¨g
)

98 *
p
;

99 (Ë
	`°πod
(
¨g
, &
p
);

100  (
p
 !
¨g
);

101 
	}
}

103 
	#NEXT_IS_NUMBER
(Ë(
	`NEXT_ARG_OK
(Ë&& 
	`i¢umbî
(
¨gv
[1]))

	)

107 
	$gë_ticks
(
__u32
 *
ticks
, c⁄° *
°r
)

109 
t
;

111 if(
	`gë_time
(&
t
, 
°r
))

114 i‡(
	`tc_c‹e_time2big
(
t
)) {

115 
	`Ârötf
(
°dîr
, "IŒegÆ %uÅimê—oÿœrge)\n", 
t
);

119 *
ticks
 = 
	`tc_c‹e_time2tick
(
t
);

121 
	}
}

123 
	$√ãm_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
,

124 
∆msghdr
 *
n
)

126 
size_t
 
di°_size
 = 0;

127 
π©å
 *
èû
;

128 
tc_√ãm_q›t
 
›t
;

129 
tc_√ãm_c‹r
 
c‹
;

130 
tc_√ãm_ª‹dî
 
ª‹dî
;

131 
tc_√ãm_c‹ru±
 
c‹ru±
;

132 
__s16
 *
di°_d©a
 = 
NULL
;

133 
¥e£¡
[
__TCA_NETEM_MAX
];

135 
	`mem£t
(&
›t
, 0, (opt));

136 
›t
.
limô
 = 1000;

137 
	`mem£t
(&
c‹
, 0, (cor));

138 
	`mem£t
(&
ª‹dî
, 0, (reorder));

139 
	`mem£t
(&
c‹ru±
, 0, (corrupt));

140 
	`mem£t
(
¥e£¡
, 0, (present));

142 
¨gc
 > 0) {

143 i‡(
	`m©ches
(*
¨gv
, "limit") == 0) {

144 
	`NEXT_ARG
();

145 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

146 
	`ex∂aö1
("limit");

149 } i‡(
	`m©ches
(*
¨gv
, "latency") == 0 ||

150 
	`m©ches
(*
¨gv
, "delay") == 0) {

151 
	`NEXT_ARG
();

152 i‡(
	`gë_ticks
(&
›t
.
œãncy
, *
¨gv
)) {

153 
	`ex∂aö1
("latency");

157 i‡(
	`NEXT_IS_NUMBER
()) {

158 
	`NEXT_ARG
();

159 i‡(
	`gë_ticks
(&
›t
.
jôãr
, *
¨gv
)) {

160 
	`ex∂aö1
("latency");

164 i‡(
	`NEXT_IS_NUMBER
()) {

165 
	`NEXT_ARG
();

166 ++
¥e£¡
[
TCA_NETEM_CORR
];

167 i‡(
	`gë_≥r˚¡
(&
c‹
.
dñay_c‹r
, *
¨gv
)) {

168 
	`ex∂aö1
("latency");

173 } i‡(
	`m©ches
(*
¨gv
, "loss") == 0 ||

174 
	`m©ches
(*
¨gv
, "drop") == 0) {

175 
	`NEXT_ARG
();

176 i‡(
	`gë_≥r˚¡
(&
›t
.
loss
, *
¨gv
)) {

177 
	`ex∂aö1
("loss");

180 i‡(
	`NEXT_IS_NUMBER
()) {

181 
	`NEXT_ARG
();

182 ++
¥e£¡
[
TCA_NETEM_CORR
];

183 i‡(
	`gë_≥r˚¡
(&
c‹
.
loss_c‹r
, *
¨gv
)) {

184 
	`ex∂aö1
("loss");

188 } i‡(
	`m©ches
(*
¨gv
, "reorder") == 0) {

189 
	`NEXT_ARG
();

190 
¥e£¡
[
TCA_NETEM_REORDER
] = 1;

191 i‡(
	`gë_≥r˚¡
(&
ª‹dî
.
¥obabûôy
, *
¨gv
)) {

192 
	`ex∂aö1
("reorder");

195 i‡(
	`NEXT_IS_NUMBER
()) {

196 
	`NEXT_ARG
();

197 ++
¥e£¡
[
TCA_NETEM_CORR
];

198 i‡(
	`gë_≥r˚¡
(&
ª‹dî
.
c‹ªœti⁄
, *
¨gv
)) {

199 
	`ex∂aö1
("reorder");

203 } i‡(
	`m©ches
(*
¨gv
, "corrupt") == 0) {

204 
	`NEXT_ARG
();

205 
¥e£¡
[
TCA_NETEM_CORRUPT
] = 1;

206 i‡(
	`gë_≥r˚¡
(&
c‹ru±
.
¥obabûôy
, *
¨gv
)) {

207 
	`ex∂aö1
("corrupt");

210 i‡(
	`NEXT_IS_NUMBER
()) {

211 
	`NEXT_ARG
();

212 ++
¥e£¡
[
TCA_NETEM_CORR
];

213 i‡(
	`gë_≥r˚¡
(&
c‹ru±
.
c‹ªœti⁄
, *
¨gv
)) {

214 
	`ex∂aö1
("corrupt");

218 } i‡(
	`m©ches
(*
¨gv
, "gap") == 0) {

219 
	`NEXT_ARG
();

220 i‡(
	`gë_u32
(&
›t
.
g≠
, *
¨gv
, 0)) {

221 
	`ex∂aö1
("gap");

224 } i‡(
	`m©ches
(*
¨gv
, "duplicate") == 0) {

225 
	`NEXT_ARG
();

226 i‡(
	`gë_≥r˚¡
(&
›t
.
du∂iˇã
, *
¨gv
)) {

227 
	`ex∂aö1
("duplicate");

230 i‡(
	`NEXT_IS_NUMBER
()) {

231 
	`NEXT_ARG
();

232 i‡(
	`gë_≥r˚¡
(&
c‹
.
dup_c‹r
, *
¨gv
)) {

233 
	`ex∂aö1
("duplicate");

237 } i‡(
	`m©ches
(*
¨gv
, "distribution") == 0) {

238 
	`NEXT_ARG
();

239 
di°_d©a
 = 
	`Æloˇ
(
MAXDIST
);

240 
di°_size
 = 
	`gë_di°ributi⁄
(*
¨gv
, 
di°_d©a
);

241 i‡(
di°_size
 < 0)

243 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

244 
	`ex∂aö
();

247 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

248 
	`ex∂aö
();

251 
¨gc
--; 
¨gv
++;

254 
èû
 = 
	`NLMSG_TAIL
(
n
);

256 i‡(
ª‹dî
.
¥obabûôy
) {

257 i‡(
›t
.
œãncy
 == 0) {

258 
	`Ârötf
(
°dîr
, "reorderingÇotÖossible without specifying some delay\n");

260 i‡(
›t
.
g≠
 == 0)

261 
›t
.
g≠
 = 1;

262 } i‡(
›t
.
g≠
 > 0) {

263 
	`Ârötf
(
°dîr
, "gap specified withoutÑeorderÖrobability\n");

264 
	`ex∂aö
();

268 i‡(
di°_d©a
 && (
›t
.
œãncy
 =0 || o±.
jôãr
 == 0)) {

269 
	`Ârötf
(
°dîr
, "distribution specified butÇoÜatencyánd jitter values\n");

270 
	`ex∂aö
();

274 i‡(
	`add©å_l
(
n
, 
TCA_BUF_MAX
, 
TCA_OPTIONS
, &
›t
, (opt)) < 0)

277 i‡(
¥e£¡
[
TCA_NETEM_CORR
] &&

278 
	`add©å_l
(
n
, 
TCA_BUF_MAX
, 
TCA_NETEM_CORR
, &
c‹
, (cor)) < 0)

281 i‡(
¥e£¡
[
TCA_NETEM_REORDER
] &&

282 
	`add©å_l
(
n
, 
TCA_BUF_MAX
, 
TCA_NETEM_REORDER
, &
ª‹dî
, (reorder)) < 0)

285 i‡(
¥e£¡
[
TCA_NETEM_CORRUPT
] &&

286 
	`add©å_l
(
n
, 
TCA_BUF_MAX
, 
TCA_NETEM_CORRUPT
, &
c‹ru±
, (corrupt)) < 0)

289 i‡(
di°_d©a
) {

290 i‡(
	`add©å_l
(
n
, 32768, 
TCA_NETEM_DELAY_DIST
,

291 
di°_d©a
, 
di°_size
*(dist_data[0])) < 0)

294 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

296 
	}
}

298 
	$√ãm_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

300 c⁄° 
tc_√ãm_c‹r
 *
c‹
 = 
NULL
;

301 c⁄° 
tc_√ãm_ª‹dî
 *
ª‹dî
 = 
NULL
;

302 c⁄° 
tc_√ãm_c‹ru±
 *
c‹ru±
 = 
NULL
;

303 
tc_√ãm_q›t
 
q›t
;

304 
Àn
 = 
	`RTA_PAYLOAD
(
›t
Ë- (
q›t
);

305 
	`SPRINT_BUF
(
b1
);

307 i‡(
›t
 =
NULL
)

310 i‡(
Àn
 < 0) {

311 
	`Ârötf
(
°dîr
, "options sizeÉrror\n");

314 
	`mem˝y
(&
q›t
, 
	`RTA_DATA
(
›t
), (qopt));

316 i‡(
Àn
 > 0) {

317 
π©å
 *
tb
[
TCA_NETEM_MAX
+1];

318 
	`∑r£_π©å
(
tb
, 
TCA_NETEM_MAX
, 
	`RTA_DATA
(
›t
Ë+ (
q›t
),

319 
Àn
);

321 i‡(
tb
[
TCA_NETEM_CORR
]) {

322 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_CORR
]Ë< (*
c‹
))

324 
c‹
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_CORR
]);

326 i‡(
tb
[
TCA_NETEM_REORDER
]) {

327 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_REORDER
]Ë< (*
ª‹dî
))

329 
ª‹dî
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_REORDER
]);

331 i‡(
tb
[
TCA_NETEM_CORRUPT
]) {

332 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_NETEM_CORRUPT
]Ë< (*
c‹ru±
))

334 
c‹ru±
 = 
	`RTA_DATA
(
tb
[
TCA_NETEM_CORRUPT
]);

338 
	`Ârötf
(
f
, "limô %d", 
q›t
.
limô
);

340 i‡(
q›t
.
œãncy
) {

341 
	`Ârötf
(
f
, " dñay %s", 
	`•röt_ticks
(
q›t
.
œãncy
, 
b1
));

343 i‡(
q›t
.
jôãr
) {

344 
	`Ârötf
(
f
, " %s", 
	`•röt_ticks
(
q›t
.
jôãr
, 
b1
));

345 i‡(
c‹
 && c‹->
dñay_c‹r
)

346 
	`Ârötf
(
f
, " %s", 
	`•röt_≥r˚¡
(
c‹
->
dñay_c‹r
, 
b1
));

350 i‡(
q›t
.
loss
) {

351 
	`Ârötf
(
f
, "Üos†%s", 
	`•röt_≥r˚¡
(
q›t
.
loss
, 
b1
));

352 i‡(
c‹
 && c‹->
loss_c‹r
)

353 
	`Ârötf
(
f
, " %s", 
	`•röt_≥r˚¡
(
c‹
->
loss_c‹r
, 
b1
));

356 i‡(
q›t
.
du∂iˇã
) {

357 
	`Ârötf
(
f
, " duplicate %s",

358 
	`•röt_≥r˚¡
(
q›t
.
du∂iˇã
, 
b1
));

359 i‡(
c‹
 && c‹->
dup_c‹r
)

360 
	`Ârötf
(
f
, " %s", 
	`•röt_≥r˚¡
(
c‹
->
dup_c‹r
, 
b1
));

363 i‡(
ª‹dî
 &&Ñe‹dî->
¥obabûôy
) {

364 
	`Ârötf
(
f
, "Ñeorder %s",

365 
	`•röt_≥r˚¡
(
ª‹dî
->
¥obabûôy
, 
b1
));

366 i‡(
ª‹dî
->
c‹ªœti⁄
)

367 
	`Ârötf
(
f
, " %s",

368 
	`•röt_≥r˚¡
(
ª‹dî
->
c‹ªœti⁄
, 
b1
));

371 i‡(
c‹ru±
 && c‹ru±->
¥obabûôy
) {

372 
	`Ârötf
(
f
, " corrupt %s",

373 
	`•röt_≥r˚¡
(
c‹ru±
->
¥obabûôy
, 
b1
));

374 i‡(
c‹ru±
->
c‹ªœti⁄
)

375 
	`Ârötf
(
f
, " %s",

376 
	`•röt_≥r˚¡
(
c‹ru±
->
c‹ªœti⁄
, 
b1
));

379 i‡(
q›t
.
g≠
)

380 
	`Ârötf
(
f
, " g≠ %lu", ()
q›t
.
g≠
);

383 
	}
}

385 
qdisc_utû
 
	g√ãm_qdisc_utû
 = {

386 .
id
 = "netem",

387 .
	g∑r£_q›t
 = 
√ãm_∑r£_›t
,

388 .
	g¥öt_q›t
 = 
√ãm_¥öt_›t
,

	@q_prio.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<sy¶og.h
>

21 
	~<f˙é.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

27 
	~"utûs.h
"

28 
	~"tc_utû.h
"

30 
	$ex∂aö
()

32 
	`Ârötf
(
°dîr
, "Usage: ...Örio bands NUMBERÖriomap P1 P2...\n");

33 
	}
}

35 
	#ußge
(Ë(-1)

	)

37 
	$¥io_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

39 
ok
=0;

40 
pm≠_mode
 = 0;

41 
idx
 = 0;

42 
tc_¥io_q›t
 
›t
={3,{ 1, 2, 2, 2, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 }};

44 
¨gc
 > 0) {

45 i‡(
	`°rcmp
(*
¨gv
, "bands") == 0) {

46 i‡(
pm≠_mode
)

47 
	`ex∂aö
();

48 
	`NEXT_ARG
();

49 i‡(
	`gë_öãgî
(&
›t
.
b™ds
, *
¨gv
, 10)) {

50 
	`Ârötf
(
°dîr
, "Illegal \"bands\"\n");

53 
ok
++;

54 } i‡(
	`°rcmp
(*
¨gv
, "priomap") == 0) {

55 i‡(
pm≠_mode
) {

56 
	`Ârötf
(
°dîr
, "Error: duplicateÖriomap\n");

59 
pm≠_mode
 = 1;

60 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

61 
	`ex∂aö
();

64 
b™d
;

65 i‡(!
pm≠_mode
) {

66 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

67 
	`ex∂aö
();

70 i‡(
	`gë_unsig√d
(&
b™d
, *
¨gv
, 10)) {

71 
	`Ârötf
(
°dîr
, "Illegal \"priomap\"Élement\n");

74 i‡(
b™d
 > 
›t
.
b™ds
) {

75 
	`Ârötf
(
°dîr
, "\"priomap\"Élement is out of bands\n");

78 i‡(
idx
 > 
TC_PRIO_MAX
) {

79 
	`Ârötf
(
°dîr
, "\"¥iom≠\" index > TC_PRIO_MAX=%u\n", 
TC_PRIO_MAX
);

82 
›t
.
¥iom≠
[
idx
++] = 
b™d
;

84 
¨gc
--; 
¨gv
++;

93 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

95 
	}
}

97 
	$¥io_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

99 
i
;

100 
tc_¥io_q›t
 *
q›t
;

102 i‡(
›t
 =
NULL
)

105 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

107 
q›t
 = 
	`RTA_DATA
(
›t
);

108 
	`Ârötf
(
f
, "b™d†%uÖriom≠ ", 
q›t
->
b™ds
);

109 
i
=0; i<=
TC_PRIO_MAX
; i++)

110 
	`Ârötf
(
f
, " %d", 
q›t
->
¥iom≠
[
i
]);

112 
	}
}

114 
qdisc_utû
 
	g¥io_qdisc_utû
 = {

115 .
id
 = "prio",

116 .
	g∑r£_q›t
 = 
¥io_∑r£_›t
,

117 .
	g¥öt_q›t
 = 
¥io_¥öt_›t
,

	@q_red.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	~"tc_ªd.h
"

28 
	$ex∂aö
()

30 
	`Ârötf
(
°dîr
, "Usage: ...ÑedÜimit BYTES min BYTES max BYTESávpkt BYTES burst PACKETS\n");

31 
	`Ârötf
(
°dîr
, "Örobability PROBABILITY bandwidth KBPS [Écn ]\n");

32 
	}
}

34 
	#ußge
(Ë(-1)

	)

36 
	$ªd_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

38 
ok
=0;

39 
tc_ªd_q›t
 
›t
;

40 
bur°
 = 0;

41 
avpkt
 = 0;

42 
¥obabûôy
 = 0.02;

43 
øã
 = 0;

44 
e˙_ok
 = 0;

45 
wlog
;

46 
__u8
 
sbuf
[256];

47 
π©å
 *
èû
;

49 
	`mem£t
(&
›t
, 0, (opt));

51 
¨gc
 > 0) {

52 i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

53 
	`NEXT_ARG
();

54 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

55 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

58 
ok
++;

59 } i‡(
	`°rcmp
(*
¨gv
, "min") == 0) {

60 
	`NEXT_ARG
();

61 i‡(
	`gë_size
(&
›t
.
qth_mö
, *
¨gv
)) {

62 
	`Ârötf
(
°dîr
, "Illegal \"min\"\n");

65 
ok
++;

66 } i‡(
	`°rcmp
(*
¨gv
, "max") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
	`gë_size
(&
›t
.
qth_max
, *
¨gv
)) {

69 
	`Ârötf
(
°dîr
, "Illegal \"max\"\n");

72 
ok
++;

73 } i‡(
	`°rcmp
(*
¨gv
, "burst") == 0) {

74 
	`NEXT_ARG
();

75 i‡(
	`gë_unsig√d
(&
bur°
, *
¨gv
, 0)) {

76 
	`Ârötf
(
°dîr
, "Illegal \"burst\"\n");

79 
ok
++;

80 } i‡(
	`°rcmp
(*
¨gv
, "avpkt") == 0) {

81 
	`NEXT_ARG
();

82 i‡(
	`gë_size
(&
avpkt
, *
¨gv
)) {

83 
	`Ârötf
(
°dîr
, "Illegal \"avpkt\"\n");

86 
ok
++;

87 } i‡(
	`°rcmp
(*
¨gv
, "probability") == 0) {

88 
	`NEXT_ARG
();

89 i‡(
	`ssˇnf
(*
¨gv
, "%lg", &
¥obabûôy
) != 1) {

90 
	`Ârötf
(
°dîr
, "Illegal \"probability\"\n");

93 
ok
++;

94 } i‡(
	`°rcmp
(*
¨gv
, "bandwidth") == 0) {

95 
	`NEXT_ARG
();

96 i‡(
	`gë_øã
(&
øã
, *
¨gv
)) {

97 
	`Ârötf
(
°dîr
, "Illegal \"bandwidth\"\n");

100 
ok
++;

101 } i‡(
	`°rcmp
(*
¨gv
, "ecn") == 0) {

102 
e˙_ok
 = 1;

103 
ok
++;

104 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

105 
	`ex∂aö
();

108 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

109 
	`ex∂aö
();

112 
¨gc
--; 
¨gv
++;

115 i‡(!
ok
)

118 i‡(
øã
 == 0)

119 
	`gë_øã
(&
øã
, "10Mbit");

121 i‡(!
›t
.
qth_mö
 || !›t.
qth_max
 || !
bur°
 || !›t.
limô
 || !
avpkt
) {

122 
	`Ârötf
(
°dîr
, "RequiredÖarameter (min, max, burst,Üimit,ávpket) is missing\n");

126 i‡((
wlog
 = 
	`tc_ªd_evÆ_ewma
(
›t
.
qth_mö
, 
bur°
, 
avpkt
)) < 0) {

127 
	`Ârötf
(
°dîr
, "RED: failedÅo calculate EWMA constant.\n");

130 i‡(
wlog
 >= 10)

131 
	`Ârötf
(
°dîr
, "RED: WARNING. Bur° %d sìm†tÿbêtÿœrge.\n", 
bur°
);

132 
›t
.
Wlog
 = 
wlog
;

133 i‡((
wlog
 = 
	`tc_ªd_evÆ_P
(
›t
.
qth_mö
, o±.
qth_max
, 
¥obabûôy
)) < 0) {

134 
	`Ârötf
(
°dîr
, "RED: failedÅo calculateÖrobability.\n");

137 
›t
.
Plog
 = 
wlog
;

138 i‡((
wlog
 = 
	`tc_ªd_evÆ_idÀ_dampög
(
›t
.
Wlog
, 
avpkt
, 
øã
, 
sbuf
)) < 0) {

139 
	`Ârötf
(
°dîr
, "RED: failedÅo calculate idle dampingÅable.\n");

142 
›t
.
S˚Œ_log
 = 
wlog
;

143 i‡(
e˙_ok
) {

144 #ifde‡
TC_RED_ECN


145 
›t
.
Êags
 |
TC_RED_ECN
;

147 
	`Ârötf
(
°dîr
, "RED: ECN support is missing inÅhis binary.\n");

152 
èû
 = 
	`NLMSG_TAIL
(
n
);

153 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

154 
	`add©å_l
(
n
, 1024, 
TCA_RED_PARMS
, &
›t
, (opt));

155 
	`add©å_l
(
n
, 1024, 
TCA_RED_STAB
, 
sbuf
, 256);

156 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

158 
	}
}

160 
	$ªd_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

162 
π©å
 *
tb
[
TCA_RED_STAB
+1];

163 
tc_ªd_q›t
 *
q›t
;

164 
	`SPRINT_BUF
(
b1
);

165 
	`SPRINT_BUF
(
b2
);

166 
	`SPRINT_BUF
(
b3
);

168 i‡(
›t
 =
NULL
)

171 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_RED_STAB
, 
›t
);

173 i‡(
tb
[
TCA_RED_PARMS
] =
NULL
)

175 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_RED_PARMS
]);

176 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_RED_PARMS
]Ë< (*
q›t
))

178 
	`Ârötf
(
f
, "limit %s min %s max %s ",

179 
	`•röt_size
(
q›t
->
limô
, 
b1
),

180 
	`•röt_size
(
q›t
->
qth_mö
, 
b2
),

181 
	`•röt_size
(
q›t
->
qth_max
, 
b3
));

182 #ifde‡
TC_RED_ECN


183 i‡(
q›t
->
Êags
 & 
TC_RED_ECN
)

184 
	`Ârötf
(
f
, "ecn ");

186 i‡(
show_dëaûs
) {

187 
	`Ârötf
(
f
, "ewma %u Plog %u Scell_log %u",

188 
q›t
->
Wlog
, q›t->
Plog
, q›t->
S˚Œ_log
);

191 
	}
}

193 
	$ªd_¥öt_x°©s
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
x°©s
)

195 #ifde‡
TC_RED_ECN


196 
tc_ªd_x°©s
 *
°
;

198 i‡(
x°©s
 =
NULL
)

201 i‡(
	`RTA_PAYLOAD
(
x°©s
Ë< (*
°
))

204 
°
 = 
	`RTA_DATA
(
x°©s
);

205 
	`Ârötf
(
f
, " marked %uÉarly %uÖdrop %u other %u",

206 
°
->
m¨ked
, st->
óæy
, st->
pdr›
, st->
Ÿhî
);

211 
	}
}

214 
qdisc_utû
 
	gªd_qdisc_utû
 = {

215 .
id
 = "red",

216 .
	g∑r£_q›t
 = 
ªd_∑r£_›t
,

217 .
	g¥öt_q›t
 = 
ªd_¥öt_›t
,

218 .
	g¥öt_x°©s
 = 
ªd_¥öt_x°©s
,

	@q_sfq.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ... sfq [Üimit NUMBER ] [Öerturb SECS ] [ quantum BYTES ]\n");

29 
	}
}

31 
	#ußge
(Ë(-1)

	)

33 
	$sfq_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

35 
ok
=0;

36 
tc_sfq_q›t
 
›t
;

38 
	`mem£t
(&
›t
, 0, (opt));

40 
¨gc
 > 0) {

41 i‡(
	`°rcmp
(*
¨gv
, "quantum") == 0) {

42 
	`NEXT_ARG
();

43 i‡(
	`gë_size
(&
›t
.
qu™tum
, *
¨gv
)) {

44 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

47 
ok
++;

48 } i‡(
	`°rcmp
(*
¨gv
, "perturb") == 0) {

49 
	`NEXT_ARG
();

50 i‡(
	`gë_öãgî
(&
›t
.
≥πurb_≥riod
, *
¨gv
, 0)) {

51 
	`Ârötf
(
°dîr
, "Illegal \"perturb\"\n");

54 
ok
++;

55 } i‡(
	`°rcmp
(*
¨gv
, "limit") == 0) {

56 
	`NEXT_ARG
();

57 i‡(
	`gë_u32
(&
›t
.
limô
, *
¨gv
, 0)) {

58 
	`Ârötf
(
°dîr
, "Illegal \"limit\"\n");

61 i‡(
›t
.
limô
 < 2) {

62 
	`Ârötf
(
°dîr
, "Illegal \"limit\", must be > 1\n");

65 
ok
++;

66 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

67 
	`ex∂aö
();

70 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

71 
	`ex∂aö
();

74 
¨gc
--; 
¨gv
++;

77 i‡(
ok
)

78 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, &
›t
, (opt));

80 
	}
}

82 
	$sfq_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

84 
tc_sfq_q›t
 *
q›t
;

85 
	`SPRINT_BUF
(
b1
);

87 i‡(
›t
 =
NULL
)

90 i‡(
	`RTA_PAYLOAD
(
›t
Ë< (*
q›t
))

92 
q›t
 = 
	`RTA_DATA
(
›t
);

93 
	`Ârötf
(
f
, "limô %u∞", 
q›t
->
limô
);

94 
	`Ârötf
(
f
, "qu™tum %†", 
	`•röt_size
(
q›t
->
qu™tum
, 
b1
));

95 i‡(
show_dëaûs
) {

96 
	`Ârötf
(
f
, "Êow†%u/%u ", 
q›t
->
Êows
, q›t->
divis‹
);

98 i‡(
q›t
->
≥πurb_≥riod
)

99 
	`Ârötf
(
f
, "≥πurb %d£¯", 
q›t
->
≥πurb_≥riod
);

101 
	}
}

103 
qdisc_utû
 
	gsfq_qdisc_utû
 = {

104 .
id
 = "sfq",

105 .
	g∑r£_q›t
 = 
sfq_∑r£_›t
,

106 .
	g¥öt_q›t
 = 
sfq_¥öt_›t
,

	@q_tbf.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

23 
	~"utûs.h
"

24 
	~"tc_utû.h
"

26 
	$ex∂aö
()

28 
	`Ârötf
(
°dîr
, "Usage: ...ÅbfÜimit BYTES burst BYTES[/BYTES]Ñate KBPS [ mtu BYTES[/BYTES] ]\n");

29 
	`Ârötf
(
°dîr
, " [Öeakrate KBPS ] [Üatency TIME ]\n");

30 
	}
}

32 
	$ex∂aö1
(*
¨g
)

34 
	`Ârötf
(
°dîr
, "IŒegÆ \"%s\"\n", 
¨g
);

35 
	}
}

38 
	#ußge
(Ë(-1)

	)

40 
	$tbf_∑r£_›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

42 
ok
=0;

43 
tc_tbf_q›t
 
›t
;

44 
__u32
 
πab
[256];

45 
__u32
 
±ab
[256];

46 
buf„r
=0, 
mtu
=0, 
mpu
=0, 
œãncy
=0;

47 
R˚Œ_log
=-1, 
P˚Œ_log
 = -1;

48 
π©å
 *
èû
;

50 
	`mem£t
(&
›t
, 0, (opt));

52 
¨gc
 > 0) {

53 i‡(
	`m©ches
(*
¨gv
, "limit") == 0) {

54 
	`NEXT_ARG
();

55 i‡(
›t
.
limô
 || 
œãncy
) {

56 
	`Ârötf
(
°dîr
, "Double \"limit/latency\" spec\n");

59 i‡(
	`gë_size
(&
›t
.
limô
, *
¨gv
)) {

60 
	`ex∂aö1
("limit");

63 
ok
++;

64 } i‡(
	`m©ches
(*
¨gv
, "latency") == 0) {

65 
	`NEXT_ARG
();

66 i‡(
›t
.
limô
 || 
œãncy
) {

67 
	`Ârötf
(
°dîr
, "Double \"limit/latency\" spec\n");

70 i‡(
	`gë_time
(&
œãncy
, *
¨gv
)) {

71 
	`ex∂aö1
("latency");

74 
ok
++;

75 } i‡(
	`m©ches
(*
¨gv
, "burst") == 0 ||

76 
	`°rcmp
(*
¨gv
, "buffer") == 0 ||

77 
	`°rcmp
(*
¨gv
, "maxburst") == 0) {

78 
	`NEXT_ARG
();

79 i‡(
buf„r
) {

80 
	`Ârötf
(
°dîr
, "Double \"buffer/burst\" spec\n");

83 i‡(
	`gë_size_™d_˚Œ
(&
buf„r
, &
R˚Œ_log
, *
¨gv
) < 0) {

84 
	`ex∂aö1
("buffer");

87 
ok
++;

88 } i‡(
	`°rcmp
(*
¨gv
, "mtu") == 0 ||

89 
	`°rcmp
(*
¨gv
, "minburst") == 0) {

90 
	`NEXT_ARG
();

91 i‡(
mtu
) {

92 
	`Ârötf
(
°dîr
, "Double \"mtu/minburst\" spec\n");

95 i‡(
	`gë_size_™d_˚Œ
(&
mtu
, &
P˚Œ_log
, *
¨gv
) < 0) {

96 
	`ex∂aö1
("mtu");

99 
ok
++;

100 } i‡(
	`°rcmp
(*
¨gv
, "mpu") == 0) {

101 
	`NEXT_ARG
();

102 i‡(
mpu
) {

103 
	`Ârötf
(
°dîr
, "Double \"mpu\" spec\n");

106 i‡(
	`gë_size
(&
mpu
, *
¨gv
)) {

107 
	`ex∂aö1
("mpu");

110 
ok
++;

111 } i‡(
	`°rcmp
(*
¨gv
, "rate") == 0) {

112 
	`NEXT_ARG
();

113 i‡(
›t
.
øã
.rate) {

114 
	`Ârötf
(
°dîr
, "Double \"rate\" spec\n");

117 i‡(
	`gë_øã
(&
›t
.
øã
.øã, *
¨gv
)) {

118 
	`ex∂aö1
("rate");

121 
ok
++;

122 } i‡(
	`m©ches
(*
¨gv
, "peakrate") == 0) {

123 
	`NEXT_ARG
();

124 i‡(
›t
.
≥akøã
.
øã
) {

125 
	`Ârötf
(
°dîr
, "Double \"peakrate\" spec\n");

128 i‡(
	`gë_øã
(&
›t
.
≥akøã
.
øã
, *
¨gv
)) {

129 
	`ex∂aö1
("peakrate");

132 
ok
++;

133 } i‡(
	`°rcmp
(*
¨gv
, "help") == 0) {

134 
	`ex∂aö
();

137 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"?\n", *
¨gv
);

138 
	`ex∂aö
();

141 
¨gc
--; 
¨gv
++;

144 i‡(!
ok
)

147 i‡(
›t
.
øã
.øã =0 || !
buf„r
) {

148 
	`Ârötf
(
°dîr
, "Both \"rate\"ánd \"burst\"áreÑequired.\n");

151 i‡(
›t
.
≥akøã
.
øã
) {

152 i‡(!
mtu
) {

153 
	`Ârötf
(
°dîr
, "\"mtu\" isÑequired, if \"peakrate\" isÑequested.\n");

158 i‡(
›t
.
limô
 =0 && 
œãncy
 == 0) {

159 
	`Ârötf
(
°dîr
, "Either \"limit\" or \"latency\"áreÑequired.\n");

163 i‡(
›t
.
limô
 == 0) {

164 
lim
 = 
›t
.
øã
.øã*()
œãncy
/
TIME_UNITS_PER_SEC
 + 
buf„r
;

165 i‡(
›t
.
≥akøã
.
øã
) {

166 
lim2
 = 
›t
.
≥akøã
.
øã
*()
œãncy
/
TIME_UNITS_PER_SEC
 + 
mtu
;

167 i‡(
lim2
 < 
lim
)

168 
lim
 = 
lim2
;

170 
›t
.
limô
 = 
lim
;

173 i‡((
R˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
›t
.
øã
.øã, 
πab
, R˚Œ_log, 
mtu
, 
mpu
)) < 0) {

174 
	`Ârötf
(
°dîr
, "TBF: failedÅo calculateÑateÅable.\n");

177 
›t
.
buf„r
 = 
	`tc_ˇlc_xmôtime
(›t.
øã
.rate, buffer);

178 
›t
.
øã
.
˚Œ_log
 = 
R˚Œ_log
;

179 
›t
.
øã
.
mpu
 = mpu;

180 i‡(
›t
.
≥akøã
.
øã
) {

181 i‡((
P˚Œ_log
 = 
	`tc_ˇlc_πabÀ
(
›t
.
≥akøã
.
øã
, 
±ab
, P˚Œ_log, 
mtu
, 
mpu
)) < 0) {

182 
	`Ârötf
(
°dîr
, "TBF: failedÅo calculateÖeakÑateÅable.\n");

185 
›t
.
mtu
 = 
	`tc_ˇlc_xmôtime
(›t.
≥akøã
.
øã
, mtu);

186 
›t
.
≥akøã
.
˚Œ_log
 = 
P˚Œ_log
;

187 
›t
.
≥akøã
.
mpu
 = mpu;

190 
èû
 = 
	`NLMSG_TAIL
(
n
);

191 
	`add©å_l
(
n
, 1024, 
TCA_OPTIONS
, 
NULL
, 0);

192 
	`add©å_l
(
n
, 2024, 
TCA_TBF_PARMS
, &
›t
, (opt));

193 
	`add©å_l
(
n
, 3024, 
TCA_TBF_RTAB
, 
πab
, 1024);

194 i‡(
›t
.
≥akøã
.
øã
)

195 
	`add©å_l
(
n
, 4096, 
TCA_TBF_PTAB
, 
±ab
, 1024);

196 
èû
->
πa_Àn
 = (*Ë
	`NLMSG_TAIL
(
n
) - (*)Åail;

198 
	}
}

200 
	$tbf_¥öt_›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
)

202 
π©å
 *
tb
[
TCA_TBF_PTAB
+1];

203 
tc_tbf_q›t
 *
q›t
;

204 
buf„r
, 
mtu
;

205 
œãncy
;

206 
	`SPRINT_BUF
(
b1
);

207 
	`SPRINT_BUF
(
b2
);

209 i‡(
›t
 =
NULL
)

212 
	`∑r£_π©å_√°ed
(
tb
, 
TCA_TBF_PTAB
, 
›t
);

214 i‡(
tb
[
TCA_TBF_PARMS
] =
NULL
)

217 
q›t
 = 
	`RTA_DATA
(
tb
[
TCA_TBF_PARMS
]);

218 i‡(
	`RTA_PAYLOAD
(
tb
[
TCA_TBF_PARMS
]Ë< (*
q›t
))

220 
	`Ârötf
(
f
, "øã %†", 
	`•röt_øã
(
q›t
->
øã
.øã, 
b1
));

221 
buf„r
 = 
	`tc_ˇlc_xmôsize
(
q›t
->
øã
.rate, qopt->buffer);

222 i‡(
show_dëaûs
) {

223 
	`Ârötf
(
f
, "bur° %s/%u mpu %†", 
	`•röt_size
(
buf„r
, 
b1
),

224 1<<
q›t
->
øã
.
˚Œ_log
, 
	`•röt_size
(q›t->øã.
mpu
, 
b2
));

226 
	`Ârötf
(
f
, "bur° %†", 
	`•röt_size
(
buf„r
, 
b1
));

228 i‡(
show_øw
)

229 
	`Ârötf
(
f
, "[%08x] ", 
q›t
->
buf„r
);

230 i‡(
q›t
->
≥akøã
.
øã
) {

231 
	`Ârötf
(
f
, "≥akøã %†", 
	`•röt_øã
(
q›t
->
≥akøã
.
øã
, 
b1
));

232 i‡(
q›t
->
mtu
 || q›t->
≥akøã
.
mpu
) {

233 
mtu
 = 
	`tc_ˇlc_xmôsize
(
q›t
->
≥akøã
.
øã
, qopt->mtu);

234 i‡(
show_dëaûs
) {

235 
	`Ârötf
(
f
, "mtu %s/%u mpu %†", 
	`•röt_size
(
mtu
, 
b1
),

236 1<<
q›t
->
≥akøã
.
˚Œ_log
, 
	`•röt_size
(q›t->≥akøã.
mpu
, 
b2
));

238 
	`Ârötf
(
f
, "möbur° %†", 
	`•röt_size
(
mtu
, 
b1
));

240 i‡(
show_øw
)

241 
	`Ârötf
(
f
, "[%08x] ", 
q›t
->
mtu
);

245 i‡(
show_øw
)

246 
	`Ârötf
(
f
, "limô %†", 
	`•röt_size
(
q›t
->
limô
, 
b1
));

248 
œãncy
 = 
TIME_UNITS_PER_SEC
*(
q›t
->
limô
/()q›t->
øã
.øãË- 
	`tc_c‹e_tick2time
(q›t->
buf„r
);

249 i‡(
q›t
->
≥akøã
.
øã
) {

250 
œt2
 = 
TIME_UNITS_PER_SEC
*(
q›t
->
limô
/()q›t->
≥akøã
.
øã
Ë- 
	`tc_c‹e_tick2time
(q›t->
mtu
);

251 i‡(
œt2
 > 
œãncy
)

252 
œãncy
 = 
œt2
;

254 
	`Ârötf
(
f
, "œà%†", 
	`•röt_time
(
œãncy
, 
b1
));

257 
	}
}

259 
qdisc_utû
 
	gtbf_qdisc_utû
 = {

260 .
id
 = "tbf",

261 .
	g∑r£_q›t
 = 
tbf_∑r£_›t
,

262 .
	g¥öt_q›t
 = 
tbf_¥öt_›t
,

	@tc.c

16 
	~<°dio.h
>

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<sy¶og.h
>

20 
	~<f˙é.h
>

21 
	~<dlf˙.h
>

22 
	~<sys/sockë.h
>

23 
	~<√töë/ö.h
>

24 
	~<¨∑/öë.h
>

25 
	~<°rög.h
>

26 
	~<î∫o.h
>

28 
	~"SNAPSHOT.h
"

29 
	~"utûs.h
"

30 
	~"tc_utû.h
"

31 
	~"tc_comm⁄.h
"

33 
	gshow_°©s
 = 0;

34 
	gshow_dëaûs
 = 0;

35 
	gshow_øw
 = 0;

36 
	gªsﬁve_ho°s
 = 0;

37 
	gu£_õc
 = 0;

38 
	gf‹˚
 = 0;

39 
π∆_h™dÀ
 
	gπh
;

41 *
	gBODY
 = 
NULL
;

42 
qdisc_utû
 * 
	gqdisc_li°
;

43 
fûãr_utû
 * 
	gfûãr_li°
;

45 
	$¥öt_noq›t
(
qdisc_utû
 *
qu
, 
FILE
 *
f
,

46 
π©å
 *
›t
)

48 i‡(
›t
 && 
	`RTA_PAYLOAD
(opt))

49 
	`Ârötf
(
f
, "[Unknown qdisc, optlen=%u] ",

50 (Ë
	`RTA_PAYLOAD
(
›t
));

52 
	}
}

54 
	$∑r£_noq›t
(
qdisc_utû
 *
qu
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

56 i‡(
¨gc
) {

57 
	`Ârötf
(
°dîr
, "Unknow¿qdis¯\"%s\", hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", 
qu
->
id
, *
¨gv
);

61 
	}
}

63 
	$¥öt_nof›t
(
fûãr_utû
 *
qu
, 
FILE
 *
f
, 
π©å
 *
›t
, 
__u32
 
fh™dÀ
)

65 i‡(
›t
 && 
	`RTA_PAYLOAD
(opt))

66 
	`Ârötf
(
f
, "fh %08x [Unknown filter, optlen=%u] ",

67 
fh™dÀ
, (Ë
	`RTA_PAYLOAD
(
›t
));

68 i‡(
fh™dÀ
)

69 
	`Ârötf
(
f
, "fh %08x ", 
fh™dÀ
);

71 
	}
}

73 
	$∑r£_nof›t
(
fûãr_utû
 *
qu
, *
fh™dÀ
, 
¨gc
, **
¨gv
, 
∆msghdr
 *
n
)

75 
__u32
 
h™dÀ
;

77 i‡(
¨gc
) {

78 
	`Ârötf
(
°dîr
, "Unknow¿fûã∏\"%s\", hí˚ o±i⁄ \"%s\" i†u≈¨ßbÀ\n", 
qu
->
id
, *
¨gv
);

81 i‡(
fh™dÀ
) {

82 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

83 i‡(
	`gë_u32
(&
h™dÀ
, 
fh™dÀ
, 16)) {

84 
	`Ârötf
(
°dîr
, "U≈¨ßbÀ fûã∏ID \"%s\"\n", 
fh™dÀ
);

87 
t
->
tcm_h™dÀ
 = 
h™dÀ
;

90 
	}
}

92 
qdisc_utû
 *
	$gë_qdisc_köd
(c⁄° *
°r
)

94 *
dlh
;

95 
buf
[256];

96 
qdisc_utû
 *
q
;

98 
q
 = 
qdisc_li°
; q; q = q->
√xt
)

99 i‡(
	`°rcmp
(
q
->
id
, 
°r
) == 0)

100  
q
;

102 
	`¢¥ötf
(
buf
, (buf), "%s/q_%s.so", 
	`gë_tc_lib
(), 
°r
);

103 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

104 i‡(!
dlh
) {

106 
dlh
 = 
BODY
;

107 i‡(
dlh
 =
NULL
) {

108 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

109 i‡(
dlh
 =
NULL
)

110 
n€xi°
;

114 
	`¢¥ötf
(
buf
, (buf), "%s_qdisc_utû", 
°r
);

115 
q
 = 
	`dlsym
(
dlh
, 
buf
);

116 i‡(
q
 =
NULL
)

117 
n€xi°
;

119 
ªg
:

120 
q
->
√xt
 = 
qdisc_li°
;

121 
qdisc_li°
 = 
q
;

122  
q
;

124 
n€xi°
:

125 
q
 = 
	`mÆloc
((*q));

126 i‡(
q
) {

128 
	`mem£t
(
q
, 0, (*q));

129 
q
->
id
 = 
	`°r˝y
(
	`mÆloc
(
	`°æí
(
°r
)+1), str);

130 
q
->
∑r£_q›t
 = 
∑r£_noq›t
;

131 
q
->
¥öt_q›t
 = 
¥öt_noq›t
;

132 
ªg
;

134  
q
;

135 
	}
}

138 
fûãr_utû
 *
	$gë_fûãr_köd
(c⁄° *
°r
)

140 *
dlh
;

141 
buf
[256];

142 
fûãr_utû
 *
q
;

144 
q
 = 
fûãr_li°
; q; q = q->
√xt
)

145 i‡(
	`°rcmp
(
q
->
id
, 
°r
) == 0)

146  
q
;

148 
	`¢¥ötf
(
buf
, (buf), "%s/f_%s.so", 
	`gë_tc_lib
(), 
°r
);

149 
dlh
 = 
	`dl›í
(
buf
, 
RTLD_LAZY
);

150 i‡(
dlh
 =
NULL
) {

151 
dlh
 = 
BODY
;

152 i‡(
dlh
 =
NULL
) {

153 
dlh
 = 
BODY
 = 
	`dl›í
(
NULL
, 
RTLD_LAZY
);

154 i‡(
dlh
 =
NULL
)

155 
n€xi°
;

159 
	`¢¥ötf
(
buf
, (buf), "%s_fûãr_utû", 
°r
);

160 
q
 = 
	`dlsym
(
dlh
, 
buf
);

161 i‡(
q
 =
NULL
)

162 
n€xi°
;

164 
ªg
:

165 
q
->
√xt
 = 
fûãr_li°
;

166 
fûãr_li°
 = 
q
;

167  
q
;

168 
n€xi°
:

169 
q
 = 
	`mÆloc
((*q));

170 i‡(
q
) {

171 
	`mem£t
(
q
, 0, (*q));

172 
	`°∫˝y
(
q
->
id
, 
°r
, 15);

173 
q
->
∑r£_f›t
 = 
∑r£_nof›t
;

174 
q
->
¥öt_f›t
 = 
¥öt_nof›t
;

175 
ªg
;

177  
q
;

178 
	}
}

180 
	$ußge
()

182 
	`Ârötf
(
°dîr
, "Usage:Åc [ OPTIONS ] OBJECT { COMMAND | help }\n"

186 
	}
}

188 
	$do_cmd
(
¨gc
, **
¨gv
)

190 i‡(
	`m©ches
(*
¨gv
, "qdisc") == 0)

191  
	`do_qdisc
(
¨gc
-1, 
¨gv
+1);

193 i‡(
	`m©ches
(*
¨gv
, "class") == 0)

194  
	`do_˛ass
(
¨gc
-1, 
¨gv
+1);

196 i‡(
	`m©ches
(*
¨gv
, "filter") == 0)

197  
	`do_fûãr
(
¨gc
-1, 
¨gv
+1);

199 i‡(
	`m©ches
(*
¨gv
, "actions") == 0)

200  
	`do_a˘i⁄
(
¨gc
-1, 
¨gv
+1);

202 i‡(
	`m©ches
(*
¨gv
, "monitor") == 0)

203  
	`do_tcm⁄ô‹
(
¨gc
-1, 
¨gv
+1);

205 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

206 
	`ußge
();

210 
	`Ârötf
(
°dîr
, "Object \"%s\" is unknown,Åry \"tc help\".\n",

211 *
¨gv
);

213 
	}
}

215 
	$b©ch
(c⁄° *
«me
)

217 *
löe
 = 
NULL
;

218 
size_t
 
Àn
 = 0;

219 
ªt
 = 0;

221 i‡(
«me
 && 
	`°rcmp
(name, "-") != 0) {

222 i‡(
	`‰e›í
(
«me
, "r", 
°dö
Ë=
NULL
) {

223 
	`Ârötf
(
°dîr
, "Cannot open file \"%s\" forÑeading: %s=n",

224 
«me
, 
	`°ªº‹
(
î∫o
));

229 
	`tc_c‹e_öô
();

231 i‡(
	`π∆_›í
(&
πh
, 0) < 0) {

232 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

236 
cmdlöío
 = 0;

237 
	`gëcmdlöe
(&
löe
, &
Àn
, 
°dö
) != -1) {

238 *
œrgv
[100];

239 
œrgc
;

241 
œrgc
 = 
	`makórgs
(
löe
, 
œrgv
, 100);

242 i‡(
œrgc
 == 0)

245 i‡(
	`do_cmd
(
œrgc
, 
œrgv
)) {

246 
	`Ârötf
(
°dîr
, "Comm™d faûed %s:%d\n", 
«me
, 
cmdlöío
);

247 
ªt
 = 1;

248 i‡(!
f‹˚
)

252 i‡(
löe
)

253 
	`‰ì
(
löe
);

255 
	`π∆_˛o£
(&
πh
);

256  
ªt
;

257 
	}
}

260 
	$maö
(
¨gc
, **
¨gv
)

262 
ªt
;

263 
do_b©chög
 = 0;

264 *
b©chfûe
 = 
NULL
;

266 
¨gc
 > 1) {

267 i‡(
¨gv
[1][0] != '-')

269 i‡(
	`m©ches
(
¨gv
[1], "-stats") == 0 ||

270 
	`m©ches
(
¨gv
[1], "-statistics") == 0) {

271 ++
show_°©s
;

272 } i‡(
	`m©ches
(
¨gv
[1], "-details") == 0) {

273 ++
show_dëaûs
;

274 } i‡(
	`m©ches
(
¨gv
[1], "-raw") == 0) {

275 ++
show_øw
;

276 } i‡(
	`m©ches
(
¨gv
[1], "-Version") == 0) {

277 
	`¥ötf
("t¯utûôy, i¥ouã2-ss%s\n", 
SNAPSHOT
);

279 } i‡(
	`m©ches
(
¨gv
[1], "-iec") == 0) {

280 ++
u£_õc
;

281 } i‡(
	`m©ches
(
¨gv
[1], "-help") == 0) {

282 
	`ußge
();

284 } i‡(
	`m©ches
(
¨gv
[1], "-force") == 0) {

285 ++
f‹˚
;

286 } i‡(
	`m©ches
(
¨gv
[1], "-batch") == 0) {

287 
do_b©chög
 = 1;

288 i‡(
¨gc
 > 2)

289 
b©chfûe
 = 
¨gv
[2];

290 
¨gc
--; 
¨gv
++;

292 
	`Ârötf
(
°dîr
, "O±i⁄ \"%s\" i†unknown,Åry \"t¯-hñp\".\n", 
¨gv
[1]);

295 
¨gc
--; 
¨gv
++;

298 i‡(
do_b©chög
)

299  
	`b©ch
(
b©chfûe
);

301 i‡(
¨gc
 <= 1) {

302 
	`ußge
();

306 
	`tc_c‹e_öô
();

307 i‡(
	`π∆_›í
(&
πh
, 0) < 0) {

308 
	`Ârötf
(
°dîr
, "Cannot openÑtnetlink\n");

309 
	`exô
(1);

312 
ªt
 = 
	`do_cmd
(
¨gc
-1, 
¨gv
+1);

313 
	`π∆_˛o£
(&
πh
);

315  
ªt
;

316 
	}
}

	@tc_cbq.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

25 
	~"tc_cbq.h
"

27 
	$tc_cbq_ˇlc_maxidÀ
(
bndw
, 
øã
, 
avpkt
,

28 
ewma_log
, 
maxbur°
)

30 
maxidÀ
;

31 
g
 = 1.0 - 1.0/(1<<
ewma_log
);

32 
xmt
 = ()
avpkt
/
bndw
;

34 
maxidÀ
 = 
xmt
*(1-
g
);

35 i‡(
bndw
 !
øã
 && 
maxbur°
) {

36 
vxmt
 = ()
avpkt
/
øã
 - 
xmt
;

37 
vxmt
 *(
	`pow
(
g
, -()
maxbur°
) - 1);

38 i‡(
vxmt
 > 
maxidÀ
)

39 
maxidÀ
 = 
vxmt
;

41  
	`tc_c‹e_time2tick
(
maxidÀ
*(1<<
ewma_log
)*
TIME_UNITS_PER_SEC
);

42 
	}
}

44 
	$tc_cbq_ˇlc_of·ime
(
bndw
, 
øã
, 
avpkt
,

45 
ewma_log
, 
möbur°
)

47 
g
 = 1.0 - 1.0/(1<<
ewma_log
);

48 
of·ime
 = ()
avpkt
/
øã
 - (Ôvpkt/
bndw
;

50 i‡(
möbur°
 == 0)

52 i‡(
möbur°
 == 1)

53 
of·ime
 *
	`pow
(
g
, -()
möbur°
) - 1;

55 
of·ime
 *1 + (
	`pow
(
g
, -()(
möbur°
-1)) - 1)/(1-g);

56  
	`tc_c‹e_time2tick
(
of·ime
*
TIME_UNITS_PER_SEC
);

57 
	}
}

	@tc_cbq.h

1 #i‚de‡
_TC_CBQ_H_


2 
	#_TC_CBQ_H_
 1

	)

4 
tc_cbq_ˇlc_maxidÀ
(
bndw
, 
øã
, 
avpkt
,

5 
ewma_log
, 
maxbur°
);

6 
tc_cbq_ˇlc_of·ime
(
bndw
, 
øã
, 
avpkt
,

7 
ewma_log
, 
möbur°
);

	@tc_class.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

28 
ußge
();

30 
	$ußge
()

32 
	`Ârötf
(
°dîr
, "Usage:Åc class [ádd | del | change |Ñeplace | show ] dev STRING\n");

33 
	`Ârötf
(
°dîr
, " [ classid CLASSID ] [Ñoot |Öarent CLASSID ]\n");

34 
	`Ârötf
(
°dîr
, " [ [ QDISC_KIND ] [ help | OPTIONS ] ]\n");

35 
	`Ârötf
(
°dîr
, "\n");

36 
	`Ârötf
(
°dîr
, "Åc class show [ dev STRING ] [Ñoot |Öarent CLASSID ]\n");

37 
	`Ârötf
(
°dîr
, "Where:\n");

38 
	`Ârötf
(
°dîr
, "QDISC_KIND := {Örio | cbq |Étc. }\n");

39 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅc classádd <desired QDISC_KIND> help\n");

41 
	}
}

43 
	$tc_˛ass_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

46 
∆msghdr
 
n
;

47 
tcmsg
 
t
;

48 
buf
[4096];

49 } 
ªq
;

50 
qdisc_utû
 *
q
 = 
NULL
;

51 
tc_e°im©‹
 
e°
;

52 
d
[16];

53 
k
[16];

55 
	`mem£t
(&
ªq
, 0, (req));

56 
	`mem£t
(&
e°
, 0, (est));

57 
	`mem£t
(
d
, 0, (d));

58 
	`mem£t
(
k
, 0, (k));

60 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

61 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

62 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

63 
ªq
.
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

65 
¨gc
 > 0) {

66 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

67 
	`NEXT_ARG
();

68 i‡(
d
[0])

69 
	`du∑rg
("dev", *
¨gv
);

70 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

71 } i‡(
	`°rcmp
(*
¨gv
, "classid") == 0) {

72 
__u32
 
h™dÀ
;

73 
	`NEXT_ARG
();

74 i‡(
ªq
.
t
.
tcm_h™dÀ
)

75 
	`du∑rg
("˛assid", *
¨gv
);

76 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

77 
	`öv¨g
(*
¨gv
, "invalid class ID");

78 
ªq
.
t
.
tcm_h™dÀ
 = 
h™dÀ
;

79 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

80 
	`Ârötf
(
°dîr
, "Error:Åry \"classid\" instead of \"handle\"\n");

82 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

83 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

84 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID.\n");

87 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

88 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

89 
__u32
 
h™dÀ
;

90 
	`NEXT_ARG
();

91 i‡(
ªq
.
t
.
tcm_∑ª¡
)

92 
	`du∑rg
("∑ª¡", *
¨gv
);

93 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

94 
	`öv¨g
(*
¨gv
, "invalidÖarent ID");

95 
ªq
.
t
.
tcm_∑ª¡
 = 
h™dÀ
;

96 } i‡(
	`m©ches
(*
¨gv
, "estimator") == 0) {

97 i‡(
	`∑r£_e°im©‹
(&
¨gc
, &
¨gv
, &
e°
))

99 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

100 
	`ußge
();

102 
	`°∫˝y
(
k
, *
¨gv
, (k)-1);

104 
q
 = 
	`gë_qdisc_köd
(
k
);

105 
¨gc
--; 
¨gv
++;

108 
¨gc
--; 
¨gv
++;

111 i‡(
k
[0])

112 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_KIND
, 
k
, 
	`°æí
(k)+1);

113 i‡(
e°
.
ewma_log
)

114 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_RATE
, &
e°
, (est));

116 i‡(
q
) {

117 i‡(
q
->
∑r£_c›t
 =
NULL
) {

118 
	`Ârötf
(
°dîr
, "Eº‹: Qdis¯\"%s\" i†˛as¶ess.\n", 
k
);

121 i‡(
q
->
	`∑r£_c›t
(q, 
¨gc
, 
¨gv
, &
ªq
.
n
))

124 i‡(
¨gc
) {

125 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

126 
	`ußge
();

127 
	`Ârötf
(
°dîr
, "G¨bagêö°ód o‡¨gumít†\"%†...\". Try \"t¯˛as†hñp\".", *
¨gv
);

132 i‡(
d
[0]) {

133 
	`Œ_öô_m≠
(&
πh
);

135 i‡((
ªq
.
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

136 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

141 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 0, 0, 
NULL
, NULL, NULL) < 0)

145 
	}
}

147 
	gfûãr_ifödex
;

148 
__u32
 
	gfûãr_qdisc
;

150 
	$¥öt_˛ass
(c⁄° 
sockaddr_∆
 *
who
,

151 
∆msghdr
 *
n
, *
¨g
)

153 
FILE
 *
Â
 = (FILE*)
¨g
;

154 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

155 
Àn
 = 
n
->
∆msg_Àn
;

156 
π©å
 * 
tb
[
TCA_MAX
+1];

157 
qdisc_utû
 *
q
;

158 
abuf
[256];

160 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWTCLASS
 &&Ç->∆msg_ty≥ !
RTM_DELTCLASS
) {

161 
	`Ârötf
(
°dîr
, "Notá class\n");

164 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

165 i‡(
Àn
 < 0) {

166 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

169 i‡(
fûãr_qdisc
 && 
	`TC_H_MAJ
(
t
->
tcm_h™dÀ
^filter_qdisc))

172 
	`mem£t
(
tb
, 0, (tb));

173 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, 
	`TCA_RTA
(
t
), 
Àn
);

175 i‡(
tb
[
TCA_KIND
] =
NULL
) {

176 
	`Ârötf
(
°dîr
, "print_class: NULL kind\n");

180 i‡(
n
->
∆msg_ty≥
 =
RTM_DELTCLASS
)

181 
	`Ârötf
(
Â
, "deleted ");

183 
abuf
[0] = 0;

184 i‡(
t
->
tcm_h™dÀ
) {

185 i‡(
fûãr_qdisc
)

186 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
	`TC_H_MIN
(
t
->
tcm_h™dÀ
));

188 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_h™dÀ
);

190 
	`Ârötf
(
Â
, "˛as†%†%†", (*)
	`RTA_DATA
(
tb
[
TCA_KIND
]), 
abuf
);

192 i‡(
fûãr_ifödex
 == 0)

193 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
t
->
tcm_ifödex
));

195 i‡(
t
->
tcm_∑ª¡
 =
TC_H_ROOT
)

196 
	`Ârötf
(
Â
, "root ");

198 i‡(
fûãr_qdisc
)

199 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
	`TC_H_MIN
(
t
->
tcm_∑ª¡
));

201 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_∑ª¡
);

202 
	`Ârötf
(
Â
, "∑ª¡ %†", 
abuf
);

204 i‡(
t
->
tcm_öfo
)

205 
	`Ârötf
(
Â
, "Àa‡%x: ", 
t
->
tcm_öfo
>>16);

206 
q
 = 
	`gë_qdisc_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

207 i‡(
tb
[
TCA_OPTIONS
]) {

208 i‡(
q
 && q->
¥öt_c›t
)

209 
q
->
	`¥öt_c›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
]);

211 
	`Ârötf
(
Â
, "[cannotÖarse classÖarameters]");

213 
	`Ârötf
(
Â
, "\n");

214 i‡(
show_°©s
) {

215 
π©å
 *
x°©s
 = 
NULL
;

217 i‡(
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
]) {

218 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, " ", &
x°©s
);

219 
	`Ârötf
(
Â
, "\n");

221 i‡(
q
 && (
x°©s
 || 
tb
[
TCA_XSTATS
]Ë&& q->
¥öt_x°©s
) {

222 
q
->
	`¥öt_x°©s
(q, 
Â
, 
x°©s
 ? : 
tb
[
TCA_XSTATS
]);

223 
	`Ârötf
(
Â
, "\n");

226 
	`fÊush
(
Â
);

228 
	}
}

231 
	$tc_˛ass_li°
(
¨gc
, **
¨gv
)

233 
tcmsg
 
t
;

234 
d
[16];

236 
	`mem£t
(&
t
, 0, (t));

237 
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

238 
	`mem£t
(
d
, 0, (d));

240 
¨gc
 > 0) {

241 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

242 
	`NEXT_ARG
();

243 i‡(
d
[0])

244 
	`du∑rg
("dev", *
¨gv
);

245 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

246 } i‡(
	`°rcmp
(*
¨gv
, "qdisc") == 0) {

247 
	`NEXT_ARG
();

248 i‡(
fûãr_qdisc
)

249 
	`du∑rg
("qdisc", *
¨gv
);

250 i‡(
	`gë_qdisc_h™dÀ
(&
fûãr_qdisc
, *
¨gv
))

251 
	`öv¨g
(*
¨gv
, "invalid qdisc ID");

252 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

253 i‡(
t
.
tcm_∑ª¡
) {

254 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

257 
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

258 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

259 
__u32
 
h™dÀ
;

260 i‡(
t
.
tcm_∑ª¡
)

261 
	`du∑rg
("∑ª¡", *
¨gv
);

262 
	`NEXT_ARG
();

263 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

264 
	`öv¨g
(*
¨gv
, "invalidÖarent ID");

265 
t
.
tcm_∑ª¡
 = 
h™dÀ
;

266 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

267 
	`ußge
();

269 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"? Try \"t¯˛as†hñp\".\n", *
¨gv
);

273 
¨gc
--; 
¨gv
++;

276 
	`Œ_öô_m≠
(&
πh
);

278 i‡(
d
[0]) {

279 i‡((
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

280 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

283 
fûãr_ifödex
 = 
t
.
tcm_ifödex
;

286 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETTCLASS
, &
t
, (t)) < 0) {

287 
	`≥º‹
("Cannot send dumpÑequest");

291 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_˛ass
, 
°dout
, 
NULL
, NULL) < 0) {

292 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

297 
	}
}

299 
	$do_˛ass
(
¨gc
, **
¨gv
)

301 i‡(
¨gc
 < 1)

302  
	`tc_˛ass_li°
(0, 
NULL
);

303 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

304  
	`tc_˛ass_modify
(
RTM_NEWTCLASS
, 
NLM_F_EXCL
|
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

305 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

306  
	`tc_˛ass_modify
(
RTM_NEWTCLASS
, 0, 
¨gc
-1, 
¨gv
+1);

307 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

308  
	`tc_˛ass_modify
(
RTM_NEWTCLASS
, 
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

309 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

310  
	`tc_˛ass_modify
(
RTM_DELTCLASS
, 0, 
¨gc
-1, 
¨gv
+1);

312 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

313  
	`tc_˛ass_gë
(
RTM_GETTCLASS
, 0, 
¨gc
-1, 
¨gv
+1);

315 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

316 || 
	`m©ches
(*
¨gv
, "lst") == 0)

317  
	`tc_˛ass_li°
(
¨gc
-1, 
¨gv
+1);

318 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

319 
	`ußge
();

322 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯˛as†hñp\".\n", *
¨gv
);

324 
	}
}

	@tc_common.h

2 
	#TCA_BUF_MAX
 (64*1024)

	)

4 
π∆_h™dÀ
 
πh
;

5 
do_qdisc
(
¨gc
, **
¨gv
);

6 
do_˛ass
(
¨gc
, **
¨gv
);

7 
do_fûãr
(
¨gc
, **
¨gv
);

8 
do_a˘i⁄
(
¨gc
, **
¨gv
);

9 
do_tcm⁄ô‹
(
¨gc
, **
¨gv
);

10 
¥öt_a˘i⁄
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

11 
¥öt_fûãr
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

12 
¥öt_qdisc
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

13 
¥öt_˛ass
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
);

15 
	gtc_e°im©‹
;

16 
∑r£_e°im©‹
(*
p_¨gc
, ***
p_¨gv
, 
tc_e°im©‹
 *
e°
);

	@tc_core.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

26 
	gtick_ö_u£c
 = 1;

27 
	g˛ock_Á˘‹
 = 1;

29 
	$tc_c‹e_time2big
(
time
)

31 
__u64
 
t
 = 
time
;

33 
t
 *
tick_ö_u£c
;

34  (
t
 >> 32) != 0;

35 
	}
}

38 
	$tc_c‹e_time2tick
(
time
)

40  
time
*
tick_ö_u£c
;

41 
	}
}

43 
	$tc_c‹e_tick2time
(
tick
)

45  
tick
/
tick_ö_u£c
;

46 
	}
}

48 
	$tc_c‹e_time2ktime
(
time
)

50  
time
 * 
˛ock_Á˘‹
;

51 
	}
}

53 
	$tc_c‹e_ktime2time
(
ktime
)

55  
ktime
 / 
˛ock_Á˘‹
;

56 
	}
}

58 
	$tc_ˇlc_xmôtime
(
øã
, 
size
)

60  
	`tc_c‹e_time2tick
(
TIME_UNITS_PER_SEC
*(()
size
/
øã
));

61 
	}
}

63 
	$tc_ˇlc_xmôsize
(
øã
, 
ticks
)

65  (()
øã
*
	`tc_c‹e_tick2time
(
ticks
))/
TIME_UNITS_PER_SEC
;

66 
	}
}

72 
	$tc_ˇlc_πabÀ
(
bps
, 
__u32
 *
πab
, 
˚Œ_log
, 
mtu
,

73 
mpu
)

75 
i
;

76 
ovîhód
 = (
mpu
 >> 8) & 0xFF;

77 
mpu
 = mpu & 0xFF;

79 i‡(
mtu
 == 0)

80 
mtu
 = 2047;

82 i‡(
˚Œ_log
 < 0) {

83 
˚Œ_log
 = 0;

84 (
mtu
>>
˚Œ_log
) > 255)

85 
˚Œ_log
++;

87 
i
=0; i<256; i++) {

88 
sz
 = (
i
<<
˚Œ_log
);

89 i‡(
ovîhód
)

90 
sz
 +
ovîhód
;

91 i‡(
sz
 < 
mpu
)

92 
sz
 = 
mpu
;

93 
πab
[
i
] = 
	`tc_ˇlc_xmôtime
(
bps
, 
sz
);

95  
˚Œ_log
;

96 
	}
}

98 
	$tc_c‹e_öô
()

100 
FILE
 *
Â
;

101 
__u32
 
˛ock_ªs
;

102 
__u32
 
t2us
;

103 
__u32
 
us2t
;

105 
Â
 = 
	`f›í
("/proc/net/psched", "r");

106 i‡(
Â
 =
NULL
)

109 i‡(
	`fsˇnf
(
Â
, "%08x%08x%08x", &
t2us
, &
us2t
, &
˛ock_ªs
) != 3) {

110 
	`f˛o£
(
Â
);

113 
	`f˛o£
(
Â
);

119 i‡(
˛ock_ªs
 == 1000000000)

120 
t2us
 = 
us2t
;

122 
˛ock_Á˘‹
 = ()
˛ock_ªs
 / 
TIME_UNITS_PER_SEC
;

123 
tick_ö_u£c
 = ()
t2us
 / 
us2t
 * 
˛ock_Á˘‹
;

125 
	}
}

	@tc_core.h

1 #i‚de‡
_TC_CORE_H_


2 
	#_TC_CORE_H_
 1

	)

4 
	~<asm/ty≥s.h
>

5 
	~<löux/pkt_sched.h
>

7 
	#TIME_UNITS_PER_SEC
 1000000

	)

9 
tc_c‹e_time2big
(
time
);

10 
tc_c‹e_time2tick
(
time
);

11 
tc_c‹e_tick2time
(
tick
);

12 
tc_c‹e_time2ktime
(
time
);

13 
tc_c‹e_ktime2time
(
ktime
);

14 
tc_ˇlc_xmôtime
(
øã
, 
size
);

15 
tc_ˇlc_xmôsize
(
øã
, 
ticks
);

16 
tc_ˇlc_πabÀ
(
bps
, 
__u32
 *
πab
, 
˚Œ_log
, 
mtu
, 
mpu
);

18 
tc_£tup_e°im©‹
(
A
, 
time_c⁄°
, 
tc_e°im©‹
 *
e°
);

20 
tc_c‹e_öô
();

22 
π∆_h™dÀ
 
g_πh
;

23 
is_b©ch_mode
;

	@tc_estimator.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

26 
	$tc_£tup_e°im©‹
(
A
, 
time_c⁄°
, 
tc_e°im©‹
 *
e°
)

28 
e°
->
öãrvÆ
=0;Ést->interval<=5;Ést->interval++) {

29 i‡(
A
 <(1<<
e°
->
öãrvÆ
)*(
TIME_UNITS_PER_SEC
/4))

32 i‡(
e°
->
öãrvÆ
 > 5)

34 
e°
->
öãrvÆ
 -= 2;

35 
e°
->
ewma_log
=1;Ést->ewma_log<32;Ést->ewma_log++) {

36 
w
 = 1.0 - 1.0/(1<<
e°
->
ewma_log
);

37 i‡(
A
/(-
	`log
(
w
)Ë> 
time_c⁄°
)

40 
e°
->
ewma_log
--;

41 i‡(
e°
->
ewma_log
==0 ||Ést->ewma_log >= 31)

44 
	}
}

	@tc_filter.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<löux/if_ëhî.h
>

24 
	~"π_«mes.h
"

25 
	~"utûs.h
"

26 
	~"tc_utû.h
"

27 
	~"tc_comm⁄.h
"

29 
ußge
();

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
, "Usage:Åc filter [ádd | del | change |Ñeplace | show ] dev STRING\n");

34 
	`Ârötf
(
°dîr
, " [Öref PRIO ] [Örotocol PROTO ]\n");

35 
	`Ârötf
(
°dîr
, " [Éstimator INTERVAL TIME_CONSTANT ]\n");

36 
	`Ârötf
(
°dîr
, " [Ñoot | classid CLASSID ] [ handle FILTERID ]\n");

37 
	`Ârötf
(
°dîr
, " [ [ FILTER_TYPE ] [ help | OPTIONS ] ]\n");

38 
	`Ârötf
(
°dîr
, "\n");

39 
	`Ârötf
(
°dîr
, "Åc filter show [ dev STRING ] [Ñoot |Öarent CLASSID ]\n");

40 
	`Ârötf
(
°dîr
, "Where:\n");

41 
	`Ârötf
(
°dîr
, "FILTER_TYPE := {Ñsvp | u32 | fw |Ñoute |Étc. }\n");

42 
	`Ârötf
(
°dîr
, "FILTERID := ... format depends on classifier, seeÅhere\n");

43 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅc filterádd <desired FILTER_KIND> help\n");

45 
	}
}

48 
	$tc_fûãr_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

51 
∆msghdr
 
n
;

52 
tcmsg
 
t
;

53 
buf
[
MAX_MSG
];

54 } 
ªq
;

55 
fûãr_utû
 *
q
 = 
NULL
;

56 
__u32
 
¥io
 = 0;

57 
__u32
 
¥Ÿocﬁ
 = 0;

58 *
fh™dÀ
 = 
NULL
;

59 
d
[16];

60 
k
[16];

61 
tc_e°im©‹
 
e°
;

63 
	`mem£t
(&
ªq
, 0, (req));

64 
	`mem£t
(&
e°
, 0, (est));

65 
	`mem£t
(
d
, 0, (d));

66 
	`mem£t
(
k
, 0, (k));

67 
	`mem£t
(&
ªq
, 0, (req));

69 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

70 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

71 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

72 
ªq
.
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

74 
¨gc
 > 0) {

75 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

76 
	`NEXT_ARG
();

77 i‡(
d
[0])

78 
	`du∑rg
("dev", *
¨gv
);

79 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

80 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

81 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

82 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

85 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

86 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

87 
__u32
 
h™dÀ
;

88 
	`NEXT_ARG
();

89 i‡(
ªq
.
t
.
tcm_∑ª¡
)

90 
	`du∑rg
("∑ª¡", *
¨gv
);

91 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

92 
	`öv¨g
(*
¨gv
, "InvalidÖarent ID");

93 
ªq
.
t
.
tcm_∑ª¡
 = 
h™dÀ
;

94 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

95 
	`NEXT_ARG
();

96 i‡(
fh™dÀ
)

97 
	`du∑rg
("h™dÀ", *
¨gv
);

98 
fh™dÀ
 = *
¨gv
;

99 } i‡(
	`m©ches
(*
¨gv
, "preference") == 0 ||

100 
	`m©ches
(*
¨gv
, "priority") == 0) {

101 
	`NEXT_ARG
();

102 i‡(
¥io
)

103 
	`du∑rg
("¥i‹ôy", *
¨gv
);

104 i‡(
	`gë_u32
(&
¥io
, *
¨gv
, 0))

105 
	`öv¨g
(*
¨gv
, "invalidÖrpriority value");

106 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

107 
__u16
 
id
;

108 
	`NEXT_ARG
();

109 i‡(
¥Ÿocﬁ
)

110 
	`du∑rg
("¥Ÿocﬁ", *
¨gv
);

111 i‡(
	`Œ_¥Ÿo_a2n
(&
id
, *
¨gv
))

112 
	`öv¨g
(*
¨gv
, "invalidÖrotocol");

113 
¥Ÿocﬁ
 = 
id
;

114 } i‡(
	`m©ches
(*
¨gv
, "estimator") == 0) {

115 i‡(
	`∑r£_e°im©‹
(&
¨gc
, &
¨gv
, &
e°
) < 0)

117 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

118 
	`ußge
();

120 
	`°∫˝y
(
k
, *
¨gv
, (k)-1);

122 
q
 = 
	`gë_fûãr_köd
(
k
);

123 
¨gc
--; 
¨gv
++;

127 
¨gc
--; 
¨gv
++;

130 
ªq
.
t
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥io
<<16, 
¥Ÿocﬁ
);

132 i‡(
k
[0])

133 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_KIND
, 
k
, 
	`°æí
(k)+1);

135 i‡(
q
) {

136 i‡(
q
->
	`∑r£_f›t
(q, 
fh™dÀ
, 
¨gc
, 
¨gv
, &
ªq
.
n
))

139 i‡(
fh™dÀ
) {

140 
	`Ârötf
(
°dîr
, "Must specify filterÅype when using "

144 i‡(
¨gc
) {

145 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

146 
	`ußge
();

147 
	`Ârötf
(
°dîr
, "G¨bagêö°ód o‡¨gumít†\"%†...\". Try \"t¯fûã∏hñp\".\n", *
¨gv
);

151 i‡(
e°
.
ewma_log
)

152 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_RATE
, &
e°
, (est));

155 i‡(
d
[0]) {

156 
	`Œ_öô_m≠
(&
πh
);

158 i‡((
ªq
.
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

159 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

164 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 0, 0, 
NULL
, NULL, NULL) < 0) {

165 
	`Ârötf
(
°dîr
, "We haveánÉrrorÅalkingÅoÅhe kernel\n");

170 
	}
}

172 
__u32
 
	gfûãr_∑ª¡
;

173 
	gfûãr_ifödex
;

174 
__u32
 
	gfûãr_¥io
;

175 
__u32
 
	gfûãr_¥Ÿocﬁ
;

177 
	$¥öt_fûãr
(c⁄° 
sockaddr_∆
 *
who
,

178 
∆msghdr
 *
n
,

179 *
¨g
)

181 
FILE
 *
Â
 = (FILE*)
¨g
;

182 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

183 
Àn
 = 
n
->
∆msg_Àn
;

184 
π©å
 * 
tb
[
TCA_MAX
+1];

185 
fûãr_utû
 *
q
;

186 
abuf
[256];

188 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWTFILTER
 &&Ç->∆msg_ty≥ !
RTM_DELTFILTER
) {

189 
	`Ârötf
(
°dîr
, "Notá filter\n");

192 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

193 i‡(
Àn
 < 0) {

194 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

198 
	`mem£t
(
tb
, 0, (tb));

199 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, 
	`TCA_RTA
(
t
), 
Àn
);

201 i‡(
tb
[
TCA_KIND
] =
NULL
) {

202 
	`Ârötf
(
°dîr
, "print_filter: NULL kind\n");

206 i‡(
n
->
∆msg_ty≥
 =
RTM_DELTFILTER
)

207 
	`Ârötf
(
Â
, "deleted ");

209 
	`Ârötf
(
Â
, "filter ");

210 i‡(!
fûãr_ifödex
 || fûãr_ifödex !
t
->
tcm_ifödex
)

211 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
t
->
tcm_ifödex
));

213 i‡(!
fûãr_∑ª¡
 || fûãr_∑ª¡ !
t
->
tcm_∑ª¡
) {

214 i‡(
t
->
tcm_∑ª¡
 =
TC_H_ROOT
)

215 
	`Ârötf
(
Â
, "root ");

217 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_∑ª¡
);

218 
	`Ârötf
(
Â
, "∑ª¡ %†", 
abuf
);

221 i‡(
t
->
tcm_öfo
) {

222 
__u32
 
¥Ÿocﬁ
 = 
	`TC_H_MIN
(
t
->
tcm_öfo
);

223 
__u32
 
¥io
 = 
	`TC_H_MAJ
(
t
->
tcm_öfo
)>>16;

224 i‡(!
fûãr_¥Ÿocﬁ
 || fûãr_¥Ÿocﬁ !
¥Ÿocﬁ
) {

225 i‡(
¥Ÿocﬁ
) {

226 
	`SPRINT_BUF
(
b1
);

227 
	`Ârötf
(
Â
, "protocol %s ",

228 
	`Œ_¥Ÿo_n2a
(
¥Ÿocﬁ
, 
b1
, (b1)));

231 i‡(!
fûãr_¥io
 || fûãr_¥iÿ!
¥io
) {

232 i‡(
¥io
)

233 
	`Ârötf
(
Â
, "¥e‡%u ", 
¥io
);

236 
	`Ârötf
(
Â
, "%†", (*)
	`RTA_DATA
(
tb
[
TCA_KIND
]));

237 
q
 = 
	`gë_fûãr_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

238 i‡(
tb
[
TCA_OPTIONS
]) {

239 i‡(
q
)

240 
q
->
	`¥öt_f›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
], 
t
->
tcm_h™dÀ
);

242 
	`Ârötf
(
Â
, "[cannotÖarseÖarameters]");

244 
	`Ârötf
(
Â
, "\n");

246 i‡(
show_°©s
 && (
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
])) {

247 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, " ", 
NULL
);

248 
	`Ârötf
(
Â
, "\n");

251 
	`fÊush
(
Â
);

253 
	}
}

256 
	$tc_fûãr_li°
(
¨gc
, **
¨gv
)

258 
tcmsg
 
t
;

259 
d
[16];

260 
__u32
 
¥io
 = 0;

261 
__u32
 
¥Ÿocﬁ
 = 0;

262 *
fh™dÀ
 = 
NULL
;

264 
	`mem£t
(&
t
, 0, (t));

265 
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

266 
	`mem£t
(
d
, 0, (d));

268 
¨gc
 > 0) {

269 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

270 
	`NEXT_ARG
();

271 i‡(
d
[0])

272 
	`du∑rg
("dev", *
¨gv
);

273 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

274 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

275 i‡(
t
.
tcm_∑ª¡
) {

276 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

279 
fûãr_∑ª¡
 = 
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

280 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

281 
__u32
 
h™dÀ
;

282 
	`NEXT_ARG
();

283 i‡(
t
.
tcm_∑ª¡
)

284 
	`du∑rg
("∑ª¡", *
¨gv
);

285 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

286 
	`öv¨g
(*
¨gv
, "invalidÖarent ID");

287 
fûãr_∑ª¡
 = 
t
.
tcm_∑ª¡
 = 
h™dÀ
;

288 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

289 
	`NEXT_ARG
();

290 i‡(
fh™dÀ
)

291 
	`du∑rg
("h™dÀ", *
¨gv
);

292 
fh™dÀ
 = *
¨gv
;

293 } i‡(
	`m©ches
(*
¨gv
, "preference") == 0 ||

294 
	`m©ches
(*
¨gv
, "priority") == 0) {

295 
	`NEXT_ARG
();

296 i‡(
¥io
)

297 
	`du∑rg
("¥i‹ôy", *
¨gv
);

298 i‡(
	`gë_u32
(&
¥io
, *
¨gv
, 0))

299 
	`öv¨g
(*
¨gv
, "invalidÖreference");

300 
fûãr_¥io
 = 
¥io
;

301 } i‡(
	`m©ches
(*
¨gv
, "protocol") == 0) {

302 
__u16
 
ªs
;

303 
	`NEXT_ARG
();

304 i‡(
¥Ÿocﬁ
)

305 
	`du∑rg
("¥Ÿocﬁ", *
¨gv
);

306 i‡(
	`Œ_¥Ÿo_a2n
(&
ªs
, *
¨gv
))

307 
	`öv¨g
(*
¨gv
, "invalidÖrotocol");

308 
¥Ÿocﬁ
 = 
ªs
;

309 
fûãr_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

310 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

311 
	`ußge
();

313 
	`Ârötf
(
°dîr
, " Wh© i†\"%s\"? Try \"t¯fûã∏hñp\"\n", *
¨gv
);

317 
¨gc
--; 
¨gv
++;

320 
t
.
tcm_öfo
 = 
	`TC_H_MAKE
(
¥io
<<16, 
¥Ÿocﬁ
);

322 
	`Œ_öô_m≠
(&
πh
);

324 i‡(
d
[0]) {

325 i‡((
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

326 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

329 
fûãr_ifödex
 = 
t
.
tcm_ifödex
;

332 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETTFILTER
, &
t
, (t)) < 0) {

333 
	`≥º‹
("Cannot send dumpÑequest");

337 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_fûãr
, 
°dout
, 
NULL
, NULL) < 0) {

338 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

343 
	}
}

345 
	$do_fûãr
(
¨gc
, **
¨gv
)

347 i‡(
¨gc
 < 1)

348  
	`tc_fûãr_li°
(0, 
NULL
);

349 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

350  
	`tc_fûãr_modify
(
RTM_NEWTFILTER
, 
NLM_F_EXCL
|
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

351 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

352  
	`tc_fûãr_modify
(
RTM_NEWTFILTER
, 0, 
¨gc
-1, 
¨gv
+1);

353 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

354  
	`tc_fûãr_modify
(
RTM_NEWTFILTER
, 
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

355 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

356  
	`tc_fûãr_modify
(
RTM_DELTFILTER
, 0, 
¨gc
-1, 
¨gv
+1);

358 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

359  
	`tc_fûãr_gë
(
RTM_GETTFILTER
, 0, 
¨gc
-1, 
¨gv
+1);

361 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

362 || 
	`m©ches
(*
¨gv
, "lst") == 0)

363  
	`tc_fûãr_li°
(
¨gc
-1, 
¨gv
+1);

364 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

365 
	`ußge
();

368 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯fûã∏hñp\".\n", *
¨gv
);

370 
	}
}

	@tc_monitor.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<time.h
>

23 
	~"π_«mes.h
"

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

29 
	$ußge
(Ë
	`__©åibuã__
((
n‹ëu∫
));

31 
	$ußge
()

33 
	`Ârötf
(
°dîr
, "Usage:Åc monitor\n");

34 
	`exô
(-1);

35 
	}
}

38 
	$ac˚±_tcmsg
(c⁄° 
sockaddr_∆
 *
who
, 
∆msghdr
 *
n
, *
¨g
)

40 
FILE
 *
Â
 = (FILE*)
¨g
;

42 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWTFILTER
 ||Ç->∆msg_ty≥ =
RTM_DELTFILTER
) {

43 
	`¥öt_fûãr
(
who
, 
n
, 
¨g
);

46 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWTCLASS
 ||Ç->∆msg_ty≥ =
RTM_DELTCLASS
) {

47 
	`¥öt_˛ass
(
who
, 
n
, 
¨g
);

50 i‡(
n
->
∆msg_ty≥
 =
RTM_NEWQDISC
 ||Ç->∆msg_ty≥ =
RTM_DELQDISC
) {

51 
	`¥öt_qdisc
(
who
, 
n
, 
¨g
);

54 i‡(
n
->
∆msg_ty≥
 =
RTM_GETACTION
 ||Ç->∆msg_ty≥ =
RTM_NEWACTION
 ||

55 
n
->
∆msg_ty≥
 =
RTM_DELACTION
) {

56 
	`¥öt_a˘i⁄
(
who
, 
n
, 
¨g
);

59 i‡(
n
->
∆msg_ty≥
 !
NLMSG_ERROR
 &&Ç->∆msg_ty≥ !
NLMSG_NOOP
 &&

60 
n
->
∆msg_ty≥
 !
NLMSG_DONE
) {

61 
	`Ârötf
(
Â
, "Unknown message:Üength %08dÅype %08x flags %08x\n",

62 
n
->
∆msg_Àn
,Ç->
∆msg_ty≥
,Ç->
∆msg_Êags
);

65 
	}
}

67 
	$do_tcm⁄ô‹
(
¨gc
, **
¨gv
)

69 
π∆_h™dÀ
 
πh
;

70 *
fûe
 = 
NULL
;

71 
groups
 = 
	`∆_mgΩ
(
RTNLGRP_TC
);

73 
¨gc
 > 0) {

74 i‡(
	`m©ches
(*
¨gv
, "file") == 0) {

75 
	`NEXT_ARG
();

76 
fûe
 = *
¨gv
;

78 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

79 
	`ußge
();

81 
	`Ârötf
(
°dîr
, "Argumíà\"%s\" i†unknown,Åry \"t¯m⁄ô‹ hñp\".\n", *
¨gv
);

82 
	`exô
(-1);

85 
¨gc
--; 
¨gv
++;

88 i‡(
fûe
) {

89 
FILE
 *
Â
;

90 
Â
 = 
	`f›í
(
fûe
, "r");

91 i‡(
Â
 =
NULL
) {

92 
	`≥º‹
("Cannot fopen");

93 
	`exô
(-1);

95  
	`π∆_‰om_fûe
(
Â
, 
ac˚±_tcmsg
, (*)
°dout
);

98 i‡(
	`π∆_›í
(&
πh
, 
groups
) < 0)

99 
	`exô
(1);

101 
	`Œ_öô_m≠
(&
πh
);

103 i‡(
	`π∆_li°í
(&
πh
, 
ac˚±_tcmsg
, (*)
°dout
) < 0) {

104 
	`π∆_˛o£
(&
πh
);

105 
	`exô
(2);

108 
	`π∆_˛o£
(&
πh
);

109 
	`exô
(0);

110 
	}
}

	@tc_qdisc.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

26 
	~"tc_comm⁄.h
"

28 
ußge
();

30 
	$ußge
()

32 
	`Ârötf
(
°dîr
, "Usage:Åc qdisc [ádd | del |Ñeplace | change | show ] dev STRING\n");

33 
	`Ârötf
(
°dîr
, " [ handle QHANDLE ] [Ñoot | ingress |Öarent CLASSID ]\n");

34 
	`Ârötf
(
°dîr
, " [Éstimator INTERVAL TIME_CONSTANT ]\n");

35 
	`Ârötf
(
°dîr
, " [ [ QDISC_KIND ] [ help | OPTIONS ] ]\n");

36 
	`Ârötf
(
°dîr
, "\n");

37 
	`Ârötf
(
°dîr
, "Åc qdisc show [ dev STRING ] [ingress]\n");

38 
	`Ârötf
(
°dîr
, "Where:\n");

39 
	`Ârötf
(
°dîr
, "QDISC_KIND := { [p|b]fifo |Åbf |Örio | cbq |Ñed |Étc. }\n");

40 
	`Ârötf
(
°dîr
, "OPTIONS := ...ÅryÅc qdiscádd <desired QDISC_KIND> help\n");

42 
	}
}

44 
	$tc_qdisc_modify
(
cmd
, 
Êags
, 
¨gc
, **
¨gv
)

46 
qdisc_utû
 *
q
 = 
NULL
;

47 
tc_e°im©‹
 
e°
;

48 
d
[16];

49 
k
[16];

51 
∆msghdr
 
n
;

52 
tcmsg
 
t
;

53 
buf
[
TCA_BUF_MAX
];

54 } 
ªq
;

56 
	`mem£t
(&
ªq
, 0, (req));

57 
	`mem£t
(&
e°
, 0, (est));

58 
	`mem£t
(&
d
, 0, (d));

59 
	`mem£t
(&
k
, 0, (k));

61 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
tcmsg
));

62 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
|
Êags
;

63 
ªq
.
n
.
∆msg_ty≥
 = 
cmd
;

64 
ªq
.
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

66 
¨gc
 > 0) {

67 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

68 
	`NEXT_ARG
();

69 i‡(
d
[0])

70 
	`du∑rg
("dev", *
¨gv
);

71 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

72 } i‡(
	`°rcmp
(*
¨gv
, "handle") == 0) {

73 
__u32
 
h™dÀ
;

74 i‡(
ªq
.
t
.
tcm_h™dÀ
)

75 
	`du∑rg
("h™dÀ", *
¨gv
);

76 
	`NEXT_ARG
();

77 i‡(
	`gë_qdisc_h™dÀ
(&
h™dÀ
, *
¨gv
))

78 
	`öv¨g
(*
¨gv
, "invalid qdisc ID");

79 
ªq
.
t
.
tcm_h™dÀ
 = 
h™dÀ
;

80 } i‡(
	`°rcmp
(*
¨gv
, "root") == 0) {

81 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

82 
	`Ârötf
(
°dîr
, "Error: \"root\" is duplicateÖarent ID\n");

85 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_ROOT
;

86 #ifde‡
TC_H_INGRESS


87 } i‡(
	`°rcmp
(*
¨gv
, "ingress") == 0) {

88 i‡(
ªq
.
t
.
tcm_∑ª¡
) {

89 
	`Ârötf
(
°dîr
, "Error: \"ingress\" isá duplicateÖarent ID\n");

92 
ªq
.
t
.
tcm_∑ª¡
 = 
TC_H_INGRESS
;

93 
	`°∫˝y
(
k
, "ingress", (k)-1);

94 
q
 = 
	`gë_qdisc_köd
(
k
);

95 
ªq
.
t
.
tcm_h™dÀ
 = 0xffff0000;

97 
¨gc
--; 
¨gv
++;

100 } i‡(
	`°rcmp
(*
¨gv
, "parent") == 0) {

101 
__u32
 
h™dÀ
;

102 
	`NEXT_ARG
();

103 i‡(
ªq
.
t
.
tcm_∑ª¡
)

104 
	`du∑rg
("∑ª¡", *
¨gv
);

105 i‡(
	`gë_tc_˛assid
(&
h™dÀ
, *
¨gv
))

106 
	`öv¨g
(*
¨gv
, "invalidÖarent ID");

107 
ªq
.
t
.
tcm_∑ª¡
 = 
h™dÀ
;

108 } i‡(
	`m©ches
(*
¨gv
, "estimator") == 0) {

109 i‡(
	`∑r£_e°im©‹
(&
¨gc
, &
¨gv
, &
e°
))

111 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

112 
	`ußge
();

114 
	`°∫˝y
(
k
, *
¨gv
, (k)-1);

116 
q
 = 
	`gë_qdisc_köd
(
k
);

117 
¨gc
--; 
¨gv
++;

120 
¨gc
--; 
¨gv
++;

123 i‡(
k
[0])

124 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_KIND
, 
k
, 
	`°æí
(k)+1);

125 i‡(
e°
.
ewma_log
)

126 
	`add©å_l
(&
ªq
.
n
, ‘eq), 
TCA_RATE
, &
e°
, (est));

128 i‡(
q
) {

129 i‡(!
q
->
∑r£_q›t
) {

130 
	`Ârötf
(
°dîr
, "qdis¯'%s' d€†nŸ suµ‹à›ti⁄Ö¨sög\n", 
k
);

133 i‡(
q
->
	`∑r£_q›t
(q, 
¨gc
, 
¨gv
, &
ªq
.
n
))

136 i‡(
¨gc
) {

137 i‡(
	`m©ches
(*
¨gv
, "help") == 0)

138 
	`ußge
();

140 
	`Ârötf
(
°dîr
, "G¨bagêö°ód o‡¨gumít†\"%†...\". Try \"t¯qdis¯hñp\".\n", *
¨gv
);

145 i‡(
d
[0]) {

146 
idx
;

148 
	`Œ_öô_m≠
(&
πh
);

150 i‡((
idx
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

151 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

154 
ªq
.
t
.
tcm_ifödex
 = 
idx
;

157 i‡(
	`π∆_èlk
(&
πh
, &
ªq
.
n
, 0, 0, 
NULL
, NULL, NULL) < 0)

161 
	}
}

163 
	gfûãr_ifödex
;

165 
	$¥öt_qdisc
(c⁄° 
sockaddr_∆
 *
who
,

166 
∆msghdr
 *
n
,

167 *
¨g
)

169 
FILE
 *
Â
 = (FILE*)
¨g
;

170 
tcmsg
 *
t
 = 
	`NLMSG_DATA
(
n
);

171 
Àn
 = 
n
->
∆msg_Àn
;

172 
π©å
 * 
tb
[
TCA_MAX
+1];

173 
qdisc_utû
 *
q
;

174 
abuf
[256];

176 i‡(
n
->
∆msg_ty≥
 !
RTM_NEWQDISC
 &&Ç->∆msg_ty≥ !
RTM_DELQDISC
) {

177 
	`Ârötf
(
°dîr
, "Notá qdisc\n");

180 
Àn
 -
	`NLMSG_LENGTH
((*
t
));

181 i‡(
Àn
 < 0) {

182 
	`Ârötf
(
°dîr
, "Wr⁄gÜí %d\n", 
Àn
);

186 i‡(
fûãr_ifödex
 && fûãr_ifödex !
t
->
tcm_ifödex
)

189 
	`mem£t
(
tb
, 0, (tb));

190 
	`∑r£_π©å
(
tb
, 
TCA_MAX
, 
	`TCA_RTA
(
t
), 
Àn
);

192 i‡(
tb
[
TCA_KIND
] =
NULL
) {

193 
	`Ârötf
(
°dîr
, "print_qdisc: NULL kind\n");

197 i‡(
n
->
∆msg_ty≥
 =
RTM_DELQDISC
)

198 
	`Ârötf
(
Â
, "deleted ");

200 
	`Ârötf
(
Â
, "qdis¯%†%x: ", (*)
	`RTA_DATA
(
tb
[
TCA_KIND
]), 
t
->
tcm_h™dÀ
>>16);

201 i‡(
fûãr_ifödex
 == 0)

202 
	`Ârötf
(
Â
, "dev %†", 
	`Œ_ödex_to_«me
(
t
->
tcm_ifödex
));

203 i‡(
t
->
tcm_∑ª¡
 =
TC_H_ROOT
)

204 
	`Ârötf
(
Â
, "root ");

205 i‡(
t
->
tcm_∑ª¡
) {

206 
	`¥öt_tc_˛assid
(
abuf
, ◊buf), 
t
->
tcm_∑ª¡
);

207 
	`Ârötf
(
Â
, "∑ª¡ %†", 
abuf
);

209 i‡(
t
->
tcm_öfo
 != 1) {

210 
	`Ârötf
(
Â
, "ªf˙à%d ", 
t
->
tcm_öfo
);

214 i‡(0 =
	`°rcmp
("pfifo_Á°", 
	`RTA_DATA
(
tb
[
TCA_KIND
])))

215 
q
 = 
	`gë_qdisc_köd
("prio");

217 
q
 = 
	`gë_qdisc_köd
(
	`RTA_DATA
(
tb
[
TCA_KIND
]));

219 i‡(
tb
[
TCA_OPTIONS
]) {

220 i‡(
q
)

221 
q
->
	`¥öt_q›t
(q, 
Â
, 
tb
[
TCA_OPTIONS
]);

223 
	`Ârötf
(
Â
, "[cannotÖarse qdiscÖarameters]");

225 
	`Ârötf
(
Â
, "\n");

226 i‡(
show_°©s
) {

227 
π©å
 *
x°©s
 = 
NULL
;

229 i‡(
tb
[
TCA_STATS
] ||Åb[
TCA_STATS2
] ||Åb[
TCA_XSTATS
]) {

230 
	`¥öt_tc°©s_©å
(
Â
, 
tb
, " ", &
x°©s
);

231 
	`Ârötf
(
Â
, "\n");

234 i‡(
q
 && 
x°©s
 && q->
¥öt_x°©s
) {

235 
q
->
	`¥öt_x°©s
(q, 
Â
, 
x°©s
);

236 
	`Ârötf
(
Â
, "\n");

239 
	`fÊush
(
Â
);

241 
	}
}

244 
	$tc_qdisc_li°
(
¨gc
, **
¨gv
)

246 
tcmsg
 
t
;

247 
d
[16];

249 
	`mem£t
(&
t
, 0, (t));

250 
t
.
tcm_Ámûy
 = 
AF_UNSPEC
;

251 
	`mem£t
(&
d
, 0, (d));

253 
¨gc
 > 0) {

254 i‡(
	`°rcmp
(*
¨gv
, "dev") == 0) {

255 
	`NEXT_ARG
();

256 
	`°∫˝y
(
d
, *
¨gv
, (d)-1);

257 #ifde‡
TC_H_INGRESS


258 } i‡(
	`°rcmp
(*
¨gv
, "ingress") == 0) {

259 i‡(
t
.
tcm_∑ª¡
) {

260 
	`Ârötf
(
°dîr
, "DuplicateÖarent ID\n");

261 
	`ußge
();

263 
t
.
tcm_∑ª¡
 = 
TC_H_INGRESS
;

265 } i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

266 
	`ußge
();

268 
	`Ârötf
(
°dîr
, "Wh© i†\"%s\"? Try \"t¯qdis¯hñp\".\n", *
¨gv
);

272 
¨gc
--; 
¨gv
++;

275 
	`Œ_öô_m≠
(&
πh
);

277 i‡(
d
[0]) {

278 i‡((
t
.
tcm_ifödex
 = 
	`Œ_«me_to_ödex
(
d
)) == 0) {

279 
	`Ârötf
(
°dîr
, "C™nŸ föd devi˚ \"%s\"\n", 
d
);

282 
fûãr_ifödex
 = 
t
.
tcm_ifödex
;

285 i‡(
	`π∆_dump_ªque°
(&
πh
, 
RTM_GETQDISC
, &
t
, (t)) < 0) {

286 
	`≥º‹
("Cannot send dumpÑequest");

290 i‡(
	`π∆_dump_fûãr
(&
πh
, 
¥öt_qdisc
, 
°dout
, 
NULL
, NULL) < 0) {

291 
	`Ârötf
(
°dîr
, "DumpÅerminated\n");

296 
	}
}

298 
	$do_qdisc
(
¨gc
, **
¨gv
)

300 i‡(
¨gc
 < 1)

301  
	`tc_qdisc_li°
(0, 
NULL
);

302 i‡(
	`m©ches
(*
¨gv
, "add") == 0)

303  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 
NLM_F_EXCL
|
NLM_F_CREATE
, 
¨gc
-1, 
¨gv
+1);

304 i‡(
	`m©ches
(*
¨gv
, "change") == 0)

305  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 0, 
¨gc
-1, 
¨gv
+1);

306 i‡(
	`m©ches
(*
¨gv
, "replace") == 0)

307  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 
NLM_F_CREATE
|
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

308 i‡(
	`m©ches
(*
¨gv
, "link") == 0)

309  
	`tc_qdisc_modify
(
RTM_NEWQDISC
, 
NLM_F_REPLACE
, 
¨gc
-1, 
¨gv
+1);

310 i‡(
	`m©ches
(*
¨gv
, "delete") == 0)

311  
	`tc_qdisc_modify
(
RTM_DELQDISC
, 0, 
¨gc
-1, 
¨gv
+1);

313 i‡(
	`m©ches
(*
¨gv
, "get") == 0)

314  
	`tc_qdisc_gë
(
RTM_GETQDISC
, 0, 
¨gc
-1, 
¨gv
+1);

316 i‡(
	`m©ches
(*
¨gv
, "list") == 0 || matches(*argv, "show") == 0

317 || 
	`m©ches
(*
¨gv
, "lst") == 0)

318  
	`tc_qdisc_li°
(
¨gc
-1, 
¨gv
+1);

319 i‡(
	`m©ches
(*
¨gv
, "help") == 0) {

320 
	`ußge
();

323 
	`Ârötf
(
°dîr
, "Comm™d \"%s\" i†unknown,Åry \"t¯qdis¯hñp\".\n", *
¨gv
);

325 
	}
}

	@tc_red.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<m©h.h
>

19 
	~<sys/sockë.h
>

20 
	~<√töë/ö.h
>

21 
	~<¨∑/öë.h
>

22 
	~<°rög.h
>

24 
	~"tc_c‹e.h
"

25 
	~"tc_ªd.h
"

30 
	$tc_ªd_evÆ_P
(
qmö
, 
qmax
, 
¥ob
)

32 
i
 = 
qmax
 - 
qmö
;

34 i‡(
i
 <= 0)

37 
¥ob
 /
i
;

39 
i
=0; i<32; i++) {

40 i‡(
¥ob
 > 1.0)

42 
¥ob
 *= 2;

44 i‡(
i
>=32)

46  
i
;

47 
	}
}

53 
	$tc_ªd_evÆ_ewma
(
qmö
, 
bur°
, 
avpkt
)

55 
wlog
 = 1;

56 
W
 = 0.5;

57 
a
 = ()
bur°
 + 1 - ()
qmö
/
avpkt
;

59 i‡(
a
 < 1.0)

61 
wlog
=1; wlog<32; wlog++, 
W
 /= 2) {

62 i‡(
a
 <(1 - 
	`pow
(1-
W
, 
bur°
))/W)

63  
wlog
;

66 
	}
}

72 
	$tc_ªd_evÆ_idÀ_dampög
(
Wlog
, 
avpkt
, 
bps
, 
__u8
 *
sbuf
)

74 
xmô_time
 = 
	`tc_ˇlc_xmôtime
(
bps
, 
avpkt
);

75 
lW
 = -
	`log
(1.0 - 1.0/(1<<
Wlog
))/
xmô_time
;

76 
maxtime
 = 31/
lW
;

77 
˛og
;

78 
i
;

79 
tmp
;

81 
tmp
 = 
maxtime
;

82 
˛og
=0; clog<32; clog++) {

83 i‡(
maxtime
/(1<<
˛og
) < 512)

86 i‡(
˛og
 >= 32)

89 
sbuf
[0] = 0;

90 
i
=1; i<255; i++) {

91 
sbuf
[
i
] = (i<<
˛og
)*
lW
;

92 i‡(
sbuf
[
i
] > 31)

93 
sbuf
[
i
] = 31;

95 
sbuf
[255] = 31;

96  
˛og
;

97 
	}
}

	@tc_red.h

1 #i‚de‡
_TC_RED_H_


2 
	#_TC_RED_H_
 1

	)

4 
tc_ªd_evÆ_P
(
qmö
, 
qmax
, 
¥ob
);

5 
tc_ªd_evÆ_ewma
(
qmö
, 
bur°
, 
avpkt
);

6 
tc_ªd_evÆ_idÀ_dampög
(
wlog
, 
avpkt
, 
b™dwidth
, 
__u8
 *
sbuf
);

	@tc_util.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

16 
	~<sy¶og.h
>

17 
	~<f˙é.h
>

18 
	~<sys/sockë.h
>

19 
	~<√töë/ö.h
>

20 
	~<¨∑/öë.h
>

21 
	~<°rög.h
>

22 
	~<m©h.h
>

24 
	~"utûs.h
"

25 
	~"tc_utû.h
"

27 c⁄° *
	$gë_tc_lib
()

29 c⁄° *
lib_dú
;

31 
lib_dú
 = 
	`gëív
("TC_LIB_DIR");

32 i‡(!
lib_dú
)

33 
lib_dú
 = "/usr/lib/tc";

35  
lib_dú
;

36 
	}
}

38 
	$gë_qdisc_h™dÀ
(
__u32
 *
h
, c⁄° *
°r
)

40 
__u32
 
maj
;

41 *
p
;

43 
maj
 = 
TC_H_UNSPEC
;

44 i‡(
	`°rcmp
(
°r
, "none") == 0)

45 
ok
;

46 
maj
 = 
	`°πoul
(
°r
, &
p
, 16);

47 i‡(
p
 =
°r
)

49 
maj
 <<= 16;

50 i‡(*
p
 != ':' && *p!=0)

52 
ok
:

53 *
h
 = 
maj
;

55 
	}
}

57 
	$gë_tc_˛assid
(
__u32
 *
h
, c⁄° *
°r
)

59 
__u32
 
maj
, 
mö
;

60 *
p
;

62 
maj
 = 
TC_H_ROOT
;

63 i‡(
	`°rcmp
(
°r
, "root") == 0)

64 
ok
;

65 
maj
 = 
TC_H_UNSPEC
;

66 i‡(
	`°rcmp
(
°r
, "none") == 0)

67 
ok
;

68 
maj
 = 
	`°πoul
(
°r
, &
p
, 16);

69 i‡(
p
 =
°r
) {

70 
maj
 = 0;

71 i‡(*
p
 != ':')

74 i‡(*
p
 == ':') {

75 i‡(
maj
 >= (1<<16))

77 
maj
 <<= 16;

78 
°r
 = 
p
+1;

79 
mö
 = 
	`°πoul
(
°r
, &
p
, 16);

80 i‡(*
p
 != 0)

82 i‡(
mö
 >= (1<<16))

84 
maj
 |
mö
;

85 } i‡(*
p
 != 0)

88 
ok
:

89 *
h
 = 
maj
;

91 
	}
}

93 
	$¥öt_tc_˛assid
(*
buf
, 
Àn
, 
__u32
 
h
)

95 i‡(
h
 =
TC_H_ROOT
)

96 
	`•rötf
(
buf
, "root");

97 i‡(
h
 =
TC_H_UNSPEC
)

98 
	`¢¥ötf
(
buf
, 
Àn
, "none");

99 i‡(
	`TC_H_MAJ
(
h
) == 0)

100 
	`¢¥ötf
(
buf
, 
Àn
, ":%x", 
	`TC_H_MIN
(
h
));

101 i‡(
	`TC_H_MIN
(
h
) == 0)

102 
	`¢¥ötf
(
buf
, 
Àn
, "%x:", 
	`TC_H_MAJ
(
h
)>>16);

104 
	`¢¥ötf
(
buf
, 
Àn
, "%x:%x", 
	`TC_H_MAJ
(
h
)>>16, 
	`TC_H_MIN
(h));

106 
	}
}

108 * 
	$•röt_tc_˛assid
(
__u32
 
h
, *
buf
)

110 i‡(
	`¥öt_tc_˛assid
(
buf
, 
SPRINT_BSIZE
-1, 
h
))

111 
	`°r˝y
(
buf
, "???");

112  
buf
;

113 
	}
}

116 c⁄° 
	søã_suffix
 {

117 c⁄° *
	m«me
;

118 
	msˇÀ
;

119 } 
	gsuffixes
[] = {

138 { 
NULL
 }

142 
	$gë_øã
(*
øã
, c⁄° *
°r
)

144 *
p
;

145 
bps
 = 
	`°πod
(
°r
, &
p
);

146 c⁄° 
øã_suffix
 *
s
;

148 i‡(
p
 =
°r
)

151 i‡(*
p
 == '\0') {

152 *
øã
 = 
bps
 / 8.;

156 
s
 = 
suffixes
; s->
«me
; ++s) {

157 i‡(
	`°rˇ£cmp
(
s
->
«me
, 
p
) == 0) {

158 *
øã
 = (
bps
 * 
s
->
sˇÀ
) / 8.;

164 
	}
}

166 
	$gë_øã_™d_˚Œ
(*
øã
, *
˚Œ_log
, *
°r
)

168 * 
¶ash
 = 
	`°rchr
(
°r
, '/');

170 i‡(
¶ash
)

171 *
¶ash
 = 0;

173 i‡(
	`gë_øã
(
øã
, 
°r
))

176 i‡(
¶ash
) {

177 
˚Œ
;

178 
i
;

180 i‡(
	`gë_öãgî
(&
˚Œ
, 
¶ash
+1, 0))

182 *
¶ash
 = '/';

184 
i
=0; i<32; i++) {

185 i‡((1<<
i
Ë=
˚Œ
) {

186 *
˚Œ_log
 = 
i
;

193 
	}
}

195 
	$¥öt_øã
(*
buf
, 
Àn
, 
__u32
 
øã
)

197 
tmp
 = ()
øã
*8;

198 
u£_õc
;

200 i‡(
u£_õc
) {

201 i‡(
tmp
 >= 1000.0*1024.0*1024.0)

202 
	`¢¥ötf
(
buf
, 
Àn
, "%.0fMibô", 
tmp
/1024.0*1024.0);

203 i‡(
tmp
 >= 1000.0*1024)

204 
	`¢¥ötf
(
buf
, 
Àn
, "%.0fKibô", 
tmp
/1024);

206 
	`¢¥ötf
(
buf
, 
Àn
, "%.0fbô", 
tmp
);

208 i‡(
tmp
 >= 1000.0*1000000.0)

209 
	`¢¥ötf
(
buf
, 
Àn
, "%.0fMbô", 
tmp
/1000000.0);

210 i‡(
tmp
 >= 1000.0 * 1000.0)

211 
	`¢¥ötf
(
buf
, 
Àn
, "%.0fKbô", 
tmp
/1000.0);

213 
	`¢¥ötf
(
buf
, 
Àn
, "%.0fbô", 
tmp
);

215 
	}
}

217 * 
	$•röt_øã
(
__u32
 
øã
, *
buf
)

219 
	`¥öt_øã
(
buf
, 
SPRINT_BSIZE
-1, 
øã
);

220  
buf
;

221 
	}
}

223 
	$gë_time
(*
time
, c⁄° *
°r
)

225 
t
;

226 *
p
;

228 
t
 = 
	`°πod
(
°r
, &
p
);

229 i‡(
p
 =
°r
)

232 i‡(*
p
) {

233 i‡(
	`°rˇ£cmp
(
p
, "s") == 0 || strcasecmp(p, "sec")==0 ||

234 
	`°rˇ£cmp
(
p
, "secs")==0)

235 
t
 *
TIME_UNITS_PER_SEC
;

236 i‡(
	`°rˇ£cmp
(
p
, "ms") == 0 || strcasecmp(p, "msec")==0 ||

237 
	`°rˇ£cmp
(
p
, "msecs") == 0)

238 
t
 *
TIME_UNITS_PER_SEC
/1000;

239 i‡(
	`°rˇ£cmp
(
p
, "us") == 0 || strcasecmp(p, "usec")==0 ||

240 
	`°rˇ£cmp
(
p
, "usecs") == 0)

241 
t
 *
TIME_UNITS_PER_SEC
/1000000;

246 *
time
 = 
t
;

248 
	}
}

251 
	$¥öt_time
(*
buf
, 
Àn
, 
__u32
 
time
)

253 
tmp
 = 
time
;

255 i‡(
tmp
 >
TIME_UNITS_PER_SEC
)

256 
	`¢¥ötf
(
buf
, 
Àn
, "%.1fs", 
tmp
/
TIME_UNITS_PER_SEC
);

257 i‡(
tmp
 >
TIME_UNITS_PER_SEC
/1000)

258 
	`¢¥ötf
(
buf
, 
Àn
, "%.1fms", 
tmp
/(
TIME_UNITS_PER_SEC
/1000));

260 
	`¢¥ötf
(
buf
, 
Àn
, "%uus", 
time
);

261 
	}
}

263 * 
	$•röt_time
(
__u32
 
time
, *
buf
)

265 
	`¥öt_time
(
buf
, 
SPRINT_BSIZE
-1, 
time
);

266  
buf
;

267 
	}
}

269 * 
	$•röt_ticks
(
__u32
 
ticks
, *
buf
)

271  
	`•röt_time
(
	`tc_c‹e_tick2time
(
ticks
), 
buf
);

272 
	}
}

274 
	$gë_size
(*
size
, c⁄° *
°r
)

276 
sz
;

277 *
p
;

279 
sz
 = 
	`°πod
(
°r
, &
p
);

280 i‡(
p
 =
°r
)

283 i‡(*
p
) {

284 i‡(
	`°rˇ£cmp
(
p
, "kb") == 0 || strcasecmp(p, "k")==0)

285 
sz
 *= 1024;

286 i‡(
	`°rˇ£cmp
(
p
, "gb") == 0 || strcasecmp(p, "g")==0)

287 
sz
 *= 1024*1024*1024;

288 i‡(
	`°rˇ£cmp
(
p
, "gbit") == 0)

289 
sz
 *= 1024*1024*1024/8;

290 i‡(
	`°rˇ£cmp
(
p
, "mb") == 0 || strcasecmp(p, "m")==0)

291 
sz
 *= 1024*1024;

292 i‡(
	`°rˇ£cmp
(
p
, "mbit") == 0)

293 
sz
 *= 1024*1024/8;

294 i‡(
	`°rˇ£cmp
(
p
, "kbit") == 0)

295 
sz
 *= 1024/8;

296 i‡(
	`°rˇ£cmp
(
p
, "b") != 0)

300 *
size
 = 
sz
;

302 
	}
}

304 
	$gë_size_™d_˚Œ
(*
size
, *
˚Œ_log
, *
°r
)

306 * 
¶ash
 = 
	`°rchr
(
°r
, '/');

308 i‡(
¶ash
)

309 *
¶ash
 = 0;

311 i‡(
	`gë_size
(
size
, 
°r
))

314 i‡(
¶ash
) {

315 
˚Œ
;

316 
i
;

318 i‡(
	`gë_öãgî
(&
˚Œ
, 
¶ash
+1, 0))

320 *
¶ash
 = '/';

322 
i
=0; i<32; i++) {

323 i‡((1<<
i
Ë=
˚Œ
) {

324 *
˚Œ_log
 = 
i
;

331 
	}
}

333 
	$¥öt_size
(*
buf
, 
Àn
, 
__u32
 
sz
)

335 
tmp
 = 
sz
;

337 i‡(
sz
 >1024*1024 && 
	`Ábs
(1024*1024*
	`röt
(
tmp
/(1024*1024)) - sz) < 1024)

338 
	`¢¥ötf
(
buf
, 
Àn
, "%gMb", 
	`röt
(
tmp
/(1024*1024)));

339 i‡(
sz
 >1024 && 
	`Ábs
(1024*
	`röt
(
tmp
/1024) - sz) < 16)

340 
	`¢¥ötf
(
buf
, 
Àn
, "%gKb", 
	`röt
(
tmp
/1024));

342 
	`¢¥ötf
(
buf
, 
Àn
, "%ub", 
sz
);

343 
	}
}

345 * 
	$•röt_size
(
__u32
 
size
, *
buf
)

347 
	`¥öt_size
(
buf
, 
SPRINT_BSIZE
-1, 
size
);

348  
buf
;

349 
	}
}

351 c⁄° 
	gmax_≥r˚¡_vÆue
 = 0xffffffff;

353 
	$gë_≥r˚¡
(
__u32
 *
≥r˚¡
, c⁄° *
°r
)

355 *
p
;

356 
≥r
 = 
	`°πod
(
°r
, &
p
) / 100.;

358 i‡(
≥r
 > 1. ||Öer < 0)

360 i‡(*
p
 && 
	`°rcmp
(p, "%"))

363 *
≥r˚¡
 = (Ë
	`röt
(
≥r
 * 
max_≥r˚¡_vÆue
);

365 
	}
}

367 
	$¥öt_≥r˚¡
(*
buf
, 
Àn
, 
__u32
 
≥r
)

369 
	`¢¥ötf
(
buf
, 
Àn
, "%g%%", 100. * (Ë
≥r
 / 
max_≥r˚¡_vÆue
);

370 
	}
}

372 * 
	$•röt_≥r˚¡
(
__u32
 
≥r
, *
buf
)

374 
	`¥öt_≥r˚¡
(
buf
, 
SPRINT_BSIZE
-1, 
≥r
);

375  
buf
;

376 
	}
}

378 
	$¥öt_qdisc_h™dÀ
(*
buf
, 
Àn
, 
__u32
 
h
)

380 
	`¢¥ötf
(
buf
, 
Àn
, "%x:", 
	`TC_H_MAJ
(
h
)>>16);

381 
	}
}

383 * 
	$•röt_qdisc_h™dÀ
(
__u32
 
h
, *
buf
)

385 
	`¥öt_qdisc_h™dÀ
(
buf
, 
SPRINT_BSIZE
-1, 
h
);

386  
buf
;

387 
	}
}

389 * 
	$a˘i⁄_n2a
(
a˘i⁄
, *
buf
, 
Àn
)

391 
a˘i⁄
) {

395 
TC_ACT_OK
:

398 
TC_ACT_SHOT
:

401 
TC_ACT_RECLASSIFY
:

403 
TC_ACT_PIPE
:

405 
TC_ACT_STOLEN
:

408 
	`¢¥ötf
(
buf
, 
Àn
, "%d", 
a˘i⁄
);

409  
buf
;

411 
	}
}

413 
	$a˘i⁄_a2n
(*
¨g
, *
ªsu…
)

415 
ªs
;

417 i‡(
	`m©ches
(
¨g
, "continue") == 0)

418 
ªs
 = -1;

419 i‡(
	`m©ches
(
¨g
, "drop") == 0)

420 
ªs
 = 
TC_ACT_SHOT
;

421 i‡(
	`m©ches
(
¨g
, "shot") == 0)

422 
ªs
 = 
TC_ACT_SHOT
;

423 i‡(
	`m©ches
(
¨g
, "pass") == 0)

424 
ªs
 = 
TC_ACT_OK
;

425 i‡(
	`°rcmp
(
¨g
, "ok") == 0)

426 
ªs
 = 
TC_ACT_OK
;

427 i‡(
	`m©ches
(
¨g
, "reclassify") == 0)

428 
ªs
 = 
TC_ACT_RECLASSIFY
;

430 
dummy
;

431 i‡(
	`ssˇnf
(
¨g
, "%d%c", &
ªs
, &
dummy
) != 1)

434 *
ªsu…
 = 
ªs
;

436 
	}
}

438 
	$¥öt_tm
(
FILE
 * 
f
, c⁄° 
tcf_t
 *
tm
)

440 
hz
 = 
	`gë_u£r_hz
();

441 i‡(
tm
->
ö°Æl
 != 0)

442 
	`Ârötf
(
f
, " in°ÆÀd %u sec", ()(
tm
->
ö°Æl
/
hz
));

443 i‡(
tm
->
œ°u£
 != 0)

444 
	`Ârötf
(
f
, " u£d %u sec", ()(
tm
->
œ°u£
/
hz
));

445 i‡(
tm
->
expúes
 != 0)

446 
	`Ârötf
(
f
, "Éxpúe†%u sec", ()(
tm
->
expúes
/
hz
));

447 
	}
}

449 
	$¥öt_tc°©s2_©å
(
FILE
 *
Â
, 
π©å
 *
πa
, *
¥efix
, π©å **
x°©s
)

451 
	`SPRINT_BUF
(
b1
);

452 
π©å
 *
tbs
[
TCA_STATS_MAX
 + 1];

454 
	`∑r£_π©å_√°ed
(
tbs
, 
TCA_STATS_MAX
, 
πa
);

456 i‡(
tbs
[
TCA_STATS_BASIC
]) {

457 
g√t_°©s_basic
 
bs
 = {0};

458 
	`mem˝y
(&
bs
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_BASIC
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_BASIC]), (bs)));

459 
	`Ârötf
(
Â
, "%sSent %llu bytes %uÖkt",

460 
¥efix
, (Ë
bs
.
byãs
, bs.
∑ckës
);

463 i‡(
tbs
[
TCA_STATS_QUEUE
]) {

464 
g√t_°©s_queue
 
q
 = {0};

465 
	`mem˝y
(&
q
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_QUEUE
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_QUEUE]), (q)));

466 
	`Ârötf
(
Â
, " (dropped %u, overlimits %uÑequeues %u) ",

467 
q
.
dr›s
, q.
ovîlimôs
, q.
ªqueues
);

470 i‡(
tbs
[
TCA_STATS_RATE_EST
]) {

471 
g√t_°©s_øã_e°
 
ª
 = {0};

472 
	`mem˝y
(&
ª
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_RATE_EST
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_RATE_EST]), (re)));

473 
	`Ârötf
(
Â
, "\n%srate %s %upps ",

474 
¥efix
, 
	`•röt_øã
(
ª
.
bps
, 
b1
),Ñe.
µs
);

477 i‡(
tbs
[
TCA_STATS_QUEUE
]) {

478 
g√t_°©s_queue
 
q
 = {0};

479 
	`mem˝y
(&
q
, 
	`RTA_DATA
(
tbs
[
TCA_STATS_QUEUE
]), 
	`MIN
(
	`RTA_PAYLOAD
(tbs[TCA_STATS_QUEUE]), (q)));

480 i‡(!
tbs
[
TCA_STATS_RATE_EST
])

481 
	`Ârötf
(
Â
, "\n%s", 
¥efix
);

482 
	`Ârötf
(
Â
, "backlog %s %upÑequeues %u ",

483 
	`•röt_size
(
q
.
backlog
, 
b1
), q.
qÀn
, q.
ªqueues
);

486 i‡(
x°©s
)

487 *
x°©s
 = 
tbs
[
TCA_STATS_APP
] ? : 
NULL
;

488 
	}
}

490 
	$¥öt_tc°©s_©å
(
FILE
 *
Â
, 
π©å
 *
tb
[], *
¥efix
, π©å **
x°©s
)

492 
	`SPRINT_BUF
(
b1
);

494 i‡(
tb
[
TCA_STATS2
]) {

495 
	`¥öt_tc°©s2_©å
(
Â
, 
tb
[
TCA_STATS2
], 
¥efix
, 
x°©s
);

496 i‡(
x°©s
 && 
NULL
 == *xstats)

497 
com∑t_x°©s
;

501 i‡(
tb
[
TCA_STATS
]) {

502 
tc_°©s
 
°
;

505 
	`mem£t
(&
°
, 0, (st));

506 
	`mem˝y
(&
°
, 
	`RTA_DATA
(
tb
[
TCA_STATS
]), 
	`MIN
(
	`RTA_PAYLOAD
(tb[TCA_STATS]), (st)));

508 
	`Ârötf
(
Â
, "%sSent %llu bytes %uÖkts (dropped %u, overlimits %u) ",

509 
¥efix
, ()
°
.
byãs
, st.
∑ckës
, st.
dr›s
,

510 
°
.
ovîlimôs
);

512 i‡(
°
.
bps
 || st.
µs
 || st.
qÀn
 || st.
backlog
) {

513 
	`Ârötf
(
Â
, "\n%s", 
¥efix
);

514 i‡(
°
.
bps
 || st.
µs
) {

515 
	`Ârötf
(
Â
, "rate ");

516 i‡(
°
.
bps
)

517 
	`Ârötf
(
Â
, "%†", 
	`•röt_øã
(
°
.
bps
, 
b1
));

518 i‡(
°
.
µs
)

519 
	`Ârötf
(
Â
, "%uµ†", 
°
.
µs
);

521 i‡(
°
.
qÀn
 || st.
backlog
) {

522 
	`Ârötf
(
Â
, "backlog ");

523 i‡(
°
.
backlog
)

524 
	`Ârötf
(
Â
, "%†", 
	`•röt_size
(
°
.
backlog
, 
b1
));

525 i‡(
°
.
qÀn
)

526 
	`Ârötf
(
Â
, "%u∞", 
°
.
qÀn
);

531 
com∑t_x°©s
:

532 i‡(
tb
[
TCA_XSTATS
] && 
x°©s
)

533 *
x°©s
 = 
tb
[
TCA_XSTATS
];

534 
	}
}

	@tc_util.h

1 #i‚de‡
_TC_UTIL_H_


2 
	#_TC_UTIL_H_
 1

	)

4 
	#MAX_MSG
 16384

	)

5 
	~<löux/pkt_sched.h
>

6 
	~<löux/pkt_˛s.h
>

7 
	~<löux/gí_°©s.h
>

8 
	~"tc_c‹e.h
"

10 
	sqdisc_utû


12 
qdisc_utû
 *
	m√xt
;

13 c⁄° *
	mid
;

14 (*
	m∑r£_q›t
)(
qdisc_utû
 *
	mqu
, 
	m¨gc
, **
	m¨gv
, 
∆msghdr
 *
	mn
);

15 (*
	m¥öt_q›t
)(
qdisc_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
);

16 (*
	m¥öt_x°©s
)(
qdisc_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	mx°©s
);

18 (*
	m∑r£_c›t
)(
qdisc_utû
 *
	mqu
, 
	m¨gc
, **
	m¨gv
, 
∆msghdr
 *
	mn
);

19 (*
	m¥öt_c›t
)(
qdisc_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
);

22 
	sfûãr_utû


24 
fûãr_utû
 *
	m√xt
;

25 
	mid
[16];

26 (*
	m∑r£_f›t
)(
fûãr_utû
 *
	mqu
, *
	mfh™dÀ
, 
	m¨gc
,

27 **
	m¨gv
, 
∆msghdr
 *
	mn
);

28 (*
	m¥öt_f›t
)(
fûãr_utû
 *
	mqu
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
, 
__u32
 
	mfh™dÀ
);

31 
	sa˘i⁄_utû


33 
a˘i⁄_utû
 *
	m√xt
;

34 
	mid
[16];

35 (*
	m∑r£_a›t
)(
a˘i⁄_utû
 *
	ma
, *
	m¨gc
, ***
	m¨gv
,

36 
	mcode
, 
∆msghdr
 *
	mn
);

37 (*
	m¥öt_a›t
)(
a˘i⁄_utû
 *
	mau
, 
FILE
 *
	mf
, 
π©å
 *
	m›t
);

38 (*
	m¥öt_x°©s
)(
a˘i⁄_utû
 *
	mau
, 
FILE
 *
	mf
, 
π©å
 *
	mx°©s
);

41 c⁄° *
gë_tc_lib
();

43 
qdisc_utû
 *
gë_qdisc_köd
(c⁄° *
°r
);

44 
fûãr_utû
 *
gë_fûãr_köd
(c⁄° *
°r
);

46 
gë_qdisc_h™dÀ
(
__u32
 *
h
, c⁄° *
°r
);

47 
gë_øã
(*
øã
, c⁄° *
°r
);

48 
gë_≥r˚¡
(*
≥r˚¡
, c⁄° *
°r
);

49 
gë_size
(*
size
, c⁄° *
°r
);

50 
gë_size_™d_˚Œ
(*
size
, *
˚Œ_log
, *
°r
);

51 
gë_time
(*
time
, c⁄° *
°r
);

52 
¥öt_øã
(*
buf
, 
Àn
, 
__u32
 
øã
);

53 
¥öt_size
(*
buf
, 
Àn
, 
__u32
 
size
);

54 
¥öt_≥r˚¡
(*
buf
, 
Àn
, 
__u32
 
≥r˚¡
);

55 
¥öt_qdisc_h™dÀ
(*
buf
, 
Àn
, 
__u32
 
h
);

56 
¥öt_time
(*
buf
, 
Àn
, 
__u32
 
time
);

57 * 
•röt_øã
(
__u32
 
øã
, *
buf
);

58 * 
•röt_size
(
__u32
 
size
, *
buf
);

59 * 
•röt_qdisc_h™dÀ
(
__u32
 
h
, *
buf
);

60 * 
•röt_tc_˛assid
(
__u32
 
h
, *
buf
);

61 * 
•röt_time
(
__u32
 
time
, *
buf
);

62 * 
•röt_ticks
(
__u32
 
ticks
, *
buf
);

63 * 
•röt_≥r˚¡
(
__u32
 
≥r˚¡
, *
buf
);

65 
¥öt_tc°©s_©å
(
FILE
 *
Â
, 
π©å
 *
tb
[], *
¥efix
, π©å **
x°©s
);

66 
¥öt_tc°©s2_©å
(
FILE
 *
Â
, 
π©å
 *
πa
, *
¥efix
, π©å **
x°©s
);

68 
gë_tc_˛assid
(
__u32
 *
h
, c⁄° *
°r
);

69 
¥öt_tc_˛assid
(*
buf
, 
Àn
, 
__u32
 
h
);

70 * 
•röt_tc_˛assid
(
__u32
 
h
, *
buf
);

72 
tc_¥öt_pﬁi˚
(
FILE
 *
f
, 
π©å
 *
tb
);

73 
∑r£_pﬁi˚
(*, ***, , 
∆msghdr
 *);

75 *
a˘i⁄_n2a
(
a˘i⁄
, *
buf
, 
Àn
);

76 
a˘i⁄_a2n
(*
¨g
, *
ªsu…
);

77 
a˘_∑r£_pﬁi˚
(
a˘i⁄_utû
 *
a
,*, ***, , 
∆msghdr
 *);

78 
¥öt_pﬁi˚
(
a˘i⁄_utû
 *
a
, 
FILE
 *
f
,

79 
π©å
 *
tb
);

80 
pﬁi˚_¥öt_x°©s
(
a˘i⁄_utû
 *
a
,
FILE
 *
f
,

81 
π©å
 *
tb
);

82 
tc_¥öt_a˘i⁄
(
FILE
 *
f
, c⁄° 
π©å
 *
tb
);

83 
tc_¥öt_ùt
(
FILE
 *
f
, c⁄° 
π©å
 *
tb
);

84 
∑r£_a˘i⁄
(*, ***, , 
∆msghdr
 *);

85 
¥öt_tm
(
FILE
 *
f
, c⁄° 
tcf_t
 *
tm
);

	@
1
.
0
55
549
em_cmp.c
em_meta.c
em_nbyte.c
em_u32.c
emp_ematch.l
emp_ematch.y
emp_ematch.yacc.h
f_basic.c
f_fw.c
f_route.c
f_rsvp.c
f_tcindex.c
f_u32.c
m_action.c
m_ematch.c
m_ematch.h
m_estimator.c
m_gact.c
m_ipt.c
m_mirred.c
m_pedit.c
m_pedit.h
m_police.c
p_icmp.c
p_ip.c
p_tcp.c
p_udp.c
q_atm.c
q_cbq.c
q_dsmark.c
q_fifo.c
q_gred.c
q_hfsc.c
q_htb.c
q_ingress.c
q_netem.c
q_prio.c
q_red.c
q_sfq.c
q_tbf.c
tc.c
tc_cbq.c
tc_cbq.h
tc_class.c
tc_common.h
tc_core.c
tc_core.h
tc_estimator.c
tc_filter.c
tc_monitor.c
tc_qdisc.c
tc_red.c
tc_red.h
tc_util.c
tc_util.h
